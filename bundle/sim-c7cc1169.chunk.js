import{A as e,ar as t,aq as a,eG as o,T as s,eH as i,dY as n,L as r,D as l,b as c,eI as p,eJ as m,eK as u,E as h,cj as d,cm as f,co as g,cp as S,dU as w,bD as b,a2 as T,ab as y,F as C,aD as k,bn as G,w as A,B as P,aE as R,bp as O,a5 as E,$ as B,a4 as M,V as v}from"./detailed_results-7b150079.chunk.js";import{m as I,j as W,i as D,a as x,b as N,c as F,B as j,I as H,K as Y,F as q,L as z,T as U,t as J}from"./individual_sim_ui-7ca50b32.chunk.js";I({fieldName:"innervateTarget",id:e.fromSpellId(29166),extraCssClasses:["within-raid-sim-hide"],getValue:e=>e.getSpecOptions().innervateTarget?.type==t.Player,setValue:(e,o,s)=>{const i=o.getSpecOptions();i.innervateTarget=a.create({type:s?t.Player:t.Unknown,index:0}),o.setSpecOptions(e,i)}});const L=W({fieldName:"latencyMs",label:"Latency",labelTooltip:"Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued."}),K=D({fieldName:"assumeBleedActive",label:"Assume Bleed Always Active",labelTooltip:"Assume bleed always exists for 'Rend and Tear' calculations. Otherwise will only calculate based on own rip/rake/lacerate.",extraCssClasses:["within-raid-sim-hide"]});function V(e){let t=e.getRotation();return t.manualParams&&t.rotationType==o.SingleTarget}function _(e){let t=e.getRotation();return t.manualParams&&t.rotationType==o.Aoe}const $={inputs:[x({fieldName:"rotationType",label:"Type",values:[{name:"Single Target",value:o.SingleTarget},{name:"AOE",value:o.Aoe}]}),N({fieldName:"prePopOoc",label:"Pre-pop Clearcasting",labelTooltip:"Start fight with clearcasting",showWhen:e=>e.getTalents().omenOfClarity,changeEmitter:e=>s.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter])}),N({fieldName:"prePopBerserk",label:"Pre-pop Berserk",labelTooltip:"Pre pop berserk 1 sec before fight",showWhen:e=>e.getTalents().berserk,changeEmitter:e=>s.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter])}),N({fieldName:"manualParams",label:"Manual Advanced Parameters",labelTooltip:"Manually specify advanced parameters, otherwise will use preset defaults"}),F({fieldName:"maxFfDelay",label:"Max FF Delay",labelTooltip:"Max allowed delay to wait for ff to come off CD in seconds",float:!0,positive:!0,showWhen:e=>e.getRotation().manualParams}),F({fieldName:"minRoarOffset",label:"Roar Offset",labelTooltip:"Targeted offset in Rip/Roar timings",showWhen:V}),F({fieldName:"ripLeeway",label:"Rip Leeway",labelTooltip:"Rip leeway when determining roar clips",showWhen:V}),N({fieldName:"useRake",label:"Use Rake",labelTooltip:"Use rake during rotation",showWhen:V}),N({fieldName:"useBite",label:"Bite during rotation",labelTooltip:"Use bite during rotation rather than just at end",showWhen:V}),F({fieldName:"biteTime",label:"Bite Time",labelTooltip:"Min seconds on Rip/Roar to bite",showWhen:e=>V(e)&&1==e.getRotation().useBite&&e.getRotation().biteModeType==i.Emperical}),N({fieldName:"flowerWeave",label:"Flower Weave",labelTooltip:"Fish for clearcasting during rotation with gotw",showWhen:_}),F({extraCssClasses:["used-in-apl"],fieldName:"raidTargets",label:"GotW Raid Targets",labelTooltip:"Raid size to assume for clearcast proc chance (can include pets as well, so 25 man raid potentically can be ~30)",showWhen:e=>e.aplRotation.enabled||_(e)&&1==e.getRotation().flowerWeave}),F({fieldName:"hotUptime",label:"Revitalize Hot Uptime",labelTooltip:"Hot uptime percentage to assume when theorizing energy gains",percent:!0,showWhen:e=>1==e.getRotation().useBite&&e.getRotation().biteModeType==i.Analytical})]},Q={name:"Omen",data:n.create({talentsString:"-5032021323220100531202303104-20350001",glyphs:r.create({major1:l.GlyphOfRip,major2:l.GlyphOfShred,major3:l.DruidMajorGlyphNone,minor1:c.GlyphOfDash,minor2:c.GlyphOfTheWild,minor3:c.GlyphOfUnburdenedRebirth})})},X={name:"Berserk",data:n.create({talentsString:"-503202132322010053120230310511-1043",glyphs:r.create({major1:l.GlyphOfRip,major2:l.GlyphOfShred,major3:l.DruidMajorGlyphNone,minor1:c.GlyphOfDash,minor2:c.GlyphOfTheWild,minor3:c.GlyphOfUnburdenedRebirth})})},Z=p.create({rotationType:o.SingleTarget,bearWeaveType:m.None,minCombosForRip:5,minCombosForBite:5,useRake:!0,useBite:!0,mangleSpam:!1,biteModeType:i.Emperical,biteTime:4,berserkBiteThresh:25,berserkFfThresh:15,powerbear:!1,minRoarOffset:12,ripLeeway:3,maintainFaerieFire:!0,hotUptime:0,snekWeave:!1,flowerWeave:!1,raidTargets:30,maxFfDelay:.1,prePopOoc:!0}),ee=u.create({latencyMs:100,assumeBleedActive:!0}),te=h.create({flask:d.FlaskOfRelentlessAssault,food:f.FoodGrilledMudfish,defaultPotion:g.PotionOfSpeed,weaponMain:S.ImbueAdamantiteWeightStone}),ae={name:"Legacy Default",rotation:w.create({specRotationOptionsJson:p.toJsonString(Z)})},oe={name:"PreRaid",tooltip:j,gear:b.fromJsonString('{"items": [\n\t\t{"id":42550,"enchant":3817,"gems":[41398,39996]},\n\t\t{"id":40678},\n\t\t{"id":37139,"enchant":3808,"gems":[39996]},\n\t\t{"id":37840,"enchant":3605},\n\t\t{"id":37219,"enchant":3832},\n\t\t{"id":44203,"enchant":3845,"gems":[0]},\n\t\t{"id":37409,"enchant":3604,"gems":[0]},\n\t\t{"id":40694,"gems":[49110,39996]},\n\t\t{"id":37644,"enchant":3823},\n\t\t{"id":44297,"enchant":3606},\n\t\t{"id":37642},\n\t\t{"id":37624},\n\t\t{"id":40684},\n\t\t{"id":37166},\n\t\t{"id":37883,"enchant":3827},\n\t\t{},\n\t\t{"id":40713}\n  ]}')};class se extends H{constructor(e,t){super(e,t,{cssClass:"feral-druid-sim-ui",cssScheme:"druid",knownIssues:[],warnings:[],epStats:[T.StatStrength,T.StatAgility,T.StatAttackPower,T.StatMeleeHit,T.StatMeleeCrit,T.StatMeleeHaste,T.StatArmorPenetration,T.StatExpertise],epPseudoStats:[y.PseudoStatMainHandDps],epReferenceStat:T.StatAttackPower,displayStats:[T.StatHealth,T.StatStrength,T.StatAgility,T.StatAttackPower,T.StatMeleeHit,T.StatMeleeCrit,T.StatMeleeHaste,T.StatArmorPenetration,T.StatExpertise,T.StatMana],defaults:{gear:oe.gear,epWeights:C.fromMap({[T.StatStrength]:2.4,[T.StatAgility]:2.39,[T.StatAttackPower]:1,[T.StatMeleeHit]:2.51,[T.StatMeleeCrit]:2.23,[T.StatMeleeHaste]:1.83,[T.StatArmorPenetration]:2.08,[T.StatExpertise]:2.44},{[y.PseudoStatMainHandDps]:16.5}),consumes:te,rotation:Z,talents:Q.data,specOptions:ee,raidBuffs:k.create({arcaneBrilliance:!0,giftOfTheWild:G.TristateEffectImproved,bloodlust:!0,manaSpringTotem:G.TristateEffectRegular,strengthOfEarthTotem:G.TristateEffectImproved,battleShout:G.TristateEffectImproved,unleashedRage:!0,icyTalons:!0,swiftRetribution:!0,sanctifiedRetribution:!0}),partyBuffs:A.create({heroicPresence:!0}),individualBuffs:P.create({blessingOfKings:!0,blessingOfMight:G.TristateEffectImproved}),debuffs:R.create({judgementOfWisdom:!0,bloodFrenzy:!0,giftOfArthas:!0,exposeArmor:!0,faerieFire:G.TristateEffectImproved,sunderArmor:!0,curseOfWeakness:G.TristateEffectRegular,heartOfTheCrusader:!0})},playerIconInputs:[],rotationInputs:$,includeBuffDebuffInputs:[Y,q,z],excludeBuffDebuffInputs:[],otherInputs:{inputs:[L,K,U,J]},encounterPicker:{showExecuteProportion:!1},presets:{talents:[Q,X],rotations:[ae],gear:[oe]}})}addOptimizeGemsAction(){this.addAction("Suggest Gems","optimize-gems-action",(async()=>{this.optimizeGems()}))}async optimizeGems(){let e=this.player.getGear().withoutGems();e=e.withMetaGem(this.sim.db.lookupGem(41398));const t=this.player.getEpWeights();let a=O.GemColorBlue,o=this.findBlueTearSlot(e,t);null==o&&(a=O.GemColorYellow,o=this.findYellowTearSlot(e,t)),e=this.socketTear(e,o,a),await this.updateGear(e);const s=this.findSocketsByColor(e,t,O.GemColorRed,o),i=new Array,n=this.calcArpTarget(e),r=(new C).withStat(T.StatArmorPenetration,n+11);i.push([40117,r]);const l=(new C).withStat(T.StatExpertise,6.5*E*4+4);i.push([40118,l]);const c=this.calcCritCap(e);i.push([40112,c]),i.push([40111,new C]);let p=0;this.player.hasProfession(B.Jewelcrafting)&&(e=this.optimizeJcGems(e,s,n,r,c),p=3),e=await this.fillGemsToCaps(e,s,i,0,p);const m=this.findSocketsByColor(e,t,O.GemColorYellow,o),u=new Array,h=(new C).withStat(T.StatMeleeHit,8*M+4);u.push([40125,h]),u.push([40162,h.add(l)]),this.detectArpStackConfiguration(n)&&(this.sortYellowSockets(e,m,t,o),u.reverse(),u.push([40117,r])),u.push([40148,h.add(c)]),u.push([40143,h]),u.push([40147,c]),u.push([40142,c]),u.push([40146,new C]),await this.fillGemsToCaps(e,m,u,0,0)}calcArpTarget(e){let t=1399;e.hasTrinket(45931)?t-=751:e.hasTrinket(40256)&&(t-=612);const a=e.getEquippedItem(v.ItemSlotMainHand);return null!=a&&null!=a.enchant&&3225==a.enchant.effectId&&(t-=120),t}calcCritCap(e){let t=0;return e.hasRelic(47668)&&(t+=200),e.hasRelic(50456)&&(t+=220),(e.hasTrinket(47131)||e.hasTrinket(47464))&&(t+=510),(e.hasTrinket(47115)||e.hasTrinket(47303))&&(t+=450),(e.hasTrinket(44253)||e.hasTrinket(42987))&&(t+=300),(new C).withStat(T.StatMeleeCrit,45.91*(77.8-1.1*t*1.06*1.02/83.33))}async updateGear(e){return this.player.setGear(s.nextEventID(),e),await this.sim.updateCharacterStats(s.nextEventID()),C.fromProto(this.player.getCurrentStats().finalStats)}findBlueTearSlot(e,t){let a=null,o=1e-8;for(var s of e.getItemSlots()){const i=e.getEquippedItem(s);if(!i)continue;if(1!=i.numSocketsOfColor(O.GemColorBlue))continue;const n=new C(i.item.socketBonus).computeEP(t);n>o&&(a=s,o=n)}return a}findYellowTearSlot(e,t){let a=null,o=1e-8;for(var s of e.getItemSlots()){const i=e.getEquippedItem(s);if(!i)continue;if(0!=i.numSocketsOfColor(O.GemColorBlue))continue;const n=i.numSocketsOfColor(O.GemColorYellow);if(0==n)continue;const r=new C(i.item.socketBonus).computeEP(t)/n;r>o&&(a=s,o=r)}return a}socketTear(e,t,a){if(null!=t){const o=e.getEquippedItem(t);for(const[s,i]of o.allSocketColors().entries())if(i==a)return e.withEquippedItem(t,o.withGem(this.sim.db.lookupGem(49110),s),!0)}return e}findSocketsByColor(e,t,a,o){const s=new Array,i=this.player.isBlacksmithing();for(var n of e.getItemSlots()){const r=e.getEquippedItem(n);if(!r)continue;const l=r.numSocketsOfColor(O.GemColorBlue)>0&&n!=o;for(const[e,o]of r.curSocketColors(i).entries()){if(r.hasSocketedGem(e))continue;let i=!1;o!=O.GemColorYellow||l||(i=new C(r.item.socketBonus).computeEP(t)>1e-8),(a==O.GemColorYellow&&i||a==O.GemColorRed&&!i)&&s.push([n,e])}}return s}sortYellowSockets(e,t,a,o){t.sort(((t,s)=>{const i=t[0],n=s[0];if(i==n)return 0;if(i==o)return-1;if(n==o)return 1;const r=e.getEquippedItem(i),l=new C(r.item.socketBonus).computeEP(a),c=e.getEquippedItem(n);return new C(c.item.socketBonus).computeEP(a)/c.numSocketsOfColor(O.GemColorYellow)-l/r.numSocketsOfColor(O.GemColorYellow)}))}async fillGemsToCaps(e,t,a,o,s){let i=e;const n=this.sim.db.lookupGem(a[o][0]);if(0==o)for(const[d,f]of t.slice(s))i=i.withGem(d,f,n);let r=await this.updateGear(i);const l=a[o][1];if(r.belowCaps(l)||o==a.length-1)return i;const c=this.sim.db.lookupGem(a[o+1][0]),p=a[o+1][1];let m=l.subtract(p);l.computeEP(m)<=0&&(m=l);for(var u=t.length-1;u>=s&&!r.belowCaps(m);u--){const[e,a]=t[u];i=i.withGem(e,a,c),r=await this.updateGear(i)}let h=u+1;return r.belowCaps(l)||(h=s),await this.fillGemsToCaps(i,t,a,o+1,h)}calcDistanceToArpTarget(e,t,a,o,s){const i=t+34*e+20*Math.max(0,Math.min(a-3,Math.floor((o-t-34*e)/20)));return Math.abs(i-s)}optimizeJcGems(e,t,a,o,s){const i=C.fromProto(this.player.getCurrentStats().finalStats),n=i.getStat(T.StatArmorPenetration),r=t.length,l=o.getStat(T.StatArmorPenetration),c=[0,1,2,3].reduce(((e,t)=>this.calcDistanceToArpTarget(e,n,r,l,a)<this.calcDistanceToArpTarget(t,n,r,l,a)?e:t)),p=i.belowCaps(s);let m=e;for(let u=0;u<3;u++){let e=42142;u<c?e=42153:p&&(e=42143),m=m.withGem(t[u][0],t[u][1],this.sim.db.lookupGem(e))}return m}detectArpStackConfiguration(e){const t=C.fromProto(this.player.getCurrentStats().finalStats).getStat(T.StatArmorPenetration);return e>1e3&&t>648&&t+20<e+11}}export{Z as D,se as F,Q as O,oe as P,ee as a,te as b};
//# sourceMappingURL=sim-c7cc1169.chunk.js.map
