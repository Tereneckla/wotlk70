{"version":3,"file":"sim-8c464cc0.chunk.js","sources":["../../../ui/elemental_shaman/inputs.ts","../../../ui/elemental_shaman/presets.ts","../../../ui/elemental_shaman/sim.ts"],"sourcesContent":["import { IconPickerConfig } from '../core/components/icon_picker.js';\r\nimport { ElementalShaman_Rotation_RotationType as RotationType, ShamanShield } from '../core/proto/shaman.js';\r\nimport { ElementalShaman_Options as ShamanOptions } from '../core/proto/shaman.js';\r\nimport { AirTotem } from '../core/proto/shaman.js';\r\nimport { Spec } from '../core/proto/common.js';\r\nimport { ActionId } from '../core/proto_utils/action_id.js';\r\nimport { Player } from '../core/player.js';\r\n\r\nimport * as InputHelpers from '../core/components/input_helpers.js';\r\n\r\n// Configuration for spec-specific UI elements on the settings tab.\r\n// These don't need to be in a separate file but it keeps things cleaner.\r\n\r\nexport const Bloodlust = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecElementalShaman>({\r\n\tfieldName: 'bloodlust',\r\n\tid: ActionId.fromSpellId(2825),\r\n});\r\nexport const ShamanShieldInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecElementalShaman, ShamanShield>({\r\n\tfieldName: 'shield',\r\n\tvalues: [\r\n\t\t{ value: ShamanShield.NoShield, tooltip: 'No Shield' },\r\n\t\t{ actionId: ActionId.fromSpellId(33736), value: ShamanShield.WaterShield },\r\n\t\t{ actionId: ActionId.fromSpellId(25472), value: ShamanShield.LightningShield },\r\n\t],\r\n});\r\n\r\nexport const ElementalShamanRotationConfig = {\r\n\tinputs: [\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecElementalShaman, RotationType>({\r\n\t\t\tfieldName: 'type',\r\n\t\t\tlabel: 'Type',\r\n\t\t\tvalues: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Adaptive', value: RotationType.Adaptive,\r\n\t\t\t\t\ttooltip: 'Dynamically adapts based on available mana to maximize CL casts without going OOM.',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Manual', value: RotationType.Manual,\r\n\t\t\t\t\ttooltip: 'Allows custom selection of which spells to use and to modify cast conditions.',\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'inThunderstormRange',\r\n\t\t\tlabel: 'In Thunderstorm Range',\r\n\t\t\tlabelTooltip: 'Thunderstorm will hit all targets when cast. Ignores knockback.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecElementalShaman>) => player.getTalents().thunderstorm,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'lvbFsWaitMs',\r\n\t\t\tlabel: 'Max wait for LvB/FS (ms)',\r\n\t\t\tlabelTooltip: 'Amount of time the sim will wait if FS is about to fall off or LvB CD is about to come up. Setting to 0 will default to 175ms',\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'useChainLightning',\r\n\t\t\tlabel: 'Use Chain Lightning in Rotation',\r\n\t\t\tlabelTooltip: 'Use Chain Lightning in rotation',\r\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'useClOnlyGap',\r\n\t\t\tlabel: 'Use CL only as gap filler',\r\n\t\t\tlabelTooltip: 'Use CL to fill short gaps in LvB CD instead of on CD.',\r\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual && player.getRotation().useChainLightning,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'clMinManaPer',\r\n\t\t\tlabel: 'Min mana percent to use Chain Lightning',\r\n\t\t\tlabelTooltip: 'Customize minimum mana level to cast Chain Lightning. 0 will spam until OOM.',\r\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual && player.getRotation().useChainLightning,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'useFireNova',\r\n\t\t\tlabel: 'Use Fire Nova in Rotation',\r\n\t\t\tlabelTooltip: 'Fire Nova will hit all targets when cast.',\r\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'fnMinManaPer',\r\n\t\t\tlabel: 'Min mana percent to use FireNova',\r\n\t\t\tlabelTooltip: 'Customize minimum mana level to cast Fire Nova. 0 will spam until OOM.',\r\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual && player.getRotation().useFireNova,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'overwriteFlameshock',\r\n\t\t\tlabel: 'Allow Flameshock to be overwritten',\r\n\t\t\tlabelTooltip: 'Will use flameshock at the end of the duration even if its still ticking if there isn\\'t enough time to cast lavaburst before expiring.',\r\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'alwaysCritLvb',\r\n\t\t\tlabel: 'Only cast Lavaburst with FS',\r\n\t\t\tlabelTooltip: 'Will only cast Lavaburst if Flameshock will be active when the cast finishes.',\r\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\r\n\t\t\tfieldName: 'useThunderstorm',\r\n\t\t\tlabel: 'Allow Thunderstorm to be cast.',\r\n\t\t\tlabelTooltip: 'Disabling this will stop thunderstorm from being cast entirely.',\r\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\r\n\t\t\tshowWhen: (player: Player<Spec.SpecElementalShaman>) => player.getTalents().thunderstorm,\r\n\t\t}),\r\n\t],\r\n};\r\n","import { Consumes } from '../core/proto/common.js';\r\n\r\nimport { EquipmentSpec } from '../core/proto/common.js';\r\nimport { Flask } from '../core/proto/common.js';\r\nimport { Food } from '../core/proto/common.js';\r\nimport { Glyphs } from '../core/proto/common.js';\r\nimport { Potions } from '../core/proto/common.js';\r\nimport { SavedRotation, SavedTalents } from '../core/proto/ui.js';\r\nimport { Spec } from '../core/proto/common.js';\r\nimport { Player } from '../core/player.js';\r\nimport { APLRotation } from '../core/proto/apl.js';\r\n\r\nimport { ElementalShaman_Rotation as ElementalShamanRotation, ElementalShaman_Options as ElementalShamanOptions, ShamanShield, ShamanMajorGlyph, ShamanMinorGlyph } from '../core/proto/shaman.js';\r\nimport { ElementalShaman_Rotation_RotationType as RotationType } from '../core/proto/shaman.js';\r\n\r\nimport {\r\n  AirTotem,\r\n  EarthTotem,\r\n  FireTotem,\r\n  WaterTotem,\r\n  ShamanTotems,\r\n} from '../core/proto/shaman.js';\r\n\r\n\r\nimport * as Tooltips from '../core/constants/tooltips.js';\r\nimport { Faction } from '../core/proto/common.js';\r\n\r\n// Preset options for this spec.\r\n// Eventually we will import these values for the raid sim too, so its good to\r\n// keep them in a separate file.\r\n\r\n// Default talents. Uses the wowhead calculator format, make the talents on\r\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\r\nexport const StandardTalents = {\r\n  name: 'Standard',\r\n  data: SavedTalents.create({\r\n    talentsString: '0532001523212351322301051-00504',\r\n    glyphs: Glyphs.create({\r\n      major1: ShamanMajorGlyph.GlyphOfLightningBolt,\r\n      major2: ShamanMajorGlyph.GlyphOfTotemOfWrath,\r\n      major3: ShamanMajorGlyph.ShamanMajorGlyphNone,\r\n      minor1: ShamanMinorGlyph.GlyphOfThunderstorm,\r\n      minor2: ShamanMinorGlyph.GlyphOfWaterShield,\r\n      minor3: ShamanMinorGlyph.GlyphOfGhostWolf,\r\n    }),\r\n  }),\r\n};\r\n\r\nexport const DefaultRotation = ElementalShamanRotation.create({\r\n  totems: ShamanTotems.create({\r\n    earth: EarthTotem.StrengthOfEarthTotem,\r\n    air: AirTotem.WrathOfAirTotem,\r\n    fire: FireTotem.TotemOfWrath,\r\n    water: WaterTotem.ManaSpringTotem,\r\n    useFireElemental: true,\r\n  }),\r\n  type: RotationType.Adaptive,\r\n  fnMinManaPer: 66,\r\n  clMinManaPer: 33,\r\n  useChainLightning: false,\r\n  useFireNova: false,\r\n  useThunderstorm: true,\r\n});\r\n\r\nexport const DefaultOptions = ElementalShamanOptions.create({\r\n  shield: ShamanShield.WaterShield,\r\n  bloodlust: true,\r\n});\r\n\r\nexport const DefaultConsumes = Consumes.create({\r\n  defaultPotion: Potions.HastePotion,\r\n  flask: Flask.FlaskOfBlindingLight,\r\n  food: Food.FoodBlackenedBasilisk,\r\n});\r\n\r\nexport const PRE_RAID_PRESET = {\r\n\tname: 'Pre-raid Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t{\"id\":37180,\"enchant\":3820,\"gems\":[41285,42144]},\r\n\t\t{\"id\":37595},\r\n\t\t{\"id\":37673,\"enchant\":3810,\"gems\":[42144]},\r\n\t\t{\"id\":41610,\"enchant\":3722},\r\n\t\t{\"id\":39592,\"enchant\":3832,\"gems\":[42144,40025]},\r\n\t\t{\"id\":37788,\"enchant\":2332,\"gems\":[0]},\r\n\t\t{\"id\":39593,\"enchant\":3246,\"gems\":[40051,0]},\r\n\t\t{\"id\":40696,\"gems\":[40049,39998]},\r\n\t\t{\"id\":37791,\"enchant\":3719},\r\n\t\t{\"id\":44202,\"enchant\":3826,\"gems\":[39998]},\r\n\t\t{\"id\":43253,\"gems\":[40027]},\r\n\t\t{\"id\":37694},\r\n\t\t{\"id\":40682},\r\n\t\t{\"id\":37873},\r\n\t\t{\"id\":41384,\"enchant\":3834},\r\n\t\t{\"id\":40698},\r\n\t\t{\"id\":40708}\r\n  ]}`),\r\n};\r\n\r\nexport const P1_PRESET = {\r\n\tname: 'P1 Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t{\"id\":40516,\"enchant\":3820,\"gems\":[41285,40027]},\r\n\t\t{\"id\":44661,\"gems\":[39998]},\r\n\t\t{\"id\":40286,\"enchant\":3810},\r\n\t\t{\"id\":44005,\"enchant\":3722,\"gems\":[40027]},\r\n\t\t{\"id\":40514,\"enchant\":3832,\"gems\":[42144,42144]},\r\n\t\t{\"id\":40324,\"enchant\":2332,\"gems\":[42144,0]},\r\n\t\t{\"id\":40302,\"enchant\":3246,\"gems\":[0]},\r\n\t\t{\"id\":40301,\"gems\":[40014]},\r\n\t\t{\"id\":40560,\"enchant\":3721},\r\n\t\t{\"id\":40519,\"enchant\":3826},\r\n\t\t{\"id\":37694},\r\n\t\t{\"id\":40399},\r\n\t\t{\"id\":40432},\r\n\t\t{\"id\":40255},\r\n\t\t{\"id\":40395,\"enchant\":3834},\r\n\t\t{\"id\":40401,\"enchant\":1128},\r\n\t\t{\"id\":40267}\r\n  ]}`),\r\n};\r\n\r\nexport const P2_PRESET = {\r\n\tname: 'P2 Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n        {\"id\":46209,\"enchant\":3820,\"gems\":[41285,40048]},\r\n        {\"id\":45933,\"gems\":[39998]},\r\n        {\"id\":46211,\"enchant\":3810,\"gems\":[39998]},\r\n        {\"id\":45242,\"enchant\":3722,\"gems\":[39998]},\r\n        {\"id\":46206,\"enchant\":3832,\"gems\":[39998,39998]},\r\n        {\"id\":45460,\"enchant\":2332,\"gems\":[39998,0]},\r\n        {\"id\":45665,\"enchant\":3604,\"gems\":[39998,39998,0]},\r\n        {\"id\":45616,\"enchant\":3599,\"gems\":[39998,39998,39998]},\r\n        {\"id\":46210,\"enchant\":3721,\"gems\":[39998,40027]},\r\n        {\"id\":45537,\"enchant\":3606,\"gems\":[39998,40027]},\r\n        {\"id\":46046,\"gems\":[39998]},\r\n        {\"id\":45495,\"gems\":[39998]},\r\n        {\"id\":45518},\r\n        {\"id\":40255},\r\n        {\"id\":45612,\"enchant\":3834,\"gems\":[39998]},\r\n        {\"id\":45470,\"enchant\":1128,\"gems\":[39998]},\r\n        {\"id\":40267}\r\n      ]}`),\r\n};\r\n\r\nexport const P3_PRESET_HORDE = {\r\n\tname: 'P3 Preset [H]',\r\n\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getFaction() == Faction.Horde,\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n        {\"id\":48328,\"enchant\":3820,\"gems\":[41285,40153]},\r\n        {\"id\":47468,\"gems\":[40155]},\r\n        {\"id\":48330,\"enchant\":3810,\"gems\":[40113]},\r\n        {\"id\":47551,\"enchant\":3722,\"gems\":[40113]},\r\n        {\"id\":48326,\"enchant\":3832,\"gems\":[40113,40132]},\r\n        {\"id\":45460,\"enchant\":2332,\"gems\":[40113,0]},\r\n        {\"id\":48327,\"enchant\":3604,\"gems\":[40155,0]},\r\n        {\"id\":47447,\"enchant\":3599,\"gems\":[40132,40113,40113]},\r\n        {\"id\":47479,\"enchant\":3721,\"gems\":[40113,40113,40113]},\r\n        {\"id\":47456,\"enchant\":3606,\"gems\":[40113,40113]},\r\n        {\"id\":46046,\"gems\":[40155]},\r\n        {\"id\":45495,\"gems\":[40113]},\r\n        {\"id\":47477},\r\n        {\"id\":45518},\r\n        {\"id\":47422,\"enchant\":3834,\"gems\":[40113]},\r\n        {\"id\":47448,\"enchant\":1128,\"gems\":[40155]},\r\n        {\"id\":47666}\r\n      ]\r\n    }`),\r\n};\r\n\r\nexport const P3_PRESET_ALLI = {\r\n\tname: 'P3 Preset [A]',\r\n\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getFaction() == Faction.Alliance,\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n        {\"id\":48323,\"enchant\":3820,\"gems\":[41285,40155]},\r\n        {\"id\":47144,\"gems\":[40155]},\r\n        {\"id\":48321,\"enchant\":3810,\"gems\":[40113]},\r\n        {\"id\":47552,\"enchant\":3722,\"gems\":[40113]},\r\n        {\"id\":48325,\"enchant\":3832,\"gems\":[40113,40132]},\r\n        {\"id\":45460,\"enchant\":2332,\"gems\":[40113,0]},\r\n        {\"id\":48324,\"enchant\":3604,\"gems\":[40155,0]},\r\n        {\"id\":47084,\"enchant\":3599,\"gems\":[40132,40113,40113]},\r\n        {\"id\":47190,\"enchant\":3721,\"gems\":[40113,40113,40113]},\r\n        {\"id\":47099,\"enchant\":3606,\"gems\":[40113,40113]},\r\n        {\"id\":46046,\"gems\":[40155]},\r\n        {\"id\":45495,\"gems\":[40113]},\r\n        {\"id\":47188},\r\n        {\"id\":45518},\r\n        {\"id\":46980,\"enchant\":3834,\"gems\":[40113]},\r\n        {\"id\":47085,\"enchant\":1128,\"gems\":[40155]},\r\n        {\"id\":47666}\r\n      ]\r\n    }`),\r\n};\r\n\r\nexport const ROTATION_PRESET_BUILTIN = {\r\n  name: \"Legacy\",\r\n  rotation: SavedRotation.create({\r\n    specRotationOptionsJson: ElementalShamanRotation.toJsonString(DefaultRotation),\r\n  }),\r\n}\r\n\r\nexport const ROTATION_PRESET_BASIC_APL = {\r\n  name: 'Basic APL',\r\n  rotation: SavedRotation.create({\r\n    specRotationOptionsJson: ElementalShamanRotation.toJsonString(DefaultRotation),\r\n    rotation: APLRotation.fromJsonString(`{\r\n      \"type\": \"TypeAPL\",\r\n      \"prepullActions\": [\r\n\t\t\t  {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":3738}}},\"doAtValue\":{\"const\":{\"val\":\"-6s\"}}},\r\n\t\t\t  {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":58643}}},\"doAtValue\":{\"const\":{\"val\":\"-5s\"}}},\r\n\t\t\t  {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":58774}}},\"doAtValue\":{\"const\":{\"val\":\"-4s\"}}},\r\n\t\t\t  {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":57722}}},\"doAtValue\":{\"const\":{\"val\":\"-3s\"}}},\r\n\t\t\t  {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":58704}}},\"doAtValue\":{\"const\":{\"val\":\"-2s\"}}},\r\n\t\t\t  {\"action\":{\"castSpell\":{\"spellId\":{\"otherId\":\"OtherActionPotion\"}}},\"doAtValue\":{\"const\":{\"val\":\"-1s\"}}}\r\n      ],\r\n      \"priorityList\": [\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"cmp\":{\"op\":\"OpGe\",\"lhs\":{\"currentTime\":{}},\"rhs\":{\"const\":{\"val\":\"2s\"}}}},{\"spellIsReady\":{\"spellId\":{\"tag\":-1,\"spellId\":2825}}}]}},\"castSpell\":{\"spellId\":{\"tag\":-1,\"spellId\":2825}}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"cmp\":{\"op\":\"OpGe\",\"lhs\":{\"currentTime\":{}},\"rhs\":{\"const\":{\"val\":\"2s\"}}}},{\"spellIsReady\":{\"spellId\":{\"spellId\":2825}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":2825}}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"spellIsReady\":{\"spellId\":{\"spellId\":26297}}},{\"spellIsReady\":{\"spellId\":{\"spellId\":16166}}}]}},\"strictSequence\":{\"actions\":[{\"castSpell\":{\"spellId\":{\"spellId\":26297}}},{\"castSpell\":{\"spellId\":{\"spellId\":16166}}}]}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"not\":{\"val\":{\"spellIsReady\":{\"spellId\":{\"spellId\":26297}}}}},{\"not\":{\"val\":{\"spellIsReady\":{\"spellId\":{\"spellId\":16166}}}}},{\"not\":{\"val\":{\"auraIsActive\":{\"auraId\":{\"spellId\":64701}}}}},{\"not\":{\"val\":{\"auraIsActive\":{\"auraId\":{\"spellId\":26297}}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":54758}}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"spellIsReady\":{\"spellId\":{\"spellId\":2894}}},{\"or\":{\"vals\":[{\"auraIsActive\":{\"auraId\":{\"itemId\":40255}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":40682}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":37660}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":45518}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":54572}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":54588}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":47213}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":45490}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":50348}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":50353}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":50360}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":50365}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":50345}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":50340}}},{\"auraIsActive\":{\"auraId\":{\"itemId\":50398}}},{\"cmp\":{\"op\":\"OpEq\",\"lhs\":{\"auraNumStacks\":{\"auraId\":{\"itemId\":45308}}},\"rhs\":{\"const\":{\"val\":\"5\"}}}},{\"cmp\":{\"op\":\"OpEq\",\"lhs\":{\"auraNumStacks\":{\"auraId\":{\"itemId\":40432}}},\"rhs\":{\"const\":{\"val\":\"10\"}}}},{\"auraIsActive\":{\"auraId\":{\"spellId\":55637}}}]}}]}},\"strictSequence\":{\"actions\":[{\"castSpell\":{\"spellId\":{\"spellId\":33697}}},{\"castSpell\":{\"spellId\":{\"itemId\":40212}}},{\"castSpell\":{\"spellId\":{\"itemId\":37873}}},{\"castSpell\":{\"spellId\":{\"itemId\":45148}}},{\"castSpell\":{\"spellId\":{\"itemId\":48724}}},{\"castSpell\":{\"spellId\":{\"itemId\":50357}}},{\"castSpell\":{\"spellId\":{\"spellId\":2894}}}]}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"not\":{\"val\":{\"auraIsActive\":{\"auraId\":{\"spellId\":2894}}}}},{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":58704}}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":58704}}}},\r\n        {\"action\":{\"multidot\":{\"spellId\":{\"spellId\":49233},\"maxDots\":3,\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"numberTargets\":{}},\"rhs\":{\"const\":{\"val\":\"1\"}}}},{\"spellIsReady\":{\"spellId\":{\"spellId\":49271}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":49271}}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"dotRemainingTime\":{\"spellId\":{\"spellId\":49233}}},\"rhs\":{\"const\":{\"val\":\"2\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":60043}}}},\r\n        {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":49238}}}}\r\n      ]\r\n    }`),\r\n  }),\r\n};","import { RaidBuffs } from '../core/proto/common.js';\r\nimport { PartyBuffs } from '../core/proto/common.js';\r\nimport { IndividualBuffs } from '../core/proto/common.js';\r\nimport { Debuffs } from '../core/proto/common.js';\r\nimport { Spec } from '../core/proto/common.js';\r\nimport { Stat } from '../core/proto/common.js';\r\nimport { TristateEffect } from '../core/proto/common.js'\r\nimport { Player } from '../core/player.js';\r\nimport { Stats } from '../core/proto_utils/stats.js';\r\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\r\nimport { EventID, TypedEvent } from '../core/typed_event.js';\r\nimport { TotemsSection } from '../core/components/totem_inputs.js';\r\n\r\nimport * as IconInputs from '../core/components/icon_inputs.js';\r\nimport * as OtherInputs from '../core/components/other_inputs.js';\r\nimport * as Mechanics from '../core/constants/mechanics.js';\r\n\r\nimport * as ShamanInputs from './inputs.js';\r\nimport * as Presets from './presets.js';\r\nimport { shamanGlyphsConfig } from '../core/talents/shaman.js';\r\n\r\nexport class ElementalShamanSimUI extends IndividualSimUI<Spec.SpecElementalShaman> {\r\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecElementalShaman>) {\r\n\t\tsuper(parentElem, player, {\r\n\t\t\tcssClass: 'elemental-shaman-sim-ui',\r\n\t\t\tcssScheme: 'shaman',\r\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\r\n\t\t\tknownIssues: [\r\n\t\t\t],\r\n\t\t\twarnings: [\r\n\t\t\t\t// Warning to use all 4 totems if T6 2pc bonus is active.\r\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecElementalShaman>) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tupdateOn: TypedEvent.onAny([simUI.player.rotationChangeEmitter, simUI.player.currentStatsEmitter]),\r\n\t\t\t\t\t\tgetContent: () => {\r\n\t\t\t\t\t\t\tconst hasT62P = simUI.player.getCurrentStats().sets.includes('Skyshatter Regalia (2pc)');\r\n\t\t\t\t\t\t\tconst totems = simUI.player.getSpecOptions().totems;\r\n\t\t\t\t\t\t\tconst hasAll4Totems = totems && totems.earth && totems.air && totems.fire && totems.water;\r\n\t\t\t\t\t\t\tif (hasT62P && !hasAll4Totems) {\r\n\t\t\t\t\t\t\t\treturn 'T6 2pc bonus is equipped, but inactive because not all 4 totem types are being used.';\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\t\t\t],\r\n\r\n\t\t\t// All stats for which EP should be calculated.\r\n\t\t\tepStats: [\r\n\t\t\t\tStat.StatIntellect,\r\n\t\t\t\tStat.StatSpellPower,\r\n\t\t\t\tStat.StatSpellHit,\r\n\t\t\t\tStat.StatSpellCrit,\r\n\t\t\t\tStat.StatSpellHaste,\r\n\t\t\t\tStat.StatMP5,\r\n\t\t\t],\r\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\r\n\t\t\tepReferenceStat: Stat.StatSpellPower,\r\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\r\n\t\t\tdisplayStats: [\r\n\t\t\t\tStat.StatHealth,\r\n\t\t\t\tStat.StatMana,\r\n\t\t\t\tStat.StatStamina,\r\n\t\t\t\tStat.StatIntellect,\r\n\t\t\t\tStat.StatSpellPower,\r\n\t\t\t\tStat.StatSpellHit,\r\n\t\t\t\tStat.StatSpellCrit,\r\n\t\t\t\tStat.StatSpellHaste,\r\n\t\t\t\tStat.StatMP5,\r\n\t\t\t],\r\n\t\t\tmodifyDisplayStats: (player: Player<Spec.SpecElementalShaman>) => {\r\n\t\t\t\tlet stats = new Stats();\r\n\t\t\t\tstats = stats.addStat(Stat.StatSpellHit, player.getTalents().elementalPrecision * Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE);\r\n\t\t\t\tstats = stats.addStat(Stat.StatSpellCrit,\r\n\t\t\t\t\tplayer.getTalents().tidalMastery * 1 * Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE);\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttalents: stats,\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\tdefaults: {\r\n\t\t\t\t// Default equipped gear.\r\n\t\t\t\tgear: Presets.P1_PRESET.gear,\r\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\r\n\t\t\t\tepWeights: Stats.fromMap({\r\n\t\t\t\t\t[Stat.StatIntellect]: 0.22,\r\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\r\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.67,\r\n\t\t\t\t\t[Stat.StatSpellHaste]: 1.29,\r\n\t\t\t\t\t[Stat.StatMP5]: 0.08,\r\n\t\t\t\t}),\r\n\t\t\t\t// Default consumes settings.\r\n\t\t\t\tconsumes: Presets.DefaultConsumes,\r\n\t\t\t\t// Default rotation settings.\r\n\t\t\t\trotation: Presets.DefaultRotation,\r\n\t\t\t\t// Default talents.\r\n\t\t\t\ttalents: Presets.StandardTalents.data,\r\n\t\t\t\t// Default spec-specific settings.\r\n\t\t\t\tspecOptions: Presets.DefaultOptions,\r\n\t\t\t\t// Default raid/party buffs settings.\r\n\t\t\t\traidBuffs: RaidBuffs.create({\r\n\t\t\t\t\tarcaneBrilliance: true,\r\n\t\t\t\t\tdivineSpirit: true,\r\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\tmoonkinAura: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\tsanctifiedRetribution: true,\r\n\t\t\t\t}),\r\n\t\t\t\tpartyBuffs: PartyBuffs.create({\r\n\t\t\t\t}),\r\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\r\n\t\t\t\t\tblessingOfKings: true,\r\n\t\t\t\t\tblessingOfWisdom: 2,\r\n\t\t\t\t\tvampiricTouch: true,\r\n\t\t\t\t}),\r\n\t\t\t\tdebuffs: Debuffs.create({\r\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\tjudgementOfWisdom: true,\r\n\t\t\t\t\tmisery: true,\r\n\t\t\t\t\tcurseOfElements: true,\r\n\t\t\t\t\tshadowMastery: true,\r\n\t\t\t\t}),\r\n\t\t\t},\r\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\r\n\t\t\tplayerIconInputs: [\r\n\t\t\t\tShamanInputs.ShamanShieldInput,\r\n\t\t\t\tShamanInputs.Bloodlust,\r\n\t\t\t],\r\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\r\n\t\t\trotationInputs: ShamanInputs.ElementalShamanRotationConfig,\r\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\r\n\t\t\tincludeBuffDebuffInputs: [\r\n\t\t\t],\r\n\t\t\texcludeBuffDebuffInputs: [\r\n\t\t\t],\r\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\r\n\t\t\totherInputs: {\r\n\t\t\t\tinputs: [\r\n\t\t\t\t\tOtherInputs.TankAssignment,\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tcustomSections: [\r\n\t\t\t\tTotemsSection,\r\n\t\t\t],\r\n\t\t\tencounterPicker: {\r\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\r\n\t\t\t\tshowExecuteProportion: false,\r\n\t\t\t},\r\n\r\n\t\t\tpresets: {\r\n\t\t\t\t// Preset talents that the user can quickly select.\r\n\t\t\t\ttalents: [\r\n\t\t\t\t\tPresets.StandardTalents,\r\n\t\t\t\t],\r\n\t\t\t\t// Preset rotations that the user can quickly select.\r\n\t\t\t\trotations: [\r\n\t\t\t\t\tPresets.ROTATION_PRESET_BASIC_APL,\r\n\t\t\t\t\tPresets.ROTATION_PRESET_BUILTIN,\r\n\t\t\t\t],\r\n\t\t\t\t// Preset gear configurations that the user can quickly select.\r\n\t\t\t\tgear: [\r\n\t\t\t\t\tPresets.PRE_RAID_PRESET,\r\n\t\t\t\t\tPresets.P1_PRESET,\r\n\t\t\t\t\tPresets.P2_PRESET,\r\n\t\t\t\t\tPresets.P3_PRESET_ALLI,\r\n\t\t\t\t\tPresets.P3_PRESET_HORDE,\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n}\r\n"],"names":["Bloodlust","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","ShamanShieldInput","InputHelpers.makeSpecOptionsEnumIconInput","values","value","ShamanShield","NoShield","tooltip","actionId","WaterShield","LightningShield","ElementalShamanRotationConfig","inputs","InputHelpers.makeRotationEnumInput","label","name","RotationType","Adaptive","Manual","InputHelpers.makeRotationBooleanInput","labelTooltip","showWhen","player","getTalents","thunderstorm","InputHelpers.makeRotationNumberInput","enableWhen","getRotation","type","useChainLightning","useFireNova","StandardTalents","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","ShamanMajorGlyph","GlyphOfLightningBolt","major2","GlyphOfTotemOfWrath","major3","ShamanMajorGlyphNone","minor1","ShamanMinorGlyph","GlyphOfThunderstorm","minor2","GlyphOfWaterShield","minor3","GlyphOfGhostWolf","DefaultRotation","ElementalShamanRotation","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","air","AirTotem","WrathOfAirTotem","fire","FireTotem","TotemOfWrath","water","WaterTotem","ManaSpringTotem","useFireElemental","fnMinManaPer","clMinManaPer","useThunderstorm","DefaultOptions","ElementalShamanOptions","shield","bloodlust","DefaultConsumes","Consumes","defaultPotion","Potions","HastePotion","flask","Flask","FlaskOfBlindingLight","food","Food","FoodBlackenedBasilisk","PRE_RAID_PRESET","Tooltips.BASIC_BIS_DISCLAIMER","gear","EquipmentSpec","fromJsonString","P1_PRESET","P2_PRESET","P3_PRESET_HORDE","getFaction","Faction","Horde","P3_PRESET_ALLI","Alliance","ROTATION_PRESET_BUILTIN","rotation","SavedRotation","specRotationOptionsJson","toJsonString","ROTATION_PRESET_BASIC_APL","APLRotation","ElementalShamanSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","warnings","simUI","updateOn","TypedEvent","onAny","rotationChangeEmitter","currentStatsEmitter","getContent","hasT62P","getCurrentStats","sets","includes","getSpecOptions","hasAll4Totems","epStats","Stat","StatIntellect","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","modifyDisplayStats","stats","Stats","addStat","elementalPrecision","Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE","tidalMastery","Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE","talents","defaults","Presets.P1_PRESET","epWeights","fromMap","consumes","Presets.DefaultConsumes","Presets.DefaultRotation","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","moonkinAura","sanctifiedRetribution","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","vampiricTouch","debuffs","Debuffs","faerieFire","judgementOfWisdom","misery","curseOfElements","shadowMastery","playerIconInputs","ShamanInputs.ShamanShieldInput","ShamanInputs.Bloodlust","rotationInputs","ShamanInputs.ElementalShamanRotationConfig","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","customSections","TotemsSection","encounterPicker","showExecuteProportion","presets","rotations","Presets.ROTATION_PRESET_BASIC_APL","Presets.ROTATION_PRESET_BUILTIN","Presets.PRE_RAID_PRESET","Presets.P2_PRESET","Presets.P3_PRESET_ALLI","Presets.P3_PRESET_HORDE"],"mappings":"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"}