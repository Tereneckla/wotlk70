{"version":3,"file":"sim-8e38f240.chunk.js","sources":["../../../ui/balance_druid/inputs.ts","../../../ui/balance_druid/presets.ts","../../../ui/balance_druid/sim.ts"],"sourcesContent":["import { UnitReference, UnitReference_Type as UnitType } from '../core/proto/common.js';\r\nimport { Spec } from '../core/proto/common.js';\r\nimport { ActionId } from '../core/proto_utils/action_id.js';\r\nimport { Player } from '../core/player.js';\r\nimport { EventID, TypedEvent } from '../core/typed_event.js';\r\n\r\nimport * as InputHelpers from '../core/components/input_helpers.js';\r\n\r\nimport {\r\n\tBalanceDruid_Options as DruidOptions,\r\n\tBalanceDruid_Rotation_Type as RotationType,\r\n\tBalanceDruid_Rotation_MfUsage as MfUsage,\r\n\tBalanceDruid_Rotation_MfExtension as MfExtension,\r\n\tBalanceDruid_Rotation_IsUsage as IsUsage,\r\n\tBalanceDruid_Rotation_WrathUsage as WrathUsage,\r\n\tBalanceDruid_Rotation_EclipsePrio as EclipsePrio,\r\n} from '../core/proto/druid.js';\r\n\r\n\r\n// Configuration for spec-specific UI elements on the settings tab.\r\n// These don't need to be in a separate file but it keeps things cleaner.\r\n\r\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecBalanceDruid>({\r\n\tfieldName: 'innervateTarget',\r\n\tid: ActionId.fromSpellId(29166),\r\n\textraCssClasses: [\r\n\t\t'within-raid-sim-hide',\r\n\t],\r\n\tgetValue: (player: Player<Spec.SpecBalanceDruid>) => player.getSpecOptions().innervateTarget?.type == UnitType.Player,\r\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecBalanceDruid>, newValue: boolean) => {\r\n\t\tconst newOptions = player.getSpecOptions();\r\n\t\tnewOptions.innervateTarget = UnitReference.create({\r\n\t\t\ttype: newValue ? UnitType.Player : UnitType.Unknown,\r\n\t\t\tindex: 0,\r\n\t\t});\r\n\t\tplayer.setSpecOptions(eventID, newOptions);\r\n\t},\r\n});\r\n\r\nexport const BalanceDruidRotationConfig = {\r\n\tinputs: [\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, RotationType>({\r\n\t\t\tfieldName: 'type',\r\n\t\t\tlabel: 'Type',\r\n\t\t\tlabelTooltip: 'Set to \\'Manual\\', to manage eclipses, spells, CDs and DoTs usage.',\r\n\t\t\tvalues: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Default', value: RotationType.Default,\r\n\t\t\t\t\ttooltip: 'The default rotation.',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Manual', value: RotationType.Manual,\r\n\t\t\t\t\ttooltip: 'Allows custom selection of which spells to use, dot management and CD usage.',\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, EclipsePrio>({\r\n\t\t\tfieldName: 'eclipsePrio',\r\n\t\t\tlabel: 'Eclipse priority',\r\n\t\t\tlabelTooltip: 'Defines which eclipse will get prioritized in the rotation.',\r\n\t\t\tvalues: [\r\n\t\t\t\t{ name: 'Lunar', value: EclipsePrio.Lunar },\r\n\t\t\t\t{ name: 'Solar', value: EclipsePrio.Solar },\r\n\t\t\t],\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, MfUsage>({\r\n\t\t\tfieldName: 'mfUsage',\r\n\t\t\tlabel: 'Moonfire Usage',\r\n\t\t\tlabelTooltip: 'Defines how Moonfire will be used in the rotation.',\r\n\t\t\tvalues: [\r\n\t\t\t\t{ name: 'Unused', value: MfUsage.NoMf },\r\n\t\t\t\t{ name: 'Before lunar', value: MfUsage.BeforeLunar },\r\n\t\t\t\t{ name: 'Maximize', value: MfUsage.MaximizeMf },\r\n\t\t\t\t{ name: 'Multidot', value: MfUsage.MultidotMf },\r\n\t\t\t],\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, MfExtension>({\r\n\t\t\tfieldName: 'mfExtension',\r\n\t\t\tlabel: 'Moonfire Extension',\r\n\t\t\tlabelTooltip: 'When should the rotation try to extend Moonfire on the main target.',\r\n\t\t\tvalues: [\r\n\t\t\t\t{ name: 'Extend always', value: MfExtension.ExtendAlways },\r\n\t\t\t\t{ name: 'Extend outside solar', value: MfExtension.ExtendOutsideSolar },\r\n\t\t\t\t{ name: 'Do not extend', value: MfExtension.DontExtend },\r\n\t\t\t],\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, IsUsage>({\r\n\t\t\tfieldName: 'isUsage',\r\n\t\t\tlabel: 'Insect Swarm Usage',\r\n\t\t\tlabelTooltip: 'Defines how Insect Swarm will be used in the rotation.',\r\n\t\t\tvalues: [\r\n\t\t\t\t{ name: 'Unused', value: IsUsage.NoIs },\r\n\t\t\t\t{ name: 'Before solar', value: IsUsage.BeforeSolar },\r\n\t\t\t\t{ name: 'Optimize', value: IsUsage.OptimizeIs },\r\n\t\t\t\t{ name: 'Multidot', value: IsUsage.MultidotIs },\r\n\t\t\t],\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, WrathUsage>({\r\n\t\t\tfieldName: 'wrathUsage',\r\n\t\t\tlabel: 'Wrath usage',\r\n\t\t\tlabelTooltip: 'Defines how Wrath will be used in the rotation.',\r\n\t\t\tvalues: [\r\n\t\t\t\t{ name: 'Unused', value: WrathUsage.NoWrath },\r\n\t\t\t\t{ name: 'Fishing for Lunar', value: WrathUsage.FishingForLunar },\r\n\t\t\t\t{ name: 'Regular', value: WrathUsage.RegularWrath },\r\n\t\t\t],\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\r\n\t\t\tfieldName: 'useStarfire',\r\n\t\t\tlabel: 'Use Starfire',\r\n\t\t\tlabelTooltip: 'Should the rotation use Starfire.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\r\n\t\t\tfieldName: 'useSmartCooldowns',\r\n\t\t\tlabel: 'Smart Cooldowns usage',\r\n\t\t\tlabelTooltip: 'The rotation will use cooldowns during eclipses, avoiding Haste CDs in solar and Crit CDs in lunar',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\r\n\t\t\tfieldName: 'snapshotMf',\r\n\t\t\tlabel: 'Snapshot Moonfire',\r\n\t\t\tlabelTooltip: 'The rotation will try to snapshot Moonfire with SP procs',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\r\n\t\t\tfieldName: 'eclipseShuffling',\r\n\t\t\tlabel: 'Eclipse Shuffling',\r\n\t\t\tlabelTooltip: 'Should the rotation alternate Starfire and Wrath when both eclipses are available.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\r\n\t\t\tfieldName: 'useTyphoon',\r\n\t\t\tlabel: 'Use Typhoon',\r\n\t\t\tlabelTooltip: 'Should the rotation use Typhoon.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\r\n\t\t\tfieldName: 'useHurricane',\r\n\t\t\tlabel: 'Use Hurricane',\r\n\t\t\tlabelTooltip: 'Should the rotation use Hurricane.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\r\n\t\t\tfieldName: 'useBattleRes',\r\n\t\t\tlabel: 'Use Battle Res',\r\n\t\t\tlabelTooltip: 'Cast Battle Res on an ally sometime during the encounter.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecBalanceDruid>({\r\n\t\t\tfieldName: 'okfPpm',\r\n\t\t\tlabel: 'Owlkin Frenzy PPM',\r\n\t\t\tlabelTooltip: 'Amount of Owlkin Frenzy procs per minute.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t\tfloat: true,\r\n\t\t\tpositive: true,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecBalanceDruid>({\r\n\t\t\tfieldName: 'playerLatency',\r\n\t\t\tlabel: 'Player latency',\r\n\t\t\tlabelTooltip: 'Time before the player reacts to an eclipse proc, in milliseconds.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\r\n\t\t}),\r\n\t],\r\n};\r\n","import {\r\n\tConsumes,\r\n\tDebuffs,\r\n\tEquipmentSpec, Explosive, Faction,\r\n\tFlask,\r\n\tFood,\r\n\tGlyphs,\r\n\tIndividualBuffs,\r\n\tPartyBuffs,\r\n\tPotions,\r\n\tRaidBuffs,\r\n\tUnitReference, Spec,\r\n\tTristateEffect,\r\n\tWeaponImbue\r\n} from '../core/proto/common.js';\r\nimport { SavedRotation, SavedTalents } from '../core/proto/ui.js';\r\n\r\nimport {\r\n\tBalanceDruid_Options as BalanceDruidOptions,\r\n\tBalanceDruid_Rotation as BalanceDruidRotation,\r\n\tBalanceDruid_Rotation_IsUsage,\r\n\tBalanceDruid_Rotation_MfUsage,\r\n\tBalanceDruid_Rotation_Type as RotationType,\r\n\tBalanceDruid_Rotation_WrathUsage,\r\n\tDruidMajorGlyph,\r\n\tDruidMinorGlyph,\r\n} from '../core/proto/druid.js';\r\n\r\nimport * as Tooltips from '../core/constants/tooltips.js';\r\nimport { Player } from \"../core/player\";\r\nimport { APLRotation } from '../core/proto/apl.js';\r\n\r\n// Preset options for this spec.\r\n// Eventually we will import these values for the raid sim too, so its good to\r\n// keep them in a separate file.\r\n\r\n// Default talents. Uses the wowhead calculator format, make the talents on\r\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\r\nexport const Phase1Talents = {\r\n\tname: 'Phase 1',\r\n\tdata: SavedTalents.create({\r\n\t\ttalentsString: '5032003125331303213305311231--2',\r\n\t\tglyphs: Glyphs.create({\r\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfStarfire,\r\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfStarfall,\r\n\t\t\tmajor3: DruidMajorGlyph.DruidMajorGlyphNone,\r\n\t\t\tminor1: DruidMinorGlyph.GlyphOfTyphoon,\r\n\t\t\tminor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\r\n\t\t\tminor3: DruidMinorGlyph.GlyphOfTheWild,\r\n\t\t}),\r\n\t}),\r\n};\r\n\r\nexport const DefaultRotation = BalanceDruidRotation.create({\r\n\ttype: RotationType.Default,\r\n\tmaintainFaerieFire: true,\r\n\tuseSmartCooldowns: true,\r\n\tmfUsage: BalanceDruid_Rotation_MfUsage.BeforeLunar,\r\n\tisUsage: BalanceDruid_Rotation_IsUsage.OptimizeIs,\r\n\twrathUsage: BalanceDruid_Rotation_WrathUsage.RegularWrath,\r\n\tuseStarfire: true,\r\n\tuseBattleRes: false,\r\n\tplayerLatency: 200,\r\n});\r\n\r\nexport const DefaultOptions = BalanceDruidOptions.create({\r\n\tinnervateTarget: UnitReference.create(),\r\n});\r\n\r\nexport const DefaultConsumes = Consumes.create({\r\n\tdefaultPotion: Potions.HastePotion,\r\n\tflask: Flask.FlaskOfBlindingLight,\r\n\tfood: Food.FoodBlackenedBasilisk,\r\n\tprepopPotion: Potions.HastePotion,\r\n});\r\n\r\nexport const DefaultRaidBuffs = RaidBuffs.create({\r\n\tarcaneBrilliance: true,\r\n\tbloodlust: true,\r\n\tdivineSpirit: true,\r\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\r\n\ticyTalons: true,\r\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\r\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\r\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\r\n\tsanctifiedRetribution: true,\r\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\r\n\ttrueshotAura: true,\r\n\twrathOfAirTotem: true,\r\n});\r\n\r\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\r\n\tblessingOfKings: true,\r\n\tblessingOfMight: TristateEffect.TristateEffectImproved,\r\n\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\r\n\tvampiricTouch: true,\r\n});\r\n\r\nexport const DefaultPartyBuffs = PartyBuffs.create({\r\n\theroicPresence: false,\r\n});\r\n\r\nexport const DefaultDebuffs = Debuffs.create({\r\n\tbloodFrenzy: true,\r\n\tebonPlaguebringer: true,\r\n\tfaerieFire: TristateEffect.TristateEffectImproved,\r\n\theartOfTheCrusader: true,\r\n\tjudgementOfWisdom: true,\r\n\tshadowMastery: true,\r\n\tsunderArmor: true,\r\n\ttotemOfWrath: true,\r\n});\r\n\r\nexport const OtherDefaults = {\r\n\tdistanceFromTarget: 18,\r\n};\r\n\r\nexport const PRE_RAID_PRESET = {\r\n\tname: 'Pre-raid Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\r\n\t\t{\"id\":42554,\"enchant\":3820,\"gems\":[41285,40049]},\r\n\t\t{\"id\":40680},\r\n\t\t{\"id\":37673,\"enchant\":3810,\"gems\":[42144]},\r\n\t\t{\"id\":41610,\"enchant\":3859},\r\n\t\t{\"id\":39547,\"enchant\":3832,\"gems\":[42144,40026]},\r\n\t\t{\"id\":37884,\"enchant\":2332,\"gems\":[0]},\r\n\t\t{\"id\":39544,\"enchant\":3604,\"gems\":[42144,0]},\r\n\t\t{\"id\":40696,\"enchant\":3601,\"gems\":[40014,39998]},\r\n\t\t{\"id\":37854,\"enchant\":3719},\r\n\t\t{\"id\":44202,\"enchant\":3606,\"gems\":[39998]},\r\n\t\t{\"id\":40585},\r\n\t\t{\"id\":43253,\"gems\":[40026]},\r\n\t\t{\"id\":37873},\r\n\t\t{\"id\":40682},\r\n\t\t{\"id\":45085,\"enchant\":3834},\r\n\t\t{\"id\":40698},\r\n\t\t{\"id\":40712}\r\n\t]}`),\r\n};\r\n\r\nexport const ROTATION_PRESET_P3_APL = {\r\nname: 'Basic P3 APL',\r\nrotation: SavedRotation.create({\r\n\tspecRotationOptionsJson: BalanceDruidRotation.toJsonString(DefaultRotation),\r\n\trotation: APLRotation.fromJsonString(`{\r\n      \"type\": \"TypeAPL\",\r\n      \"prepullActions\": [\r\n\t\t{\"action\":{\"castSpell\":{\"spellId\":{\"otherId\":\"OtherActionPotion\"}}},\"doAtValue\":{\"const\":{\"val\":\"-1.5s\"}}},\r\n\t\t{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":48461}}},\"doAtValue\":{\"const\":{\"val\":\"-1.5s\"}}}\r\n      ],\r\n      \"priorityList\": [\r\n        {\"action\":{\"condition\":{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"currentTime\":{}},\"rhs\":{\"const\":{\"val\":\"5\"}}}},\"castSpell\":{\"spellId\":{\"tag\":-1,\"spellId\":2825}}}},\r\n        {\"action\":{\"castSpell\":{\"spellId\":{\"itemId\":41119}}}},\r\n        {\"action\":{\"multidot\":{\"spellId\":{\"spellId\":48463},\"maxDots\":1,\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}}},\r\n        {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":53201}}}},\r\n        {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":65861}}}},\r\n        {\"action\":{\"condition\":{\"or\":{\"vals\":[{\"and\":{\"vals\":[{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"auraRemainingTime\":{\"sourceUnit\":{},\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"10s\"}}}},{\"cmp\":{\"op\":\"OpLe\",\"lhs\":{\"auraRemainingTime\":{\"sourceUnit\":{},\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"14.8\"}}}}]}},{\"cmp\":{\"op\":\"OpLt\",\"lhs\":{\"remainingTime\":{}},\"rhs\":{\"const\":{\"val\":\"12s\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":54758}}}},\r\n        {\"action\":{\"condition\":{\"or\":{\"vals\":[{\"and\":{\"vals\":[{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"auraRemainingTime\":{\"sourceUnit\":{},\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"10s\"}}}},{\"cmp\":{\"op\":\"OpLe\",\"lhs\":{\"auraRemainingTime\":{\"sourceUnit\":{},\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"14.8\"}}}}]}},{\"cmp\":{\"op\":\"OpLt\",\"lhs\":{\"remainingTime\":{}},\"rhs\":{\"const\":{\"val\":\"15s\"}}}}]}},\"castSpell\":{\"spellId\":{\"itemId\":40211}}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"auraIsActive\":{\"sourceUnit\":{},\"auraId\":{\"spellId\":48518}}},{\"cmp\":{\"op\":\"OpLe\",\"lhs\":{\"auraRemainingTime\":{\"sourceUnit\":{},\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"14.8s\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":48465}}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"auraIsActive\":{\"sourceUnit\":{},\"auraId\":{\"spellId\":48517}}},{\"cmp\":{\"op\":\"OpLe\",\"lhs\":{\"auraRemainingTime\":{\"sourceUnit\":{},\"auraId\":{\"spellId\":48517}}},\"rhs\":{\"const\":{\"val\":\"14.8s\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":48461}}}},\r\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":48468}}}}},{\"auraInternalCooldown\":{\"auraId\":{\"spellId\":48518}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":48468}}}},\r\n        {\"action\":{\"condition\":{\"auraInternalCooldown\":{\"sourceUnit\":{},\"auraId\":{\"spellId\":48518}}},\"castSpell\":{\"spellId\":{\"spellId\":48465}}}},\r\n        {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":48461}}}}\r\n      ]\r\n    }`),\r\n}),\r\n};","import { Spec } from '../core/proto/common.js';\r\nimport { Stat } from '../core/proto/common.js';\r\nimport { Stats } from '../core/proto_utils/stats.js';\r\nimport { Player } from '../core/player.js';\r\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\r\n\r\nimport * as IconInputs from '../core/components/icon_inputs.js';\r\nimport * as OtherInputs from '../core/components/other_inputs.js';\r\n\r\nimport * as DruidInputs from './inputs.js';\r\nimport * as Presets from './presets.js';\r\n\r\n// noinspection TypeScriptValidateTypes\r\nexport class BalanceDruidSimUI extends IndividualSimUI<Spec.SpecBalanceDruid> {\r\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecBalanceDruid>) {\r\n\t\tsuper(parentElem, player, {\r\n\t\t\tcssClass: 'balance-druid-sim-ui',\r\n\t\t\tcssScheme: 'druid',\r\n\t\t\t// List any known bugs / issues here, and they'll be shown on the site.\r\n\t\t\tknownIssues: [\r\n\t\t\t],\r\n\r\n\t\t\t// All stats for which EP should be calculated.\r\n\t\t\tepStats: [\r\n\t\t\t\tStat.StatIntellect,\r\n\t\t\t\tStat.StatSpirit,\r\n\t\t\t\tStat.StatSpellPower,\r\n\t\t\t\tStat.StatSpellHit,\r\n\t\t\t\tStat.StatSpellCrit,\r\n\t\t\t\tStat.StatSpellHaste,\r\n\t\t\t\tStat.StatMP5,\r\n\t\t\t],\r\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\r\n\t\t\tepReferenceStat: Stat.StatSpellPower,\r\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\r\n\t\t\tdisplayStats: [\r\n\t\t\t\tStat.StatHealth,\r\n\t\t\t\tStat.StatMana,\r\n\t\t\t\tStat.StatStamina,\r\n\t\t\t\tStat.StatIntellect,\r\n\t\t\t\tStat.StatSpirit,\r\n\t\t\t\tStat.StatSpellPower,\r\n\t\t\t\tStat.StatSpellHit,\r\n\t\t\t\tStat.StatSpellCrit,\r\n\t\t\t\tStat.StatSpellHaste,\r\n\t\t\t\tStat.StatMP5,\r\n\t\t\t],\r\n\r\n\t\t\tdefaults: {\r\n\t\t\t\t// Default equipped gear.\r\n\t\t\t\tgear: Presets.PRE_RAID_PRESET.gear,\r\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\r\n\t\t\t\tepWeights: Stats.fromMap({\r\n\t\t\t\t\t[Stat.StatIntellect]: 0.43,\r\n\t\t\t\t\t[Stat.StatSpirit]: 0.34,\r\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\r\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.82,\r\n\t\t\t\t\t[Stat.StatSpellHaste]: 0.80,\r\n\t\t\t\t\t[Stat.StatMP5]: 0.00,\r\n\t\t\t\t}),\r\n\t\t\t\t// Default consumes settings.\r\n\t\t\t\tconsumes: Presets.DefaultConsumes,\r\n\t\t\t\t// Default rotation settings.\r\n\t\t\t\trotation: Presets.DefaultRotation,\r\n\t\t\t\t// Default talents.\r\n\t\t\t\ttalents: Presets.Phase1Talents.data,\r\n\t\t\t\t// Default spec-specific settings.\r\n\t\t\t\tspecOptions: Presets.DefaultOptions,\r\n\t\t\t\t// Default raid/party buffs settings.\r\n\t\t\t\traidBuffs: Presets.DefaultRaidBuffs,\r\n\t\t\t\tpartyBuffs: Presets.DefaultPartyBuffs,\r\n\t\t\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\r\n\t\t\t\tdebuffs: Presets.DefaultDebuffs,\r\n\t\t\t\tother: Presets.OtherDefaults,\r\n\t\t\t},\r\n\r\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\r\n\t\t\tplayerIconInputs: [\r\n\t\t\t\tDruidInputs.SelfInnervate,\r\n\t\t\t],\r\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\r\n\t\t\trotationInputs: DruidInputs.BalanceDruidRotationConfig,\r\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\r\n\t\t\tincludeBuffDebuffInputs: [\r\n\t\t\t\tIconInputs.MeleeHasteBuff,\r\n\t\t\t\tIconInputs.MeleeCritBuff,\r\n\t\t\t\tIconInputs.AttackPowerPercentBuff,\r\n\t\t\t\tIconInputs.AttackPowerBuff,\r\n\t\t\t\tIconInputs.MajorArmorDebuff,\r\n\t\t\t\tIconInputs.MinorArmorDebuff,\r\n\t\t\t\tIconInputs.PhysicalDamageDebuff,\r\n\t\t\t],\r\n\t\t\texcludeBuffDebuffInputs: [\r\n\t\t\t],\r\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\r\n\t\t\totherInputs: {\r\n\t\t\t\tinputs: [\r\n\t\t\t\t\tOtherInputs.TankAssignment,\r\n\t\t\t\t\tOtherInputs.ReactionTime,\r\n\t\t\t\t\tOtherInputs.DistanceFromTarget,\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tencounterPicker: {\r\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\r\n\t\t\t\tshowExecuteProportion: false,\r\n\t\t\t},\r\n\r\n\t\t\tpresets: {\r\n\t\t\t\t// Preset talents that the user can quickly select.\r\n\t\t\t\ttalents: [\r\n\t\t\t\t\tPresets.Phase1Talents,\r\n\t\t\t\t],\r\n\t\t\t\trotations: [\r\n\t\t\t\t\tPresets.ROTATION_PRESET_P3_APL,\r\n\t\t\t\t],\r\n\t\t\t\t// Preset gear configurations that the user can quickly select.\r\n\t\t\t\tgear: [\r\n\t\t\t\t\tPresets.PRE_RAID_PRESET,\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n}\r\n"],"names":["SelfInnervate","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","type","UnitType","Player","setValue","eventID","newValue","newOptions","UnitReference","create","Unknown","index","setSpecOptions","BalanceDruidRotationConfig","inputs","InputHelpers.makeRotationEnumInput","label","labelTooltip","values","name","value","RotationType","Default","tooltip","Manual","EclipsePrio","Lunar","Solar","showWhen","getRotation","MfUsage","NoMf","BeforeLunar","MaximizeMf","MultidotMf","MfExtension","ExtendAlways","ExtendOutsideSolar","DontExtend","IsUsage","NoIs","BeforeSolar","OptimizeIs","MultidotIs","WrathUsage","NoWrath","FishingForLunar","RegularWrath","InputHelpers.makeRotationBooleanInput","InputHelpers.makeRotationNumberInput","float","positive","Phase1Talents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","DruidMajorGlyph","GlyphOfStarfire","major2","GlyphOfStarfall","major3","DruidMajorGlyphNone","minor1","DruidMinorGlyph","GlyphOfTyphoon","minor2","GlyphOfUnburdenedRebirth","minor3","GlyphOfTheWild","DefaultRotation","BalanceDruidRotation","maintainFaerieFire","useSmartCooldowns","mfUsage","BalanceDruid_Rotation_MfUsage","isUsage","BalanceDruid_Rotation_IsUsage","wrathUsage","BalanceDruid_Rotation_WrathUsage","useStarfire","useBattleRes","playerLatency","DefaultOptions","BalanceDruidOptions","DefaultConsumes","Consumes","defaultPotion","Potions","HastePotion","flask","Flask","FlaskOfBlindingLight","food","Food","FoodBlackenedBasilisk","prepopPotion","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","bloodlust","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","icyTalons","moonkinAura","leaderOfThePack","powerWordFortitude","sanctifiedRetribution","strengthOfEarthTotem","trueshotAura","wrathOfAirTotem","DefaultIndividualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","blessingOfWisdom","vampiricTouch","DefaultPartyBuffs","PartyBuffs","heroicPresence","DefaultDebuffs","Debuffs","bloodFrenzy","ebonPlaguebringer","faerieFire","heartOfTheCrusader","judgementOfWisdom","shadowMastery","sunderArmor","totemOfWrath","OtherDefaults","distanceFromTarget","PRE_RAID_PRESET","Tooltips.BASIC_BIS_DISCLAIMER","gear","EquipmentSpec","fromJsonString","ROTATION_PRESET_P3_APL","rotation","SavedRotation","specRotationOptionsJson","toJsonString","APLRotation","BalanceDruidSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","defaults","Presets.PRE_RAID_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","Presets.DefaultRotation","talents","Presets.Phase1Talents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","Presets.DefaultPartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","other","Presets.OtherDefaults","playerIconInputs","DruidInputs.SelfInnervate","rotationInputs","DruidInputs.BalanceDruidRotationConfig","includeBuffDebuffInputs","IconInputs.MeleeHasteBuff","IconInputs.MeleeCritBuff","IconInputs.AttackPowerPercentBuff","IconInputs.AttackPowerBuff","IconInputs.MajorArmorDebuff","IconInputs.MinorArmorDebuff","IconInputs.PhysicalDamageDebuff","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","OtherInputs.ReactionTime","OtherInputs.DistanceFromTarget","encounterPicker","showExecuteProportion","presets","rotations","Presets.ROTATION_PRESET_P3_APL"],"mappings":"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"}