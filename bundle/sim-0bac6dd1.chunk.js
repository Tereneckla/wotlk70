import{dY as t,L as e,p as n,q as a,fQ as i,fR as s,fh as o,fS as l,dU as r,K as d,fT as m,f8 as h,E as c,cj as g,cm as u,co as p,bD as f,aR as S,A as T,T as b,fU as w,a2 as E,ab as C,F as v,a5 as I,aD as R,bn as A,w as y,B as P,aE as O,bp as k,$ as G,a4 as x}from"./detailed_results-7b150079.chunk.js";import{B as W,m as M,j as B,i as D,u as N,b as H,a as F,c as J,k as U,I as j,T as q,t as z}from"./individual_sim_ui-7ca50b32.chunk.js";const K={name:"Arms",data:t.create({talentsString:"3022032023335100102012213231251-305-2033",glyphs:e.create({major1:n.GlyphOfRending,major2:n.GlyphOfMortalStrike,major3:n.GlyphOfExecution,minor1:a.GlyphOfThunderClap,minor2:a.GlyphOfCommand,minor3:a.GlyphOfShatteringThrow})})},Y={name:"Fury",data:t.create({talentsString:"32002301233-305053000520310053120500351",glyphs:e.create({major1:n.GlyphOfWhirlwind,major2:n.GlyphOfHeroicStrike,major3:n.GlyphOfExecution,minor1:a.GlyphOfCommand,minor2:a.GlyphOfShatteringThrow,minor3:a.GlyphOfCharge})})},L=i.create({useRend:!0,useCleave:!1,useOverpower:!1,executePhaseOverpower:!1,mainGcd:s.Bloodthirst,sunderArmor:o.SunderArmorMaintain,hsRageThreshold:12,rendHealthThresholdAbove:20,rendRageThresholdBelow:100,slamRageThreshold:25,rendCdThreshold:0,useHsDuringExecute:!0,useBtDuringExecute:!0,useWwDuringExecute:!0,useSlamOverExecute:!0,stanceOption:l.DefaultStance}),_=i.create({useRend:!0,useMs:!0,useCleave:!1,sunderArmor:o.SunderArmorMaintain,msRageThreshold:30,slamRageThreshold:25,hsRageThreshold:50,rendCdThreshold:0,rendHealthThresholdAbove:100,useHsDuringExecute:!0,spamExecute:!0,stanceOption:l.DefaultStance}),V={name:"Fury",rotation:r.create({specRotationOptionsJson:i.toJsonString(i.create({})),rotation:d.fromJsonString('{\n\t\t\t"type": "TypeAPL",\n\t\t\t"prepullActions": [\n\t\t\t\t{"action":{"castSpell":{"spellId":{"spellId":47436}}},"doAtValue":{"const":{"val":"-10s"}}},\n\t\t\t\t{"action":{"castSpell":{"spellId":{"otherId":"OtherActionPotion"}}},"doAtValue":{"const":{"val":"-1s"}}}\n\t\t\t],\n\t\t\t"priorityList": [\n\t\t\t\t{"action":{"castSpell":{"spellId":{"spellId":2458}}}},\n\t\t\t\t{"action":{"condition":{"auraShouldRefresh":{"sourceUnit":{"type":"Self"},"auraId":{"spellId":47436},"maxOverlap":{"const":{"val":"2s"}}}},"castSpell":{"spellId":{"spellId":47436}}}},\n\t\t\t\t{"action":{"condition":{"auraShouldRefresh":{"auraId":{"spellId":47467},"maxOverlap":{"const":{"val":"2s"}}}},"castSpell":{"spellId":{"spellId":47467}}}},\n\t\t\t\t{"hide":true,"action":{"condition":{"and":{"vals":[{"auraShouldRefresh":{"auraId":{"spellId":47502},"maxOverlap":{"const":{"val":"2s"}}}},{"gcdIsReady":{}},{"cmp":{"op":"OpGe","lhs":{"currentRage":{}},"rhs":{"const":{"val":"20"}}}},{"spellIsReady":{"spellId":{"spellId":47502}}}]}},"sequence":{"name":"TC","actions":[{"castSpell":{"spellId":{"spellId":2457}}},{"castSpell":{"spellId":{"spellId":47502}}}]}}},\n\t\t\t\t{"hide":true,"action":{"resetSequence":{"sequenceName":"TC"}}},\n\t\t\t\t{"hide":true,"action":{"condition":{"auraShouldRefresh":{"auraId":{"spellId":47437},"maxOverlap":{"const":{"val":"2s"}}}},"castSpell":{"spellId":{"spellId":25203}}}},\n\t\t\t\t{"action":{"autocastOtherCooldowns":{}}},\n\t\t\t\t{"action":{"condition":{"auraIsActive":{"auraId":{"spellId":46916}}},"castSpell":{"spellId":{"spellId":47475}}}},\n\t\t\t\t{"action":{"castSpell":{"spellId":{"spellId":23881}}}},\n\t\t\t\t{"action":{"castSpell":{"spellId":{"spellId":1680}}}},\n\t\t\t\t{"action":{"condition":{"and":{"vals":[{"not":{"val":{"isExecutePhase":{"threshold":"E20"}}}},{"not":{"val":{"dotIsActive":{"spellId":{"spellId":47465}}}}}]}},"castSpell":{"spellId":{"spellId":47465}}}},\n\t\t\t\t{"action":{"castSpell":{"spellId":{"spellId":47471}}}},\n\t\t\t\t{"action":{"condition":{"cmp":{"op":"OpGe","lhs":{"currentRage":{}},"rhs":{"const":{"val":"30"}}}},"castSpell":{"spellId":{"spellId":47450,"tag":1}}}}\n\t\t\t]\n\t\t}')})},Q=m.create({startingRage:0,useRecklessness:!0,useShatteringThrow:!0,shout:h.WarriorShoutCommanding}),$=c.create({flask:g.FlaskOfEndlessRage,food:u.FoodSpicedWormBurger,defaultPotion:p.IndestructiblePotion,prepopPotion:p.PotionOfSpeed}),X={name:"P1 Pre-Raid Fury Preset",tooltip:W,enableWhen:t=>0!=t.getTalentTree(),gear:f.fromJsonString('{"items": [\n\t\t{"id":41386,"enchant":3817,"gems":[41398,42702]},\n\t\t{"id":42645,"gems":[40003]},\n\t\t{"id":44195,"enchant":3808},\n\t\t{"id":37647,"enchant":3605},\n\t\t{"id":39606,"enchant":3832,"gems":[40003,40003]},\n\t\t{"id":44203,"enchant":3845,"gems":[0]},\n\t\t{"id":39609,"enchant":3604,"gems":[40037,0]},\n\t\t{"id":40694,"gems":[42149,42149]},\n\t\t{"id":44205,"enchant":3823},\n\t\t{"id":44306,"enchant":3606,"gems":[40037,40037]},\n\t\t{"id":42642,"gems":[42149]},\n\t\t{"id":37642},\n\t\t{"id":42987},\n\t\t{"id":40684},\n\t\t{"id":37852,"enchant":3789},\n\t\t{"id":37852,"enchant":3789},\n\t\t{"id":37191}\n\t]}')},Z={name:"P1 Fury Preset",tooltip:W,enableWhen:t=>0!=t.getTalentTree(),gear:f.fromJsonString('{ "items": [\n\t\t{"id":44006,"enchant":3817,"gems":[41285,42702]},\n\t\t{"id":44664,"gems":[39996]},\n\t\t{"id":40530,"enchant":3808,"gems":[40037]},\n\t\t{"id":40403,"enchant":3605},\n\t\t{"id":40539,"enchant":3832,"gems":[42142]},\n\t\t{"id":39765,"enchant":3845,"gems":[39996,0]},\n\t\t{"id":40541,"enchant":3604,"gems":[0]},\n\t\t{"id":40205,"gems":[42142]},\n\t\t{"id":40529,"enchant":3823,"gems":[39996,40022]},\n\t\t{"id":40591,"enchant":3606},\n\t\t{"id":43993,"gems":[42142]},\n\t\t{"id":40717},\n\t\t{"id":42987},\n\t\t{"id":40256},\n\t\t{"id":40384,"enchant":3789},\n\t\t{"id":40384,"enchant":3789},\n\t\t{"id":40385}\n\t]}')},tt={name:"P2 Fury Preset",tooltip:W,enableWhen:t=>0!=t.getTalentTree(),gear:f.fromJsonString('{ "items": [\n\t\t{"id":46151,"enchant":3817,"gems":[41398,39996]},\n\t\t{"id":45517,"gems":[39996]},\n\t\t{"id":46149,"enchant":3808,"gems":[39996]},\n\t\t{"id":46032,"enchant":3605,"gems":[39996,40037]},\n\t\t{"id":46146,"enchant":3832,"gems":[39996,42702]},\n\t\t{"id":45611,"enchant":3845,"gems":[40037,0]},\n\t\t{"id":46148,"enchant":3604,"gems":[40058]},\n\t\t{"id":46095,"gems":[42154,42142,42142]},\n\t\t{"id":45536,"enchant":3823,"gems":[39996,39996,39996]},\n\t\t{"id":40591,"enchant":3606},\n\t\t{"id":45608,"gems":[39996]},\n\t\t{"id":45534,"gems":[39996]},\n\t\t{"id":42987},\n\t\t{"id":45931},\n\t\t{"id":45516,"enchant":3789,"gems":[39996,39996]},\n\t\t{"id":45516,"enchant":3789,"gems":[39996,39996]},\n\t\t{"id":45296,"gems":[39996]}\n\t]}')},et={name:"P3 Fury Preset [A]",tooltip:W,enableWhen:t=>0!=t.getTalentTree()&&t.getFaction()==S.Alliance,gear:f.fromJsonString('{ "items": [\n\t\t{"id":48383,"enchant":3817,"gems":[41398,49110]},\n\t\t{"id":47060,"gems":[40117]},\n\t\t{"id":48381,"enchant":3808,"gems":[40111]},\n\t\t{"id":47545,"enchant":3831,"gems":[40111]},\n\t\t{"id":48385,"enchant":3832,"gems":[40117,40117]},\n\t\t{"id":47074,"enchant":3845,"gems":[40143,0]},\n\t\t{"id":47240,"enchant":3604,"gems":[40111,40111,0]},\n\t\t{"id":47002,"gems":[40143,40143,40111]},\n\t\t{"id":48382,"enchant":3823,"gems":[40142,40117]},\n\t\t{"id":47154,"enchant":3606,"gems":[40142,40117]},\n\t\t{"id":46966,"gems":[40143]},\n\t\t{"id":47075,"gems":[40111]},\n\t\t{"id":45931},\n\t\t{"id":47131},\n\t\t{"id":47078,"enchant":3789,"gems":[42142,40111]},\n\t\t{"id":47078,"enchant":3789,"gems":[42142,42142]},\n\t\t{"id":46995,"gems":[40111]}\n\t]}')},nt={name:"P3 Fury Preset [H]",tooltip:W,enableWhen:t=>0!=t.getTalentTree()&&t.getFaction()==S.Horde,gear:f.fromJsonString('{ "items": [\n\t\t{"id":48398,"enchant":3817,"gems":[41398,49110]},\n\t\t{"id":47433,"gems":[40111]},\n\t\t{"id":48400,"enchant":3808,"gems":[40117]},\n\t\t{"id":47546,"enchant":3831,"gems":[40111]},\n\t\t{"id":48396,"enchant":3832,"gems":[40111,40111]},\n\t\t{"id":47414,"enchant":3845,"gems":[40142,0]},\n\t\t{"id":47240,"enchant":3604,"gems":[40111,40111,0]},\n\t\t{"id":47429,"gems":[40142,40142,42142]},\n\t\t{"id":48399,"enchant":3823,"gems":[40142,40111]},\n\t\t{"id":47445,"enchant":3606,"gems":[40142,45862]},\n\t\t{"id":47413,"gems":[40142]},\n\t\t{"id":47443,"gems":[40111]},\n\t\t{"id":45931},\n\t\t{"id":47464},\n\t\t{"id":47446,"enchant":3789,"gems":[40117,40117]},\n\t\t{"id":47446,"enchant":3789,"gems":[42142,42142]},\n\t\t{"id":47428,"gems":[40117]}\n\t]}')},at={name:"P1 Pre-Raid Arms Preset",tooltip:W,enableWhen:t=>0==t.getTalentTree(),gear:f.fromJsonString('{ "items": [\n\t\t{"id":41386,"enchant":3817,"gems":[41285,42702]},\n\t\t{"id":42645,"gems":[40002]},\n\t\t{"id":44195,"enchant":3808},\n\t\t{"id":37647,"enchant":3605},\n\t\t{"id":39606,"enchant":3832,"gems":[40002,40002]},\n\t\t{"id":41355,"enchant":3845,"gems":[0]},\n\t\t{"id":39609,"enchant":3604,"gems":[40037,0]},\n\t\t{"id":40694,"gems":[42149,42149]},\n\t\t{"id":37193,"enchant":3823,"gems":[40002,40037]},\n\t\t{"id":44306,"enchant":3606,"gems":[40086,40002]},\n\t\t{"id":42642,"gems":[42149]},\n\t\t{"id":37642},\n\t\t{"id":42987},\n\t\t{"id":40684},\n\t\t{"id":37852,"enchant":3789},\n\t\t{},\n\t\t{"id":37191}\n\t]}')},it={name:"P1 Arms Preset",tooltip:W,enableWhen:t=>0==t.getTalentTree(),gear:f.fromJsonString('{"items": [\n\t\t{"id":40528,"enchant":3817,"gems":[41398,42153]},\n\t\t{"id":44664,"gems":[39996]},\n\t\t{"id":40530,"enchant":3808,"gems":[40038]},\n\t\t{"id":40403,"enchant":3605},\n\t\t{"id":40539,"enchant":3832,"gems":[42153]},\n\t\t{"id":40330,"enchant":3845,"gems":[40002,0]},\n\t\t{"id":40541,"enchant":3604,"gems":[0]},\n\t\t{"id":40205,"gems":[42153]},\n\t\t{"id":40318,"enchant":3823,"gems":[49110,40038]},\n\t\t{"id":40591,"enchant":3606},\n\t\t{"id":43993,"gems":[40002]},\n\t\t{"id":40474},\n\t\t{"id":42987},\n\t\t{"id":40256},\n\t\t{"id":40384,"enchant":3789},\n\t\t{},\n\t\t{"id":40385}\n\t]}')},st={name:"P2 Arms Preset",tooltip:W,enableWhen:t=>0==t.getTalentTree(),gear:f.fromJsonString('{"items": [\n\t\t  {"id":46151,"enchant":3817,"gems":[41398,42142]},\n\t\t  {"id":45459,"gems":[40002]},\n\t\t  {"id":46149,"enchant":3808,"gems":[42153]},\n\t\t  {"id":46032,"enchant":3605,"gems":[39996,40037]},\n\t\t  {"id":46146,"enchant":3832,"gems":[42153,39996]},\n\t\t  {"id":45663,"enchant":3845,"gems":[39996,0]},\n\t\t  {"id":46148,"enchant":3604,"gems":[40037,0]},\n\t\t  {"id":45241,"gems":[49110,40037,39996]},\n\t\t  {"id":45536,"enchant":3823,"gems":[39996,39996,39996]},\n\t\t  {"id":45599,"enchant":3606,"gems":[40002,40002]},\n\t\t  {"id":45608,"gems":[39996]},\n\t\t  {"id":46322,"gems":[39996]},\n\t\t  {"id":46038},\n\t\t  {"id":45931},\n\t\t  {"id":45533,"enchant":3789,"gems":[39996,39996]},\n\t\t  {},\n\t\t  {"id":45296,"gems":[39996]}\n\t]}')},ot={name:"P3 Arms 2p Preset [A]",tooltip:W,enableWhen:t=>0==t.getTalentTree()&&t.getFaction()==S.Alliance,gear:f.fromJsonString('{"items": [\n\t\t{"id":49478,"enchant":3817,"gems":[41398,40117]},\n\t\t{"id":47915,"gems":[40117]},\n\t\t{"id":48381,"enchant":3808,"gems":[42142]},\n\t\t{"id":47545,"enchant":3605,"gems":[40117]},\n\t\t{"id":48385,"enchant":3832,"gems":[42142,42142]},\n\t\t{"id":47074,"enchant":3845,"gems":[40143,0]},\n\t\t{"id":47240,"enchant":3604,"gems":[49110,40117,0]},\n\t\t{"id":47153,"gems":[40143,40117,40117]},\n\t\t{"id":47191,"enchant":3823,"gems":[40117,40117,40117]},\n\t\t{"id":47077,"enchant":3606,"gems":[40143,40117]},\n\t\t{"id":47934,"gems":[40142]},\n\t\t{"id":45608,"gems":[40117]},\n\t\t{"id":47131},\n\t\t{"id":46038},\n\t\t{"id":47078,"enchant":3789,"gems":[40117,40117]},\n\t\t{},\n\t\t{"id":45296,"gems":[40117]}\n\t]}')},lt={name:"P3 Arms 4p Preset [A]",tooltip:W,enableWhen:t=>0==t.getTalentTree()&&t.getFaction()==S.Alliance,gear:f.fromJsonString('{"items": [\n\t\t{"id":48383,"enchant":3817,"gems":[41398,40117]},\n\t\t{"id":47915,"gems":[40117]},\n\t\t{"id":48381,"enchant":3808,"gems":[42153]},\n\t\t{"id":47545,"enchant":3605,"gems":[40117]},\n\t\t{"id":48385,"enchant":3832,"gems":[42153,42153]},\n\t\t{"id":47074,"enchant":3845,"gems":[40117,0]},\n\t\t{"id":47240,"enchant":3604,"gems":[49110,40117,0]},\n\t\t{"id":47153,"gems":[40117,40117,40117]},\n\t\t{"id":48382,"enchant":3823,"gems":[40142,40117]},\n\t\t{"id":47077,"enchant":3606,"gems":[40117,40117]},\n\t\t{"id":47934,"gems":[40117]},\n\t\t{"id":45608,"gems":[40117]},\n\t\t{"id":46038},\n\t\t{"id":47131},\n\t\t{"id":47078,"enchant":3789,"gems":[40117,40117]},\n\t\t{},\n\t\t{"id":46995,"gems":[40117]}\n\t]}')},rt={name:"P3 Arms 2p Preset [H]",tooltip:W,enableWhen:t=>0==t.getTalentTree()&&t.getFaction()==S.Horde,gear:f.fromJsonString('{"items": [\n\t\t{"id":49478,"enchant":3817,"gems":[41398,40111]},\n\t\t{"id":45459,"gems":[40111]},\n\t\t{"id":48400,"enchant":3808,"gems":[42153]},\n\t\t{"id":47546,"enchant":3605,"gems":[40111]},\n\t\t{"id":48396,"enchant":3832,"gems":[42153,42153]},\n\t\t{"id":47442,"enchant":3845,"gems":[40143,0]},\n\t\t{"id":47492,"enchant":3604,"gems":[49110,40117,0]},\n\t\t{"id":47472,"gems":[40143,40117,40117]},\n\t\t{"id":47480,"enchant":3823,"gems":[40117,40117,40117]},\n\t\t{"id":47445,"enchant":3606,"gems":[40143,40117]},\n\t\t{"id":48007,"gems":[40143]},\n\t\t{"id":45608,"gems":[40117]},\n\t\t{"id":47464},\n\t\t{"id":46038},\n\t\t{"id":47446,"enchant":3789,"gems":[40111,40111]},\n\t\t{},\n\t\t{"id":47428,"gems":[40111]}\n\t]}')},dt={name:"P3 Arms 4p Preset [H]",tooltip:W,enableWhen:t=>0==t.getTalentTree()&&t.getFaction()==S.Horde,gear:f.fromJsonString('{"items": [\n\t\t{"id":48398,"enchant":3817,"gems":[41398,40117]},\n\t\t{"id":47988,"gems":[40117]},\n\t\t{"id":48400,"enchant":3808,"gems":[42153]},\n\t\t{"id":47546,"enchant":3605,"gems":[40117]},\n\t\t{"id":48396,"enchant":3832,"gems":[42153,42153]},\n\t\t{"id":47442,"enchant":3845,"gems":[40117,0]},\n\t\t{"id":47492,"enchant":3604,"gems":[49110,40117,0]},\n\t\t{"id":47472,"gems":[40117,40117,40117]},\n\t\t{"id":48399,"enchant":3823,"gems":[40142,40117]},\n\t\t{"id":47445,"enchant":3606,"gems":[40117,40117]},\n\t\t{"id":48007,"gems":[40117]},\n\t\t{"id":45608,"gems":[40117]},\n\t\t{"id":46038},\n\t\t{"id":47464},\n\t\t{"id":47446,"enchant":3789,"gems":[40117,40117]},\n\t\t{},\n\t\t{"id":47428,"gems":[40117]}\n\t]}')},mt=M({fieldName:"useRecklessness",id:T.fromSpellId(1719)}),ht=B({fieldName:"startingRage",label:"Starting Rage",labelTooltip:"Initial rage at the start of each iteration."}),ct=D({fieldName:"stanceSnapshot",label:"Stance Snapshot",labelTooltip:"Ability that is cast at the same time as stance swap will benefit from the bonus of the stance before the swap."}),gt=D({fieldName:"munch",label:"Munching",labelTooltip:'Apply "munching" to Deep Wounds'}),ut=N({fieldName:"shout",values:[{color:"c79c6e",value:h.WarriorShoutNone},{actionId:T.fromSpellId(2048),value:h.WarriorShoutBattle},{actionId:T.fromSpellId(469),value:h.WarriorShoutCommanding}]}),pt={inputs:[H({fieldName:"useMs",label:"Use Mortal Strike",labelTooltip:"Use Mortal Strike when rage threshold is met.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>0==t.getTalentTree()&&!t.getRotation().customRotationOption}),H({fieldName:"useCleave",label:"Use Cleave",labelTooltip:"Use Cleave instead of Heroic Strike.",showWhen:t=>!t.getRotation().customRotationOption}),H({fieldName:"useRend",label:"Use Rend",labelTooltip:"Use Rend when rage threshold is met and the debuff duration is less than refresh time.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>!t.getRotation().customRotationOption}),H({fieldName:"useOverpower",label:"Use Overpower",labelTooltip:"Use Overpower whenever it is available on an open GCD.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>1==t.getTalentTree()&&!t.getRotation().customRotationOption}),F({fieldName:"mainGcd",label:"Main GCD",labelTooltip:"Main GCD ability that will be prioritized above other abilities.",values:[{name:"Slam",value:s.Slam},{name:"Bloodthirst",value:s.Bloodthirst},{name:"Whirlwind",value:s.Whirlwind}],changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>1==t.getTalentTree()&&!t.getRotation().customRotationOption}),J({fieldName:"msRageThreshold",label:"Mortal Strike rage threshold",labelTooltip:"Mortal Strike when rage is above:",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>(t.getRotation().useMs||t.getRotation().customRotationOption)&&0==t.getTalentTree()}),J({fieldName:"slamRageThreshold",label:"Slam rage threshold",labelTooltip:"Slam when rage is above:",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>(t.getRotation().useMs||t.getRotation().customRotationOption)&&0==t.getTalentTree()}),J({fieldName:"bloodsurgeDurationThreshold",label:"Exp Slam: Bloodsurge duration threshold (s)",labelTooltip:"Cast Exp Slam when Bloodsurge duration is below (seconds):",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>t.getRotation().customRotationOption&&1==t.getTalentTree()}),J({fieldName:"hsRageThreshold",label:"HS rage threshold",labelTooltip:"Heroic Strike when rage is above:"}),J({fieldName:"rendHealthThresholdAbove",label:"Rend health threshold (%)",labelTooltip:"Rend will only be used when boss health is above this value in %.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>1==t.getRotation().useRend||t.getRotation().customRotationOption}),J({fieldName:"rendRageThresholdBelow",label:"Rend rage threshold below",labelTooltip:"Rend will only be used when rage is smaller than this value.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>(1==t.getRotation().useRend||t.getRotation().customRotationOption)&&1==t.getTalentTree()}),J({fieldName:"rendCdThreshold",label:"Rend Refresh Time (s)",labelTooltip:"Refresh Rend when the remaining duration is less than this amount of time (seconds).",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>1==t.getRotation().useRend||t.getRotation().customRotationOption}),H({fieldName:"useHsDuringExecute",label:"HS during Execute Phase",labelTooltip:"Use Heroic Strike during Execute Phase."}),H({fieldName:"useBtDuringExecute",label:"BT during Execute Phase",labelTooltip:"Use Bloodthirst during Execute Phase.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>1==t.getTalentTree()}),H({fieldName:"useWwDuringExecute",label:"WW during Execute Phase",labelTooltip:"Use Whirlwind during Execute Phase.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>1==t.getTalentTree()}),H({fieldName:"useSlamOverExecute",label:"Slam during Execute Phase",labelTooltip:"Use Slam Over Execute when Bloodsurge Procs in Execute Phase.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>1==t.getTalentTree()}),H({fieldName:"executePhaseOverpower",label:"Overpower in Execute Phase",labelTooltip:"Use Overpower instead of Execute whenever it is available.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>(1==t.getRotation().useOverpower||t.getRotation().customRotationOption)&&1==t.getTalentTree()}),H({fieldName:"spamExecute",label:"Spam Execute",labelTooltip:"Use Execute whenever possible during Execute Phase.",changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter]),showWhen:t=>0==t.getTalentTree()}),F({fieldName:"sunderArmor",label:"Sunder Armor",values:[{name:"Never",value:o.SunderArmorNone},{name:"Help Stack",value:o.SunderArmorHelpStack},{name:"Maintain Debuff",value:o.SunderArmorMaintain}]}),F({fieldName:"stanceOption",label:"Stance Option",labelTooltip:"Stance to stay on. The default for Fury (Bloodthirst) is Berserker Stance and Battle Stance for everything else.",values:[{name:"Default",value:l.DefaultStance},{name:"Battle Stance",value:l.BattleStance},{name:"Berserker Stance",value:l.BerserkerStance}]}),H({fieldName:"maintainDemoShout",label:"Maintain Demo Shout",labelTooltip:"Keep Demo Shout active on the primary target."}),H({fieldName:"maintainThunderClap",label:"Maintain Thunder Clap",labelTooltip:"Keep Thunder Clap active on the primary target."}),H({fieldName:"customRotationOption",label:"Custom Rotation (Advanced)",labelTooltip:"Create your own rotation action priority list.",showWhen:t=>t.sim.getShowExperimental(),changeEmitter:t=>b.onAny([t.rotationChangeEmitter,t.talentsChangeEmitter])}),U({fieldName:"customRotation",numColumns:3,showWhen:t=>t.getRotation().customRotationOption&&t.sim.getShowExperimental(),values:[{actionId:T.fromSpellId(23881),value:w.BloodthirstCustom},{actionId:T.fromSpellId(1680),value:w.WhirlwindCustom},{actionId:T.fromSpellId(47475),value:w.SlamCustom},{actionId:T.fromSpellId(47475),value:w.SlamExpiring,text:"Exp",showWhen:t=>1==t.getTalentTree()},{actionId:T.fromSpellId(47486),value:w.MortalStrike},{actionId:T.fromSpellId(47465),value:w.Rend},{actionId:T.fromSpellId(7384),value:w.Overpower},{actionId:T.fromSpellId(47471),value:w.Execute},{actionId:T.fromSpellId(47502),value:w.ThunderClap}]})]};class ft extends j{constructor(t,e){super(t,e,{cssClass:"warrior-sim-ui",cssScheme:"warrior",knownIssues:[],epStats:[E.StatStrength,E.StatAgility,E.StatAttackPower,E.StatExpertise,E.StatMeleeHit,E.StatMeleeCrit,E.StatMeleeHaste,E.StatArmorPenetration,E.StatArmor],epPseudoStats:[C.PseudoStatMainHandDps,C.PseudoStatOffHandDps],epReferenceStat:E.StatAttackPower,displayStats:[E.StatHealth,E.StatStamina,E.StatStrength,E.StatAgility,E.StatAttackPower,E.StatExpertise,E.StatMeleeHit,E.StatMeleeCrit,E.StatSpellCrit,E.StatMeleeHaste,E.StatArmorPenetration,E.StatArmor],modifyDisplayStats:t=>{let e=new v;return t.getInFrontOfTarget()||(e=e.addStat(E.StatExpertise,4*t.getTalents().weaponMastery*I)),{talents:e}},defaults:{gear:et.gear,epWeights:v.fromMap({[E.StatStrength]:2.72,[E.StatAgility]:1.82,[E.StatAttackPower]:1,[E.StatExpertise]:2.55,[E.StatMeleeHit]:.79,[E.StatMeleeCrit]:2.12,[E.StatMeleeHaste]:1.72,[E.StatArmorPenetration]:2.17,[E.StatArmor]:.03},{[C.PseudoStatMainHandDps]:6.29,[C.PseudoStatOffHandDps]:3.58}),consumes:$,rotation:L,talents:Y.data,specOptions:Q,raidBuffs:R.create({giftOfTheWild:A.TristateEffectImproved,swiftRetribution:!0,strengthOfEarthTotem:A.TristateEffectImproved,icyTalons:!0,abominationsMight:!0,leaderOfThePack:A.TristateEffectRegular,sanctifiedRetribution:!0,bloodlust:!0,devotionAura:A.TristateEffectImproved,stoneskinTotem:A.TristateEffectImproved}),partyBuffs:y.create({heroicPresence:!1}),individualBuffs:P.create({blessingOfKings:!0,blessingOfMight:A.TristateEffectImproved}),debuffs:O.create({bloodFrenzy:!0,heartOfTheCrusader:!0,mangle:!0,sunderArmor:!0,curseOfWeakness:A.TristateEffectRegular,faerieFire:A.TristateEffectImproved})},playerIconInputs:[ut,mt],rotationInputs:pt,includeBuffDebuffInputs:[],excludeBuffDebuffInputs:[],otherInputs:{inputs:[ht,ct,gt,q,z]},encounterPicker:{showExecuteProportion:!0},presets:{talents:[K,Y],rotations:[V],gear:[X,Z,tt,et,nt,at,it,st,ot,lt,rt,dt]}})}addOptimizeGemsAction(){this.addAction("Suggest Gems","optimize-gems-action",(async()=>{this.optimizeGems()}))}async optimizeGems(){let t=this.player.getGear().withoutGems();t=t.withMetaGem(this.sim.db.lookupGem(41398));const e=this.player.getEpWeights(),n=this.findTearSlot(t,e);t=this.socketTear(t,n),await this.updateGear(t);const a=this.findSocketsByColor(t,e,k.GemColorRed,n),i=new Array;i.push([40117,this.calcArpCap(t)]);const s=(new v).withStat(E.StatExpertise,6.5*I*4+4);i.push([40118,s]);const o=this.calcCritCap(t);i.push([40111,new v]);let l=0;this.player.hasProfession(G.Jewelcrafting)&&(t=this.optimizeJcGems(t,a),l=3),t=await this.fillGemsToCaps(t,a,i,0,l);const r=this.findSocketsByColor(t,e,k.GemColorYellow,n),d=new Array,m=(new v).withStat(E.StatMeleeHit,8*x+4);d.push([40125,m]),d.push([40162,m.add(s)]),d.push([40143,m]),d.push([40142,o]),await this.fillGemsToCaps(t,r,d,0,0)}calcArpCap(t){let e=1404;return t.hasTrinket(45931)?e=659:t.hasTrinket(40256)&&(e=798),(new v).withStat(E.StatArmorPenetration,e)}calcArpTarget(t){return t.hasTrinket(45931)?648:t.hasTrinket(40256)?787:1399}calcCritCap(t){let e=0;return t.hasRelic(47668)&&(e+=200),t.hasRelic(50456)&&(e+=220),(t.hasTrinket(47131)||t.hasTrinket(47464))&&(e+=510),(t.hasTrinket(47115)||t.hasTrinket(47303))&&(e+=450),(t.hasTrinket(44253)||t.hasTrinket(42987))&&(e+=300),(new v).withStat(E.StatMeleeCrit,45.91*(77.8-1.1*e*1.06*1.02/83.33))}async updateGear(t){return this.player.setGear(b.nextEventID(),t),await this.sim.updateCharacterStats(b.nextEventID()),v.fromProto(this.player.getCurrentStats().finalStats)}findTearSlot(t,e){let n=null,a=1e-8;for(var i of t.getItemSlots()){const s=t.getEquippedItem(i);if(!s)continue;if(1!=s.numSocketsOfColor(k.GemColorBlue))continue;const o=new v(s.item.socketBonus).computeEP(e);o>a&&(n=i,a=o)}return n}socketTear(t,e){if(null!=e){const n=t.getEquippedItem(e);for(const[a,i]of n.allSocketColors().entries())if(i==k.GemColorBlue)return t.withEquippedItem(e,n.withGem(this.sim.db.lookupGem(49110),a),!0)}return t}findSocketsByColor(t,e,n,a){const i=new Array,s=this.player.isBlacksmithing();for(var o of t.getItemSlots()){const l=t.getEquippedItem(o);if(!l)continue;const r=l.numSocketsOfColor(k.GemColorBlue)>0&&o!=a;for(const[t,a]of l.curSocketColors(s).entries()){if(l.hasSocketedGem(t))continue;let s=!1;a!=k.GemColorYellow||r||(s=new v(l.item.socketBonus).computeEP(e)>1e-8),(n==k.GemColorYellow&&s||n==k.GemColorRed&&!s)&&i.push([o,t])}}return i}async fillGemsToCaps(t,e,n,a,i){let s=t;const o=this.sim.db.lookupGem(n[a][0]);if(0==a)for(const[u,p]of e.slice(i))s=s.withGem(u,p,o);let l=await this.updateGear(s);const r=n[a][1];if(l.belowCaps(r)||a==n.length-1)return s;const d=this.sim.db.lookupGem(n[a+1][0]),m=n[a+1][1];let h=r;a>0&&!r.equals(m)&&(h=r.subtract(m));for(var c=e.length-1;c>=i&&!l.belowCaps(h);c--){const[t,n]=e[c];s=s.withGem(t,n,d),l=await this.updateGear(s)}let g=c+1;return l.belowCaps(r)||(g=i),await this.fillGemsToCaps(s,e,n,a+1,g)}calcDistanceToArpTarget(t,e,n,a,i){const s=e+34*t+20*Math.max(0,Math.min(n-3,Math.floor((a-e-34*t)/20)));return Math.abs(s-i)}optimizeJcGems(t,e){const n=v.fromProto(this.player.getCurrentStats().finalStats).getStat(E.StatArmorPenetration),a=e.length,i=this.calcArpCap(t).getStat(E.StatArmorPenetration),s=this.calcArpTarget(t);let o=0,l=this.calcDistanceToArpTarget(0,n,a,i,s);for(let d=1;d<=3;d++){const t=this.calcDistanceToArpTarget(d,n,a,i,s);t<l&&(o=d,l=t)}let r=t;for(let d=0;d<3;d++){let t=42142;d<o&&(t=42153),r=r.withGem(e[d][0],e[d][1],this.sim.db.lookupGem(t))}return r}}export{_ as A,Q as D,Y as F,it as P,ft as W,K as a,$ as b,st as c,lt as d,dt as e,L as f,Z as g,tt as h,et as i,nt as j};
//# sourceMappingURL=sim-0bac6dd1.chunk.js.map
