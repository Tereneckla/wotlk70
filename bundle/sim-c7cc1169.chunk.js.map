{"version":3,"file":"sim-c7cc1169.chunk.js","sources":["../../../ui/feral_druid/inputs.ts","../../../ui/feral_druid/presets.ts","../../../ui/feral_druid/sim.ts"],"sourcesContent":["import { UnitReference, UnitReference_Type as UnitType } from '../core/proto/common.js';\r\nimport { Spec } from '../core/proto/common.js';\r\nimport { ActionId } from '../core/proto_utils/action_id.js';\r\nimport { Player } from '../core/player.js';\r\nimport { EventID, TypedEvent } from '../core/typed_event.js';\r\n\r\nimport * as InputHelpers from '../core/components/input_helpers.js';\r\n\r\nimport {\r\n\tFeralDruid,\r\n\tFeralDruid_Rotation as DruidRotation,\r\n\tFeralDruid_Rotation_AplType as AplType,\r\n\tFeralDruid_Rotation_BearweaveType as BearweaveType,\r\n\tFeralDruid_Rotation_BiteModeType as BiteModeType,\r\n\tFeralDruid_Options as DruidOptions,\r\n\tFeralDruid_Rotation_BiteModeType\r\n} from '../core/proto/druid.js';\r\n\r\n// Configuration for spec-specific UI elements on the settings tab.\r\n// These don't need to be in a separate file but it keeps things cleaner.\r\n\r\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecFeralDruid>({\r\n\tfieldName: 'innervateTarget',\r\n\tid: ActionId.fromSpellId(29166),\r\n\textraCssClasses: [\r\n\t\t'within-raid-sim-hide',\r\n\t],\r\n\tgetValue: (player: Player<Spec.SpecFeralDruid>) => player.getSpecOptions().innervateTarget?.type == UnitType.Player,\r\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecFeralDruid>, newValue: boolean) => {\r\n\t\tconst newOptions = player.getSpecOptions();\r\n\t\tnewOptions.innervateTarget = UnitReference.create({\r\n\t\t\ttype: newValue ? UnitType.Player : UnitType.Unknown,\r\n\t\t\tindex: 0,\r\n\t\t});\r\n\t\tplayer.setSpecOptions(eventID, newOptions);\r\n\t},\r\n});\r\n\r\nexport const LatencyMs = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecFeralDruid>({\r\n\tfieldName: 'latencyMs',\r\n\tlabel: 'Latency',\r\n\tlabelTooltip: 'Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued.',\r\n});\r\n\r\nexport const AssumeBleedActive = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecFeralDruid>({\r\n\tfieldName: 'assumeBleedActive',\r\n\tlabel: 'Assume Bleed Always Active',\r\n\tlabelTooltip: 'Assume bleed always exists for \\'Rend and Tear\\' calculations. Otherwise will only calculate based on own rip/rake/lacerate.',\r\n\textraCssClasses: ['within-raid-sim-hide'],\r\n})\r\n\r\nfunction ShouldShowAdvParamST(player: Player<Spec.SpecFeralDruid>): boolean {\r\n\tlet rot = player.getRotation();\r\n\treturn rot.manualParams && rot.rotationType == AplType.SingleTarget;\r\n}\r\n\r\nfunction ShouldShowAdvParamAoe(player: Player<Spec.SpecFeralDruid>): boolean {\r\n\tlet rot = player.getRotation();\r\n\treturn rot.manualParams && rot.rotationType == AplType.Aoe;\r\n}\r\n\r\nexport const FeralDruidRotationConfig = {\r\n\tinputs: [\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecFeralDruid, AplType>({\r\n\t\t\tfieldName: 'rotationType',\r\n\t\t\tlabel: 'Type',\r\n\t\t\tvalues: [\r\n\t\t\t\t{ name: 'Single Target', value: AplType.SingleTarget },\r\n\t\t\t\t{ name: 'AOE', value: AplType.Aoe },\r\n\t\t\t],\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'prePopOoc',\r\n\t\t\tlabel: 'Pre-pop Clearcasting',\r\n\t\t\tlabelTooltip: 'Start fight with clearcasting',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getTalents().omenOfClarity,\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecFeralDruid>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'prePopBerserk',\r\n\t\t\tlabel: 'Pre-pop Berserk',\r\n\t\t\tlabelTooltip: 'Pre pop berserk 1 sec before fight',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getTalents().berserk,\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecFeralDruid>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'manualParams',\r\n\t\t\tlabel: 'Manual Advanced Parameters',\r\n\t\t\tlabelTooltip: 'Manually specify advanced parameters, otherwise will use preset defaults',\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'maxFfDelay',\r\n\t\t\tlabel: 'Max FF Delay',\r\n\t\t\tlabelTooltip: 'Max allowed delay to wait for ff to come off CD in seconds',\r\n\t\t\tfloat: true,\r\n\t\t\tpositive: true,\r\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getRotation().manualParams,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'minRoarOffset',\r\n\t\t\tlabel: 'Roar Offset',\r\n\t\t\tlabelTooltip: 'Targeted offset in Rip/Roar timings',\r\n\t\t\tshowWhen: ShouldShowAdvParamST,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'ripLeeway',\r\n\t\t\tlabel: 'Rip Leeway',\r\n\t\t\tlabelTooltip: 'Rip leeway when determining roar clips',\r\n\t\t\tshowWhen: ShouldShowAdvParamST,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'useRake',\r\n\t\t\tlabel: 'Use Rake',\r\n\t\t\tlabelTooltip: 'Use rake during rotation',\r\n\t\t\tshowWhen: ShouldShowAdvParamST,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'useBite',\r\n\t\t\tlabel: 'Bite during rotation',\r\n\t\t\tlabelTooltip: 'Use bite during rotation rather than just at end',\r\n\t\t\tshowWhen: ShouldShowAdvParamST,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'biteTime',\r\n\t\t\tlabel: 'Bite Time',\r\n\t\t\tlabelTooltip: 'Min seconds on Rip/Roar to bite',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) =>\r\n\t\t\t\tShouldShowAdvParamST(player) && player.getRotation().useBite == true && player.getRotation().biteModeType == BiteModeType.Emperical,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'flowerWeave',\r\n\t\t\tlabel: 'Flower Weave',\r\n\t\t\tlabelTooltip: 'Fish for clearcasting during rotation with gotw',\r\n\t\t\tshowWhen: ShouldShowAdvParamAoe,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\r\n\t\t\textraCssClasses: ['used-in-apl'],\r\n\t\t\tfieldName: 'raidTargets',\r\n\t\t\tlabel: 'GotW Raid Targets',\r\n\t\t\tlabelTooltip: 'Raid size to assume for clearcast proc chance (can include pets as well, so 25 man raid potentically can be ~30)',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.aplRotation.enabled || (ShouldShowAdvParamAoe(player) && player.getRotation().flowerWeave == true),\r\n\t\t}),\r\n\t\t// Can be uncommented if/when analytical bite mode is added\r\n\t\t//InputHelpers.makeRotationEnumInput<Spec.SpecFeralDruid, BiteModeType>({\r\n\t\t//\tfieldName: 'biteModeType',\r\n\t\t//\tlabel: 'Bite Mode',\r\n\t\t//\tlabelTooltip: 'Underlying \"Bite logic\" to use',\r\n\t\t//\tvalues: [\r\n\t\t//\t\t{ name: 'Emperical', value: BiteModeType.Emperical },\r\n\t\t//\t],\r\n\t\t//\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getRotation().useBite == true\r\n\t\t//}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\r\n\t\t\tfieldName: 'hotUptime',\r\n\t\t\tlabel: 'Revitalize Hot Uptime',\r\n\t\t\tlabelTooltip: 'Hot uptime percentage to assume when theorizing energy gains',\r\n\t\t\tpercent: true,\r\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getRotation().useBite == true && player.getRotation().biteModeType == BiteModeType.Analytical,\r\n\t\t}),\r\n\t],\r\n};\r\n","import { Consumes } from '../core/proto/common.js';\r\nimport { WeaponImbue } from '../core/proto/common.js';\r\nimport { Food } from '../core/proto/common.js';\r\nimport { EquipmentSpec } from '../core/proto/common.js';\r\nimport { Potions } from '../core/proto/common.js';\r\nimport { Flask } from '../core/proto/common.js';\r\nimport { Glyphs } from '../core/proto/common.js';\r\nimport { SavedRotation, SavedTalents } from '../core/proto/ui.js';\r\n\r\nimport {\r\n\tFeralDruid_Rotation as FeralDruidRotation,\r\n\tFeralDruid_Options as FeralDruidOptions,\r\n\tDruidMajorGlyph,\r\n\tDruidMinorGlyph,\r\n\tFeralDruid_Rotation_BearweaveType,\r\n\tFeralDruid_Rotation_BiteModeType,\r\n\tFeralDruid_Rotation_AplType,\r\n} from '../core/proto/druid.js';\r\n\r\nimport * as Tooltips from '../core/constants/tooltips.js';\r\n\r\n// Preset options for this spec.\r\n// Eventually we will import these values for the raid sim too, so its good to\r\n// keep them in a separate file.\r\n\r\n// Default talents. Uses the wowhead calculator format, make the talents on\r\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\r\nexport const OmenTalents = {\r\n\tname: 'Omen',\r\n\tdata: SavedTalents.create({\r\n\t\ttalentsString: '-5032021323220100531202303104-20350001',\r\n\t\tglyphs: Glyphs.create({\r\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfRip,\r\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfShred,\r\n\t\t\tmajor3: DruidMajorGlyph.DruidMajorGlyphNone,\r\n\t\t\tminor1: DruidMinorGlyph.GlyphOfDash,\r\n\t\t\tminor2: DruidMinorGlyph.GlyphOfTheWild,\r\n\t\t\tminor3: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\r\n\t\t}),\r\n\t}),\r\n};\r\n\r\nexport const BerserkTalents = {\r\n\tname: 'Berserk',\r\n\tdata: SavedTalents.create({\r\n\t\ttalentsString: '-503202132322010053120230310511-1043',\r\n\t\tglyphs: Glyphs.create({\r\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfRip,\r\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfShred,\r\n\t\t\tmajor3: DruidMajorGlyph.DruidMajorGlyphNone,\r\n\t\t\tminor1: DruidMinorGlyph.GlyphOfDash,\r\n\t\t\tminor2: DruidMinorGlyph.GlyphOfTheWild,\r\n\t\t\tminor3: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\r\n\t\t}),\r\n\t}),\r\n};\r\n\r\nexport const DefaultRotation = FeralDruidRotation.create({\r\n\trotationType: FeralDruid_Rotation_AplType.SingleTarget,\r\n\r\n\tbearWeaveType: FeralDruid_Rotation_BearweaveType.None,\r\n\tminCombosForRip: 5,\r\n\tminCombosForBite: 5,\r\n\r\n\tuseRake: true,\r\n\tuseBite: true,\r\n\tmangleSpam: false,\r\n\tbiteModeType: FeralDruid_Rotation_BiteModeType.Emperical,\r\n\tbiteTime: 4.0,\r\n\tberserkBiteThresh: 25.0,\r\n\tberserkFfThresh: 15.0,\r\n\tpowerbear: false,\r\n\tminRoarOffset: 12.0,\r\n\tripLeeway: 3.0,\r\n\tmaintainFaerieFire: true,\r\n\thotUptime: 0.0,\r\n\tsnekWeave: false,\r\n\tflowerWeave: false,\r\n\traidTargets: 30,\r\n\tmaxFfDelay: 0.1,\r\n\tprePopOoc: true,\r\n});\r\n\r\nexport const DefaultOptions = FeralDruidOptions.create({\r\n\tlatencyMs: 100,\r\n\tassumeBleedActive: true,\r\n});\r\n\r\nexport const DefaultConsumes = Consumes.create({\r\n\tflask: Flask.FlaskOfRelentlessAssault,\r\n\tfood: Food.FoodGrilledMudfish,\r\n\tdefaultPotion: Potions.PotionOfSpeed,\r\n\tweaponMain: WeaponImbue.ImbueAdamantiteWeightStone,\r\n});\r\n\r\nexport const ROTATION_PRESET_LEGACY_DEFAULT = {\r\n\tname: 'Legacy Default',\r\n\trotation: SavedRotation.create({\r\n\t\tspecRotationOptionsJson: FeralDruidRotation.toJsonString(DefaultRotation),\r\n\t}),\r\n}\r\n\r\nexport const PreRaid_PRESET = {\r\n\tname: 'PreRaid',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t{\"id\":42550,\"enchant\":3817,\"gems\":[41398,39996]},\r\n\t\t{\"id\":40678},\r\n\t\t{\"id\":37139,\"enchant\":3808,\"gems\":[39996]},\r\n\t\t{\"id\":37840,\"enchant\":3605},\r\n\t\t{\"id\":37219,\"enchant\":3832},\r\n\t\t{\"id\":44203,\"enchant\":3845,\"gems\":[0]},\r\n\t\t{\"id\":37409,\"enchant\":3604,\"gems\":[0]},\r\n\t\t{\"id\":40694,\"gems\":[49110,39996]},\r\n\t\t{\"id\":37644,\"enchant\":3823},\r\n\t\t{\"id\":44297,\"enchant\":3606},\r\n\t\t{\"id\":37642},\r\n\t\t{\"id\":37624},\r\n\t\t{\"id\":40684},\r\n\t\t{\"id\":37166},\r\n\t\t{\"id\":37883,\"enchant\":3827},\r\n\t\t{},\r\n\t\t{\"id\":40713}\r\n  ]}`),\r\n};\r\n","import { RaidBuffs } from '../core/proto/common.js';\r\nimport { PartyBuffs } from '../core/proto/common.js';\r\nimport { IndividualBuffs } from '../core/proto/common.js';\r\nimport { Debuffs } from '../core/proto/common.js';\r\nimport { Spec } from '../core/proto/common.js';\r\nimport { Stat, PseudoStat } from '../core/proto/common.js';\r\nimport { TristateEffect } from '../core/proto/common.js'\r\nimport { Stats } from '../core/proto_utils/stats.js';\r\nimport { Player } from '../core/player.js';\r\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\r\nimport { EventID, TypedEvent } from '../core/typed_event.js';\r\nimport { Gear } from '../core/proto_utils/gear.js';\r\nimport { ItemSlot } from '../core/proto/common.js';\r\nimport { GemColor } from '../core/proto/common.js';\r\nimport { Profession } from '../core/proto/common.js';\r\n\r\nimport * as IconInputs from '../core/components/icon_inputs.js';\r\nimport * as OtherInputs from '../core/components/other_inputs.js';\r\nimport * as Tooltips from '../core/constants/tooltips.js';\r\n\r\nimport * as DruidInputs from './inputs.js';\r\nimport * as Presets from './presets.js';\r\nimport * as Mechanics from '../core/constants/mechanics.js';\r\n\r\nexport class FeralDruidSimUI extends IndividualSimUI<Spec.SpecFeralDruid> {\r\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecFeralDruid>) {\r\n\t\tsuper(parentElem, player, {\r\n\t\t\tcssClass: 'feral-druid-sim-ui',\r\n\t\t\tcssScheme: 'druid',\r\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\r\n\t\t\tknownIssues: [\r\n\t\t\t],\r\n\t\t\twarnings: [\r\n\t\t\t],\r\n\r\n\t\t\t// All stats for which EP should be calculated.\r\n\t\t\tepStats: [\r\n\t\t\t\tStat.StatStrength,\r\n\t\t\t\tStat.StatAgility,\r\n\t\t\t\tStat.StatAttackPower,\r\n\t\t\t\tStat.StatMeleeHit,\r\n\t\t\t\tStat.StatMeleeCrit,\r\n\t\t\t\tStat.StatMeleeHaste,\r\n\t\t\t\tStat.StatArmorPenetration,\r\n\t\t\t\tStat.StatExpertise,\r\n\t\t\t],\r\n\t\t\tepPseudoStats: [\r\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\r\n\t\t\t],\r\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\r\n\t\t\tepReferenceStat: Stat.StatAttackPower,\r\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\r\n\t\t\tdisplayStats: [\r\n\t\t\t\tStat.StatHealth,\r\n\t\t\t\tStat.StatStrength,\r\n\t\t\t\tStat.StatAgility,\r\n\t\t\t\tStat.StatAttackPower,\r\n\t\t\t\tStat.StatMeleeHit,\r\n\t\t\t\tStat.StatMeleeCrit,\r\n\t\t\t\tStat.StatMeleeHaste,\r\n\t\t\t\tStat.StatArmorPenetration,\r\n\t\t\t\tStat.StatExpertise,\r\n\t\t\t\tStat.StatMana,\r\n\t\t\t],\r\n\r\n\t\t\tdefaults: {\r\n\t\t\t\t// Default equipped gear.\r\n\t\t\t\tgear: Presets.PreRaid_PRESET.gear,\r\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\r\n\t\t\t\tepWeights: Stats.fromMap({\r\n\t\t\t\t\t[Stat.StatStrength]: 2.40,\r\n\t\t\t\t\t[Stat.StatAgility]: 2.39,\r\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\r\n\t\t\t\t\t[Stat.StatMeleeHit]: 2.51,\r\n\t\t\t\t\t[Stat.StatMeleeCrit]: 2.23,\r\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.83,\r\n\t\t\t\t\t[Stat.StatArmorPenetration]: 2.08,\r\n\t\t\t\t\t[Stat.StatExpertise]: 2.44,\r\n\t\t\t\t}, {\r\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 16.5,\r\n\t\t\t\t}),\r\n\t\t\t\t// Default consumes settings.\r\n\t\t\t\tconsumes: Presets.DefaultConsumes,\r\n\t\t\t\t// Default rotation settings.\r\n\t\t\t\trotation: Presets.DefaultRotation,\r\n\t\t\t\t// Default talents.\r\n\t\t\t\ttalents: Presets.OmenTalents.data,\r\n\t\t\t\t// Default spec-specific settings.\r\n\t\t\t\tspecOptions: Presets.DefaultOptions,\r\n\t\t\t\t// Default raid/party buffs settings.\r\n\t\t\t\traidBuffs: RaidBuffs.create({\r\n\t\t\t\t\tarcaneBrilliance: true,\r\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\tbloodlust: true,\r\n\t\t\t\t\tmanaSpringTotem: TristateEffect.TristateEffectRegular,\r\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\tbattleShout: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\tunleashedRage: true,\r\n\t\t\t\t\ticyTalons: true,\r\n\t\t\t\t\tswiftRetribution: true,\r\n\t\t\t\t\tsanctifiedRetribution: true,\r\n\t\t\t\t}),\r\n\t\t\t\tpartyBuffs: PartyBuffs.create({\r\n\t\t\t\t\theroicPresence: true,\r\n\t\t\t\t}),\r\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\r\n\t\t\t\t\tblessingOfKings: true,\r\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t}),\r\n\t\t\t\tdebuffs: Debuffs.create({\r\n\t\t\t\t\tjudgementOfWisdom: true,\r\n\t\t\t\t\tbloodFrenzy: true,\r\n\t\t\t\t\tgiftOfArthas: true,\r\n\t\t\t\t\texposeArmor: true,\r\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\tsunderArmor: true,\r\n\t\t\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\r\n\t\t\t\t\theartOfTheCrusader: true,\r\n\t\t\t\t}),\r\n\t\t\t},\r\n\r\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\r\n\t\t\tplayerIconInputs: [\r\n\t\t\t],\r\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\r\n\t\t\trotationInputs: DruidInputs.FeralDruidRotationConfig,\r\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\r\n\t\t\tincludeBuffDebuffInputs: [\r\n\t\t\t\tIconInputs.IntellectBuff,\r\n\t\t\t\tIconInputs.MP5Buff,\r\n\t\t\t\tIconInputs.JudgementOfWisdom,\r\n\t\t\t],\r\n\t\t\texcludeBuffDebuffInputs: [\r\n\t\t\t],\r\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\r\n\t\t\totherInputs: {\r\n\t\t\t\tinputs: [\r\n\t\t\t\t\tDruidInputs.LatencyMs,\r\n\t\t\t\t\tDruidInputs.AssumeBleedActive,\r\n\t\t\t\t\tOtherInputs.TankAssignment,\r\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tencounterPicker: {\r\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\r\n\t\t\t\tshowExecuteProportion: false,\r\n\t\t\t},\r\n\r\n\t\t\tpresets: {\r\n\t\t\t\t// Preset talents that the user can quickly select.\r\n\t\t\t\ttalents: [\r\n\t\t\t\t\tPresets.OmenTalents,\r\n\t\t\t\t\tPresets.BerserkTalents,\r\n\t\t\t\t],\r\n\t\t\t\trotations: [\r\n\t\t\t\t\tPresets.ROTATION_PRESET_LEGACY_DEFAULT,\r\n\t\t\t\t],\r\n\t\t\t\t// Preset gear configurations that the user can quickly select.\r\n\t\t\t\tgear: [\r\n\t\t\t\t\tPresets.PreRaid_PRESET,\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t//this.addOptimizeGemsAction();\r\n\t}\r\n\r\n\taddOptimizeGemsAction() {\r\n\t\tthis.addAction('Suggest Gems', 'optimize-gems-action', async () => {\r\n\t\t\tthis.optimizeGems();\r\n\t\t});\r\n\t}\r\n\r\n\tasync optimizeGems() {\r\n\t\t// First, clear all existing gems\r\n\t\tlet optimizedGear = this.player.getGear().withoutGems();\r\n\r\n\t\t// Next, socket the meta\r\n\t\toptimizedGear = optimizedGear.withMetaGem(this.sim.db.lookupGem(41398));\r\n\r\n\t\t// Next, socket a Nightmare Tear in the best blue socket bonus\r\n\t\tconst epWeights = this.player.getEpWeights();\r\n\t\tlet tearColor = GemColor.GemColorBlue;\r\n\t\tlet tearSlot = this.findBlueTearSlot(optimizedGear, epWeights);\r\n\r\n\t\tif (tearSlot == null) {\r\n\t\t\ttearColor = GemColor.GemColorYellow;\r\n\t\t\ttearSlot = this.findYellowTearSlot(optimizedGear, epWeights);\r\n\t\t}\r\n\r\n\t\toptimizedGear = this.socketTear(optimizedGear, tearSlot, tearColor);\r\n\t\tawait this.updateGear(optimizedGear);\r\n\r\n\t\t// Next, identify all sockets where red gems will be placed\r\n\t\tconst redSockets = this.findSocketsByColor(optimizedGear, epWeights, GemColor.GemColorRed, tearSlot);\r\n\r\n\t\t// Rank order red gems to use with their associated stat caps\r\n\t\tconst redGemCaps = new Array<[number, Stats]>();\r\n\t\tconst arpTarget = this.calcArpTarget(optimizedGear);\r\n\t\tconst arpCap = new Stats().withStat(Stat.StatArmorPenetration, arpTarget + 11);\r\n\t\tredGemCaps.push([40117, arpCap]);\r\n\t\tconst expCap = new Stats().withStat(Stat.StatExpertise, 6.5 * Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION * 4 + 4);\r\n\t\tredGemCaps.push([40118, expCap]);\r\n\t\tconst critCap = this.calcCritCap(optimizedGear);\r\n\t\tredGemCaps.push([40112, critCap]);\r\n\t\tredGemCaps.push([40111, new Stats()]);\r\n\r\n\t\t// If JC, then socket 34 ArP gems in first three red sockets before proceeding\r\n\t\tlet startIdx = 0;\r\n\r\n\t\tif (this.player.hasProfession(Profession.Jewelcrafting)) {\r\n\t\t\toptimizedGear = this.optimizeJcGems(optimizedGear, redSockets, arpTarget, arpCap, critCap);\r\n\t\t\tstartIdx = 3;\r\n\t\t}\r\n\r\n\t\t// Do multiple passes to fill in red gems up their caps\r\n\t\toptimizedGear = await this.fillGemsToCaps(optimizedGear, redSockets, redGemCaps, 0, startIdx);\r\n\r\n\t\t// Now repeat the process for yellow gems\r\n\t\tconst yellowSockets = this.findSocketsByColor(optimizedGear, epWeights, GemColor.GemColorYellow, tearSlot);\r\n\t\tconst yellowGemCaps = new Array<[number, Stats]>();\r\n\t\tconst hitCap = new Stats().withStat(Stat.StatMeleeHit, 8. * Mechanics.MELEE_HIT_RATING_PER_HIT_CHANCE + 4);\r\n\t\tyellowGemCaps.push([40125, hitCap]);\r\n\t\tyellowGemCaps.push([40162, hitCap.add(expCap)]);\r\n\r\n\t\t// If a hard ArP stack configuration is detected, then allow for socketing ArP gems in weaker yellow sockets after capping Hit and Expertise\r\n\t\tif (this.detectArpStackConfiguration(arpTarget)) {\r\n\t\t\tthis.sortYellowSockets(optimizedGear, yellowSockets, epWeights, tearSlot);\r\n\t\t\tyellowGemCaps.reverse();\r\n\t\t\tyellowGemCaps.push([40117, arpCap]);\r\n\t\t}\r\n\r\n\t\t// Continue with the rest of the yellow gems otherwise\r\n\t\tyellowGemCaps.push([40148, hitCap.add(critCap)]);\r\n\t\tyellowGemCaps.push([40143, hitCap]);\r\n\t\tyellowGemCaps.push([40147, critCap]);\r\n\t\tyellowGemCaps.push([40142, critCap]);\r\n\t\tyellowGemCaps.push([40146, new Stats()]);\r\n\t\tawait this.fillGemsToCaps(optimizedGear, yellowSockets, yellowGemCaps, 0, 0);\r\n\t}\r\n\r\n\tcalcArpTarget(gear: Gear): number {\r\n\t\tlet arpTarget = 1399;\r\n\r\n\t\t// First handle ArP proc trinkets\r\n\t\tif (gear.hasTrinket(45931)) {\r\n\t\t\tarpTarget -= 751;\r\n\t\t} else if (gear.hasTrinket(40256)) {\r\n\t\t\tarpTarget -= 612;\r\n\t\t}\r\n\r\n\t\t// Then check for Executioner enchant\r\n\t\tconst weapon = gear.getEquippedItem(ItemSlot.ItemSlotMainHand);\r\n\r\n\t\tif ((weapon != null) && (weapon!.enchant != null) && (weapon!.enchant!.effectId == 3225)) {\r\n\t\t\tarpTarget -= 120;\r\n\t\t}\r\n\r\n\t\treturn arpTarget;\r\n\t}\r\n\r\n\tcalcCritCap(gear: Gear): Stats {\r\n\t\tconst baseCritCapPercentage = 77.8; // includes 3% Crit debuff\r\n\t\tlet agiProcs = 0;\r\n\r\n\t\tif (gear.hasRelic(47668)) {\r\n\t\t\tagiProcs += 200;\r\n\t\t}\r\n\r\n\t\tif (gear.hasRelic(50456)) {\r\n\t\t\tagiProcs += 44*5;\r\n\t\t}\r\n\r\n\t\tif (gear.hasTrinket(47131) || gear.hasTrinket(47464)) {\r\n\t\t\tagiProcs += 510;\r\n\t\t}\r\n\r\n\t\tif (gear.hasTrinket(47115) || gear.hasTrinket(47303)) {\r\n\t\t\tagiProcs += 450;\r\n\t\t}\r\n\r\n\t\tif (gear.hasTrinket(44253) || gear.hasTrinket(42987)) {\r\n\t\t\tagiProcs += 300;\r\n\t\t}\r\n\r\n\t\treturn new Stats().withStat(Stat.StatMeleeCrit, (baseCritCapPercentage - agiProcs*1.1*1.06*1.02/83.33) * 45.91);\r\n\t}\r\n\r\n\tasync updateGear(gear: Gear): Promise<Stats> {\r\n\t\tthis.player.setGear(TypedEvent.nextEventID(), gear);\r\n\t\tawait this.sim.updateCharacterStats(TypedEvent.nextEventID());\r\n\t\treturn Stats.fromProto(this.player.getCurrentStats().finalStats);\r\n\t}\r\n\r\n\tfindBlueTearSlot(gear: Gear, epWeights: Stats): ItemSlot | null {\r\n\t\tlet tearSlot: ItemSlot | null = null;\r\n\t\tlet maxBlueSocketBonusEP: number = 1e-8;\r\n\r\n\t\tfor (var slot of gear.getItemSlots()) {\r\n\t\t\tconst item = gear.getEquippedItem(slot);\r\n\r\n\t\t\tif (!item) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (item!.numSocketsOfColor(GemColor.GemColorBlue) != 1) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst socketBonusEP = new Stats(item.item.socketBonus).computeEP(epWeights);\r\n\r\n\t\t\tif (socketBonusEP > maxBlueSocketBonusEP) {\r\n\t\t\t\ttearSlot = slot;\r\n\t\t\t\tmaxBlueSocketBonusEP = socketBonusEP;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn tearSlot;\r\n\t}\r\n\r\n\tfindYellowTearSlot(gear: Gear, epWeights: Stats): ItemSlot | null {\r\n\t\tlet tearSlot: ItemSlot | null = null;\r\n\t\tlet maxYellowSocketBonusEP: number = 1e-8;\r\n\r\n\t\tfor (var slot of gear.getItemSlots()) {\r\n\t\t\tconst item = gear.getEquippedItem(slot);\r\n\r\n\t\t\tif (!item) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (item!.numSocketsOfColor(GemColor.GemColorBlue) != 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst numYellowSockets = item!.numSocketsOfColor(GemColor.GemColorYellow);\r\n\r\n\t\t\tif (numYellowSockets == 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst socketBonusEP = new Stats(item.item.socketBonus).computeEP(epWeights);\r\n\t\t\tconst normalizedEP = socketBonusEP / numYellowSockets;\r\n\r\n\t\t\tif (normalizedEP > maxYellowSocketBonusEP) {\r\n\t\t\t\ttearSlot = slot;\r\n\t\t\t\tmaxYellowSocketBonusEP = normalizedEP;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn tearSlot;\r\n\t}\r\n\r\n\tsocketTear(gear: Gear, tearSlot: ItemSlot | null, tearColor: GemColor): Gear {\r\n\t\tif (tearSlot != null) {\r\n\t\t\tconst tearSlotItem = gear.getEquippedItem(tearSlot);\r\n\r\n\t\t\tfor (const [socketIdx, socketColor] of tearSlotItem!.allSocketColors().entries()) {\r\n\t\t\t\tif (socketColor == tearColor) {\r\n\t\t\t\t\treturn gear.withEquippedItem(tearSlot, tearSlotItem!.withGem(this.sim.db.lookupGem(49110), socketIdx), true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn gear;\r\n\t}\r\n\r\n\tfindSocketsByColor(gear: Gear, epWeights: Stats, color: GemColor, tearSlot: ItemSlot | null): Array<[ItemSlot, number]> {\r\n\t\tconst socketList = new Array<[ItemSlot, number]>();\r\n\t\tconst isBlacksmithing = this.player.isBlacksmithing();\r\n\r\n\t\tfor (var slot of gear.getItemSlots()) {\r\n\t\t\tconst item = gear.getEquippedItem(slot);\r\n\r\n\t\t\tif (!item) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst ignoreYellowSockets = ((item!.numSocketsOfColor(GemColor.GemColorBlue) > 0) && (slot != tearSlot))\r\n\r\n\t\t\tfor (const [socketIdx, socketColor] of item!.curSocketColors(isBlacksmithing).entries()) {\r\n\t\t\t\tif (item!.hasSocketedGem(socketIdx)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet matchYellowSocket = false;\r\n\r\n\t\t\t\tif ((socketColor == GemColor.GemColorYellow) && !ignoreYellowSockets) {\r\n\t\t\t\t\tmatchYellowSocket = new Stats(item.item.socketBonus).computeEP(epWeights) > 1e-8;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (((color == GemColor.GemColorYellow) && matchYellowSocket) || ((color == GemColor.GemColorRed) && !matchYellowSocket)) {\r\n\t\t\t\t\tsocketList.push([slot, socketIdx]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn socketList;\r\n\t}\r\n\r\n\tsortYellowSockets(gear: Gear, yellowSocketList: Array<[ItemSlot, number]>, epWeights: Stats, tearSlot: ItemSlot | null) {\r\n\t\tyellowSocketList.sort((a,b) => {\r\n\t\t\t// If both yellow sockets belong to the same item, then treat them equally.\r\n\t\t\tconst slot1 = a[0];\r\n\t\t\tconst slot2 = b[0];\r\n\r\n\t\t\tif (slot1 == slot2) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\t// If an item already has a Nightmare Tear socketed, then bump up any yellow sockets in it to highest priority.\r\n\t\t\tif (slot1 == tearSlot) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t\tif (slot2 == tearSlot) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\r\n\t\t\t// For all other cases, sort by the ratio of the socket bonus value divided by the number of yellow sockets required to activate it.\r\n\t\t\tconst item1 = gear.getEquippedItem(slot1);\r\n\t\t\tconst bonus1 = new Stats(item1!.item.socketBonus).computeEP(epWeights);\r\n\t\t\tconst item2 = gear.getEquippedItem(slot2);\r\n\t\t\tconst bonus2 = new Stats(item2!.item.socketBonus).computeEP(epWeights);\r\n\t\t\treturn bonus2 / item2!.numSocketsOfColor(GemColor.GemColorYellow) - bonus1 / item1!.numSocketsOfColor(GemColor.GemColorYellow);\r\n\t\t});\r\n\t}\r\n\r\n\tasync fillGemsToCaps(gear: Gear, socketList: Array<[ItemSlot, number]>, gemCaps: Array<[number, Stats]>, numPasses: number, firstIdx: number): Promise<Gear> {\r\n\t\tlet updatedGear: Gear = gear;\r\n\t\tconst currentGem = this.sim.db.lookupGem(gemCaps[numPasses][0]);\r\n\r\n\t\t// On the first pass, we simply fill all sockets with the highest priority gem\r\n\t\tif (numPasses == 0) {\r\n\t\t\tfor (const [itemSlot, socketIdx] of socketList.slice(firstIdx)) {\r\n\t\t\t\tupdatedGear = updatedGear.withGem(itemSlot, socketIdx, currentGem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If we are below the relevant stat cap for the gem we just filled on the last pass, then we are finished.\r\n\t\tlet newStats = await this.updateGear(updatedGear);\r\n\t\tconst currentCap = gemCaps[numPasses][1];\r\n\r\n\t\tif (newStats.belowCaps(currentCap) || (numPasses == gemCaps.length - 1)) {\r\n\t\t\treturn updatedGear;\r\n\t\t}\r\n\r\n\t\t// If we exceeded the stat cap, then work backwards through the socket list and replace each gem with the next highest priority option until we are below the cap\r\n\t\tconst nextGem = this.sim.db.lookupGem(gemCaps[numPasses + 1][0]);\r\n\t\tconst nextCap = gemCaps[numPasses + 1][1];\r\n\t\tlet capForReplacement = currentCap.subtract(nextCap);\r\n\r\n\t\tif (currentCap.computeEP(capForReplacement) <= 0) {\r\n\t\t\tcapForReplacement = currentCap;\r\n\t\t}\r\n\r\n\t\tfor (var idx = socketList.length - 1; idx >= firstIdx; idx--) {\r\n\t\t\tif (newStats.belowCaps(capForReplacement)) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst [itemSlot, socketIdx] = socketList[idx];\r\n\t\t\tupdatedGear = updatedGear.withGem(itemSlot, socketIdx, nextGem);\r\n\t\t\tnewStats = await this.updateGear(updatedGear);\r\n\t\t}\r\n\r\n\t\t// Now run a new pass to check whether we've exceeded the next stat cap\r\n\t\tlet nextIdx = idx + 1;\r\n\r\n\t\tif (!newStats.belowCaps(currentCap)) {\r\n\t\t\tnextIdx = firstIdx;\r\n\t\t}\r\n\r\n\t\treturn await this.fillGemsToCaps(updatedGear, socketList, gemCaps, numPasses + 1, nextIdx);\r\n\t}\r\n\r\n\tcalcDistanceToArpTarget(numJcArpGems: number, passiveArp: number, numRedSockets: number, arpCap: number, arpTarget: number): number {\r\n\t\tconst numNormalArpGems = Math.max(0, Math.min(numRedSockets - 3, Math.floor((arpCap - passiveArp - 34 * numJcArpGems) / 20)));\r\n\t\tconst projectedArp = passiveArp + 34 * numJcArpGems + 20 * numNormalArpGems;\r\n\t\treturn Math.abs(projectedArp - arpTarget);\r\n\t}\r\n\r\n\toptimizeJcGems(gear: Gear, redSocketList: Array<[ItemSlot, number]>, arpTarget: number, arpCap: Stats, critCap: Stats): Gear {\r\n\t\tconst passiveStats = Stats.fromProto(this.player.getCurrentStats().finalStats);\r\n\t\tconst passiveArp = passiveStats.getStat(Stat.StatArmorPenetration);\r\n\t\tconst numRedSockets = redSocketList.length;\r\n\t\tconst arpCapValue = arpCap.getStat(Stat.StatArmorPenetration);\r\n\r\n\t\t// First determine how many of the JC gems should be 34 ArP gems\r\n\t\tconst optimalJcArpGems = [0,1,2,3].reduce((m,x)=> this.calcDistanceToArpTarget(m, passiveArp, numRedSockets, arpCapValue, arpTarget)<this.calcDistanceToArpTarget(x, passiveArp, numRedSockets, arpCapValue, arpTarget) ? m:x);\r\n\r\n\t\t// Now actually socket the gems\r\n\t\tconst belowCritCap = passiveStats.belowCaps(critCap);\r\n\t\tlet updatedGear: Gear = gear;\r\n\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tlet gemId = 42142; // Str by default\r\n\r\n\t\t\tif (i < optimalJcArpGems) {\r\n\t\t\t\tgemId = 42153;\r\n\t\t\t} else if (belowCritCap) {\r\n\t\t\t\tgemId = 42143;\r\n\t\t\t}\r\n\r\n\t\t\tupdatedGear = updatedGear.withGem(redSocketList[i][0], redSocketList[i][1], this.sim.db.lookupGem(gemId));\r\n\t\t}\r\n\r\n\t\treturn updatedGear;\r\n\t}\r\n\r\n\tdetectArpStackConfiguration(arpTarget: number): boolean {\r\n\t\tconst currentArp = Stats.fromProto(this.player.getCurrentStats().finalStats).getStat(Stat.StatArmorPenetration);\r\n\t\treturn (arpTarget > 1000) && (currentArp > 648) && (currentArp + 20 < arpTarget + 11);\r\n\t}\r\n}\r\n"],"names":["InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","type","UnitType","Player","setValue","eventID","newValue","newOptions","UnitReference","create","Unknown","index","setSpecOptions","LatencyMs","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","AssumeBleedActive","InputHelpers.makeSpecOptionsBooleanInput","ShouldShowAdvParamST","rot","getRotation","manualParams","rotationType","AplType","SingleTarget","ShouldShowAdvParamAoe","Aoe","FeralDruidRotationConfig","inputs","InputHelpers.makeRotationEnumInput","values","name","value","InputHelpers.makeRotationBooleanInput","showWhen","getTalents","omenOfClarity","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","berserk","InputHelpers.makeRotationNumberInput","float","positive","useBite","biteModeType","BiteModeType","Emperical","aplRotation","enabled","flowerWeave","percent","Analytical","OmenTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","DruidMajorGlyph","GlyphOfRip","major2","GlyphOfShred","major3","DruidMajorGlyphNone","minor1","DruidMinorGlyph","GlyphOfDash","minor2","GlyphOfTheWild","minor3","GlyphOfUnburdenedRebirth","BerserkTalents","DefaultRotation","FeralDruidRotation","FeralDruid_Rotation_AplType","bearWeaveType","FeralDruid_Rotation_BearweaveType","None","minCombosForRip","minCombosForBite","useRake","mangleSpam","FeralDruid_Rotation_BiteModeType","biteTime","berserkBiteThresh","berserkFfThresh","powerbear","minRoarOffset","ripLeeway","maintainFaerieFire","hotUptime","snekWeave","raidTargets","maxFfDelay","prePopOoc","DefaultOptions","FeralDruidOptions","latencyMs","assumeBleedActive","DefaultConsumes","Consumes","flask","Flask","FlaskOfRelentlessAssault","food","Food","FoodGrilledMudfish","defaultPotion","Potions","PotionOfSpeed","weaponMain","WeaponImbue","ImbueAdamantiteWeightStone","ROTATION_PRESET_LEGACY_DEFAULT","rotation","SavedRotation","specRotationOptionsJson","toJsonString","PreRaid_PRESET","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","gear","EquipmentSpec","fromJsonString","FeralDruidSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","epPseudoStats","PseudoStat","PseudoStatMainHandDps","epReferenceStat","displayStats","StatHealth","StatMana","defaults","Presets.PreRaid_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","Presets.DefaultRotation","talents","Presets.OmenTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","giftOfTheWild","TristateEffect","TristateEffectImproved","bloodlust","manaSpringTotem","TristateEffectRegular","strengthOfEarthTotem","battleShout","unleashedRage","icyTalons","swiftRetribution","sanctifiedRetribution","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","judgementOfWisdom","bloodFrenzy","giftOfArthas","exposeArmor","faerieFire","sunderArmor","curseOfWeakness","heartOfTheCrusader","playerIconInputs","rotationInputs","DruidInputs.FeralDruidRotationConfig","includeBuffDebuffInputs","IconInputs.IntellectBuff","IconInputs.MP5Buff","IconInputs.JudgementOfWisdom","excludeBuffDebuffInputs","otherInputs","DruidInputs.LatencyMs","DruidInputs.AssumeBleedActive","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.BerserkTalents","rotations","Presets.ROTATION_PRESET_LEGACY_DEFAULT","addOptimizeGemsAction","this","addAction","async","optimizeGems","optimizedGear","getGear","withoutGems","withMetaGem","sim","db","lookupGem","getEpWeights","tearColor","GemColor","GemColorBlue","tearSlot","findBlueTearSlot","GemColorYellow","findYellowTearSlot","socketTear","updateGear","redSockets","findSocketsByColor","GemColorRed","redGemCaps","Array","arpTarget","calcArpTarget","arpCap","withStat","push","expCap","Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION","critCap","calcCritCap","startIdx","hasProfession","Profession","Jewelcrafting","optimizeJcGems","fillGemsToCaps","yellowSockets","yellowGemCaps","hitCap","Mechanics.MELEE_HIT_RATING_PER_HIT_CHANCE","add","detectArpStackConfiguration","sortYellowSockets","reverse","hasTrinket","weapon","getEquippedItem","ItemSlot","ItemSlotMainHand","enchant","effectId","agiProcs","hasRelic","setGear","nextEventID","updateCharacterStats","fromProto","getCurrentStats","finalStats","maxBlueSocketBonusEP","slot","getItemSlots","item","numSocketsOfColor","socketBonusEP","socketBonus","computeEP","maxYellowSocketBonusEP","numYellowSockets","normalizedEP","tearSlotItem","socketIdx","socketColor","allSocketColors","entries","withEquippedItem","withGem","color","socketList","isBlacksmithing","ignoreYellowSockets","curSocketColors","hasSocketedGem","matchYellowSocket","yellowSocketList","sort","a","b","slot1","slot2","item1","bonus1","item2","gemCaps","numPasses","firstIdx","updatedGear","currentGem","itemSlot","slice","newStats","currentCap","belowCaps","length","nextGem","nextCap","capForReplacement","subtract","idx","nextIdx","calcDistanceToArpTarget","numJcArpGems","passiveArp","numRedSockets","projectedArp","Math","max","min","floor","abs","redSocketList","passiveStats","getStat","arpCapValue","optimalJcArpGems","reduce","m","x","belowCritCap","i","gemId","currentArp"],"mappings":"6bAqB6BA,EAAkE,CAC9FC,UAAW,kBACXC,GAAIC,EAASC,YAAY,OACzBC,gBAAiB,CAChB,wBAEDC,SAAWC,GAAwCA,EAAOC,iBAAiBC,iBAAiBC,MAAQC,EAASC,OAC7GC,SAAU,CAACC,EAAkBP,EAAqCQ,KAC3D,MAAAC,EAAaT,EAAOC,iBACfQ,EAAAP,gBAAkBQ,EAAcC,OAAO,CACjDR,KAAMK,EAAWJ,EAASC,OAASD,EAASQ,QAC5CC,MAAO,IAEDb,EAAAc,eAAeP,EAASE,EAAU,IAI9B,MAAAM,EAAYC,EAA6D,CACrFtB,UAAW,YACXuB,MAAO,UACPC,aAAc,0FAGFC,EAAoBC,EAA8D,CAC9F1B,UAAW,oBACXuB,MAAO,6BACPC,aAAc,6HACdpB,gBAAiB,CAAC,0BAGnB,SAASuB,EAAqBrB,GACzB,IAAAsB,EAAMtB,EAAOuB,cACjB,OAAOD,EAAIE,cAAgBF,EAAIG,cAAgBC,EAAQC,YACxD,CAEA,SAASC,EAAsB5B,GAC1B,IAAAsB,EAAMtB,EAAOuB,cACjB,OAAOD,EAAIE,cAAgBF,EAAIG,cAAgBC,EAAQG,GACxD,CAEO,MAAMC,EAA2B,CACvCC,OAAQ,CACPC,EAAiE,CAChEtC,UAAW,eACXuB,MAAO,OACPgB,OAAQ,CACP,CAAEC,KAAM,gBAAiBC,MAAOT,EAAQC,cACxC,CAAEO,KAAM,MAAOC,MAAOT,EAAQG,QAGhCO,EAA2D,CAC1D1C,UAAW,YACXuB,MAAO,uBACPC,aAAc,gCACdmB,SAAWrC,GAAwCA,EAAOsC,aAAaC,cACvEC,cAAgBxC,GAAwCyC,EAAWC,MAAM,CAAC1C,EAAO2C,sBAAuB3C,EAAO4C,yBAEhHR,EAA2D,CAC1D1C,UAAW,gBACXuB,MAAO,kBACPC,aAAc,qCACdmB,SAAWrC,GAAwCA,EAAOsC,aAAaO,QACvEL,cAAgBxC,GAAwCyC,EAAWC,MAAM,CAAC1C,EAAO2C,sBAAuB3C,EAAO4C,yBAEhHR,EAA2D,CAC1D1C,UAAW,eACXuB,MAAO,6BACPC,aAAc,6EAEf4B,EAA0D,CACzDpD,UAAW,aACXuB,MAAO,eACPC,aAAc,6DACd6B,OAAO,EACPC,UAAU,EACVX,SAAWrC,GAAwCA,EAAOuB,cAAcC,eAEzEsB,EAA0D,CACzDpD,UAAW,gBACXuB,MAAO,cACPC,aAAc,sCACdmB,SAAUhB,IAEXyB,EAA0D,CACzDpD,UAAW,YACXuB,MAAO,aACPC,aAAc,yCACdmB,SAAUhB,IAEXe,EAA2D,CAC1D1C,UAAW,UACXuB,MAAO,WACPC,aAAc,2BACdmB,SAAUhB,IAEXe,EAA2D,CAC1D1C,UAAW,UACXuB,MAAO,uBACPC,aAAc,mDACdmB,SAAUhB,IAEXyB,EAA0D,CACzDpD,UAAW,WACXuB,MAAO,YACPC,aAAc,kCACdmB,SAAWrC,GACVqB,EAAqBrB,IAA2C,GAAhCA,EAAOuB,cAAc0B,SAAmBjD,EAAOuB,cAAc2B,cAAgBC,EAAaC,YAE5HhB,EAA2D,CAC1D1C,UAAW,cACXuB,MAAO,eACPC,aAAc,kDACdmB,SAAUT,IAEXkB,EAA0D,CACzDhD,gBAAiB,CAAC,eAClBJ,UAAW,cACXuB,MAAO,oBACPC,aAAc,mHACdmB,SAAWrC,GAAwCA,EAAOqD,YAAYC,SAAY1B,EAAsB5B,IAA+C,GAApCA,EAAOuB,cAAcgC,cAYzIT,EAA0D,CACzDpD,UAAW,YACXuB,MAAO,wBACPC,aAAc,+DACdsC,SAAS,EACTnB,SAAWrC,GAAwE,GAAhCA,EAAOuB,cAAc0B,SAAmBjD,EAAOuB,cAAc2B,cAAgBC,EAAaM,eClInIC,EAAc,CAC1BxB,KAAM,OACNyB,KAAMC,EAAajD,OAAO,CACzBkD,cAAe,yCACfC,OAAQC,EAAOpD,OAAO,CACrBqD,OAAQC,EAAgBC,WACxBC,OAAQF,EAAgBG,aACxBC,OAAQJ,EAAgBK,oBACxBC,OAAQC,EAAgBC,YACxBC,OAAQF,EAAgBG,eACxBC,OAAQJ,EAAgBK,8BAKdC,EAAiB,CAC7B5C,KAAM,UACNyB,KAAMC,EAAajD,OAAO,CACzBkD,cAAe,uCACfC,OAAQC,EAAOpD,OAAO,CACrBqD,OAAQC,EAAgBC,WACxBC,OAAQF,EAAgBG,aACxBC,OAAQJ,EAAgBK,oBACxBC,OAAQC,EAAgBC,YACxBC,OAAQF,EAAgBG,eACxBC,OAAQJ,EAAgBK,8BAKdE,EAAkBC,EAAmBrE,OAAO,CACxDc,aAAcwD,EAA4BtD,aAE1CuD,cAAeC,EAAkCC,KACjDC,gBAAiB,EACjBC,iBAAkB,EAElBC,SAAS,EACTtC,SAAS,EACTuC,YAAY,EACZtC,aAAcuC,EAAiCrC,UAC/CsC,SAAU,EACVC,kBAAmB,GACnBC,gBAAiB,GACjBC,WAAW,EACXC,cAAe,GACfC,UAAW,EACXC,oBAAoB,EACpBC,UAAW,EACXC,WAAW,EACX3C,aAAa,EACb4C,YAAa,GACbC,WAAY,GACZC,WAAW,IAGCC,GAAiBC,EAAkB5F,OAAO,CACtD6F,UAAW,IACXC,mBAAmB,IAGPC,GAAkBC,EAAShG,OAAO,CAC9CiG,MAAOC,EAAMC,yBACbC,KAAMC,EAAKC,mBACXC,cAAeC,EAAQC,cACvBC,WAAYC,EAAYC,6BAGZC,GAAiC,CAC7CtF,KAAM,iBACNuF,SAAUC,EAAc/G,OAAO,CAC9BgH,wBAAyB3C,EAAmB4C,aAAa7C,MAI9C8C,GAAiB,CAC7B3F,KAAM,UACN4F,QAASC,EACTC,KAAMC,EAAcC,eAAe,oiBCjF7B,MAAMC,WAAwBC,EACpC,WAAAC,CAAYC,EAAyBtI,GACpCuI,MAAMD,EAAYtI,EAAQ,CACzBwI,SAAU,qBACVC,UAAW,QAEXC,YAAa,GAEbC,SAAU,GAIVC,QAAS,CACRC,EAAKC,aACLD,EAAKE,YACLF,EAAKG,gBACLH,EAAKI,aACLJ,EAAKK,cACLL,EAAKM,eACLN,EAAKO,qBACLP,EAAKQ,eAENC,cAAe,CACdC,EAAWC,uBAGZC,gBAAiBZ,EAAKG,gBAEtBU,aAAc,CACbb,EAAKc,WACLd,EAAKC,aACLD,EAAKE,YACLF,EAAKG,gBACLH,EAAKI,aACLJ,EAAKK,cACLL,EAAKM,eACLN,EAAKO,qBACLP,EAAKQ,cACLR,EAAKe,UAGNC,SAAU,CAET7B,KAAM8B,GAAuB9B,KAE7B+B,UAAWC,EAAMC,QAAQ,CACxB,CAACpB,EAAKC,cAAe,IACrB,CAACD,EAAKE,aAAc,KACpB,CAACF,EAAKG,iBAAkB,EACxB,CAACH,EAAKI,cAAe,KACrB,CAACJ,EAAKK,eAAgB,KACtB,CAACL,EAAKM,gBAAiB,KACvB,CAACN,EAAKO,sBAAuB,KAC7B,CAACP,EAAKQ,eAAgB,MACpB,CACF,CAACE,EAAWC,uBAAwB,OAGrCU,SAAUC,GAEV1C,SAAU2C,EAEVC,QAASC,EAAoB3G,KAE7B4G,YAAaC,GAEbC,UAAWC,EAAU/J,OAAO,CAC3BgK,kBAAkB,EAClBC,cAAeC,EAAeC,uBAC9BC,WAAW,EACXC,gBAAiBH,EAAeI,sBAChCC,qBAAsBL,EAAeC,uBACrCK,YAAaN,EAAeC,uBAC5BM,eAAe,EACfC,WAAW,EACXC,kBAAkB,EAClBC,uBAAuB,IAExBC,WAAYC,EAAW9K,OAAO,CAC7B+K,gBAAgB,IAEjBC,gBAAiBC,EAAgBjL,OAAO,CACvCkL,iBAAiB,EACjBC,gBAAiBjB,EAAeC,yBAEjCiB,QAASC,EAAQrL,OAAO,CACvBsL,mBAAmB,EACnBC,aAAa,EACbC,cAAc,EACdC,aAAa,EACbC,WAAYxB,EAAeC,uBAC3BwB,aAAa,EACbC,gBAAiB1B,EAAeI,sBAChCuB,oBAAoB,KAKtBC,iBAAkB,GAGlBC,eAAgBC,EAEhBC,wBAAyB,CACxBC,EACAC,EACAC,GAEDC,wBAAyB,GAGzBC,YAAa,CACZlL,OAAQ,CACPmL,EACAC,EACAC,EACAC,IAGFC,gBAAiB,CAEhBC,uBAAuB,GAGxBC,QAAS,CAERnD,QAAS,CACRC,EACAmD,GAEDC,UAAW,CACVC,IAGD3F,KAAM,CACL8B,MAMJ,CAEA,qBAAA8D,GACMC,KAAAC,UAAU,eAAgB,wBAAwBC,UACtDF,KAAKG,cAAa,GAEpB,CAEA,kBAAMA,GAEL,IAAIC,EAAgBJ,KAAK7N,OAAOkO,UAAUC,cAG1CF,EAAgBA,EAAcG,YAAYP,KAAKQ,IAAIC,GAAGC,UAAU,QAG1D,MAAAxE,EAAY8D,KAAK7N,OAAOwO,eAC9B,IAAIC,EAAYC,EAASC,aACrBC,EAAWf,KAAKgB,iBAAiBZ,EAAelE,GAEpC,MAAZ6E,IACHH,EAAYC,EAASI,eACVF,EAAAf,KAAKkB,mBAAmBd,EAAelE,IAGnDkE,EAAgBJ,KAAKmB,WAAWf,EAAeW,EAAUH,SACnDZ,KAAKoB,WAAWhB,GAGtB,MAAMiB,EAAarB,KAAKsB,mBAAmBlB,EAAelE,EAAW2E,EAASU,YAAaR,GAGrFS,EAAa,IAAIC,MACjBC,EAAY1B,KAAK2B,cAAcvB,GAC/BwB,GAAS,IAAIzF,GAAQ0F,SAAS7G,EAAKO,qBAAsBmG,EAAY,IAC3EF,EAAWM,KAAK,CAAC,MAAOF,IAClB,MAAAG,GAAS,IAAI5F,GAAQ0F,SAAS7G,EAAKQ,cAAe,IAAMwG,EAAoD,EAAI,GACtHR,EAAWM,KAAK,CAAC,MAAOC,IAClB,MAAAE,EAAUjC,KAAKkC,YAAY9B,GACjCoB,EAAWM,KAAK,CAAC,MAAOG,IACxBT,EAAWM,KAAK,CAAC,MAAO,IAAI3F,IAG5B,IAAIgG,EAAW,EAEXnC,KAAK7N,OAAOiQ,cAAcC,EAAWC,iBACxClC,EAAgBJ,KAAKuC,eAAenC,EAAeiB,EAAYK,EAAWE,EAAQK,GACvEE,EAAA,GAIZ/B,QAAsBJ,KAAKwC,eAAepC,EAAeiB,EAAYG,EAAY,EAAGW,GAGpF,MAAMM,EAAgBzC,KAAKsB,mBAAmBlB,EAAelE,EAAW2E,EAASI,eAAgBF,GAC3F2B,EAAgB,IAAIjB,MACpBkB,GAAS,IAAIxG,GAAQ0F,SAAS7G,EAAKI,aAAc,EAAKwH,EAA4C,GACxGF,EAAcZ,KAAK,CAAC,MAAOa,IAC3BD,EAAcZ,KAAK,CAAC,MAAOa,EAAOE,IAAId,KAGlC/B,KAAK8C,4BAA4BpB,KACpC1B,KAAK+C,kBAAkB3C,EAAeqC,EAAevG,EAAW6E,GAChE2B,EAAcM,UACdN,EAAcZ,KAAK,CAAC,MAAOF,KAI5Bc,EAAcZ,KAAK,CAAC,MAAOa,EAAOE,IAAIZ,KACtCS,EAAcZ,KAAK,CAAC,MAAOa,IAC3BD,EAAcZ,KAAK,CAAC,MAAOG,IAC3BS,EAAcZ,KAAK,CAAC,MAAOG,IAC3BS,EAAcZ,KAAK,CAAC,MAAO,IAAI3F,UACzB6D,KAAKwC,eAAepC,EAAeqC,EAAeC,EAAe,EAAG,EAC3E,CAEA,aAAAf,CAAcxH,GACb,IAAIuH,EAAY,KAGZvH,EAAK8I,WAAW,OACNvB,GAAA,IACHvH,EAAK8I,WAAW,SACbvB,GAAA,KAId,MAAMwB,EAAS/I,EAAKgJ,gBAAgBC,EAASC,kBAMtC,OAJQ,MAAVH,GAAuC,MAAnBA,EAAQI,SAAkD,MAA7BJ,EAAQI,QAASC,WACzD7B,GAAA,KAGPA,CACR,CAEA,WAAAQ,CAAY/H,GAEX,IAAIqJ,EAAW,EAsBf,OApBIrJ,EAAKsJ,SAAS,SACLD,GAAA,KAGTrJ,EAAKsJ,SAAS,SACjBD,GAAY,MAGTrJ,EAAK8I,WAAW,QAAU9I,EAAK8I,WAAW,UACjCO,GAAA,MAGTrJ,EAAK8I,WAAW,QAAU9I,EAAK8I,WAAW,UACjCO,GAAA,MAGTrJ,EAAK8I,WAAW,QAAU9I,EAAK8I,WAAW,UACjCO,GAAA,MAGN,IAAIrH,GAAQ0F,SAAS7G,EAAKK,cAAwE,OAvB3E,KAuBoD,IAATmI,EAAa,KAAK,KAAK,OACjG,CAEA,gBAAMpC,CAAWjH,GAGhB,OAFA6F,KAAK7N,OAAOuR,QAAQ9O,EAAW+O,cAAexJ,SACxC6F,KAAKQ,IAAIoD,qBAAqBhP,EAAW+O,eACxCxH,EAAM0H,UAAU7D,KAAK7N,OAAO2R,kBAAkBC,WACtD,CAEA,gBAAA/C,CAAiB7G,EAAY+B,GAC5B,IAAI6E,EAA4B,KAC5BiD,EAA+B,KAE1B,IAAA,IAAAC,KAAQ9J,EAAK+J,eAAgB,CAC/B,MAAAC,EAAOhK,EAAKgJ,gBAAgBc,GAElC,IAAKE,EACJ,SAGD,GAAsD,GAAlDA,EAAMC,kBAAkBvD,EAASC,cACpC,SAGK,MAAAuD,EAAgB,IAAIlI,EAAMgI,EAAKA,KAAKG,aAAaC,UAAUrI,GAE7DmI,EAAgBL,IACRjD,EAAAkD,EACYD,EAAAK,EAEzB,CAEO,OAAAtD,CACR,CAEA,kBAAAG,CAAmB/G,EAAY+B,GAC9B,IAAI6E,EAA4B,KAC5ByD,EAAiC,KAE5B,IAAA,IAAAP,KAAQ9J,EAAK+J,eAAgB,CAC/B,MAAAC,EAAOhK,EAAKgJ,gBAAgBc,GAElC,IAAKE,EACJ,SAGD,GAAsD,GAAlDA,EAAMC,kBAAkBvD,EAASC,cACpC,SAGD,MAAM2D,EAAmBN,EAAMC,kBAAkBvD,EAASI,gBAE1D,GAAwB,GAApBwD,EACH,SAGK,MACAC,EADgB,IAAIvI,EAAMgI,EAAKA,KAAKG,aAAaC,UAAUrI,GAC5BuI,EAEjCC,EAAeF,IACPzD,EAAAkD,EACcO,EAAAE,EAE3B,CAEO,OAAA3D,CACR,CAEA,UAAAI,CAAWhH,EAAY4G,EAA2BH,GACjD,GAAgB,MAAZG,EAAkB,CACf,MAAA4D,EAAexK,EAAKgJ,gBAAgBpC,GAE/B,IAAA,MAAC6D,EAAWC,KAAgBF,EAAcG,kBAAkBC,UACtE,GAAIF,GAAejE,EAClB,OAAOzG,EAAK6K,iBAAiBjE,EAAU4D,EAAcM,QAAQjF,KAAKQ,IAAIC,GAAGC,UAAU,OAAQkE,IAAY,EAG1G,CAEO,OAAAzK,CACR,CAEA,kBAAAmH,CAAmBnH,EAAY+B,EAAkBgJ,EAAiBnE,GAC3D,MAAAoE,EAAa,IAAI1D,MACjB2D,EAAkBpF,KAAK7N,OAAOiT,kBAE3B,IAAA,IAAAnB,KAAQ9J,EAAK+J,eAAgB,CAC/B,MAAAC,EAAOhK,EAAKgJ,gBAAgBc,GAElC,IAAKE,EACJ,SAGD,MAAMkB,EAAwBlB,EAAMC,kBAAkBvD,EAASC,cAAgB,GAAOmD,GAAQlD,EAEnF,IAAA,MAAC6D,EAAWC,KAAgBV,EAAMmB,gBAAgBF,GAAiBL,UAAW,CACpF,GAAAZ,EAAMoB,eAAeX,GACxB,SAGD,IAAIY,GAAoB,EAEnBX,GAAehE,EAASI,gBAAoBoE,IAC5BG,EAAA,IAAIrJ,EAAMgI,EAAKA,KAAKG,aAAaC,UAAUrI,GAAa,OAGvEgJ,GAASrE,EAASI,gBAAmBuE,GAAwBN,GAASrE,EAASU,cAAiBiE,IACrGL,EAAWrD,KAAK,CAACmC,EAAMW,GAEzB,CACD,CAEO,OAAAO,CACR,CAEA,iBAAApC,CAAkB5I,EAAYsL,EAA6CvJ,EAAkB6E,GAC3E0E,EAAAC,MAAK,CAACC,EAAEC,KAExB,MAAMC,EAAQF,EAAE,GACVG,EAAQF,EAAE,GAEhB,GAAIC,GAASC,EACL,OAAA,EAIR,GAAID,GAAS9E,EACL,OAAA,EAGR,GAAI+E,GAAS/E,EACL,OAAA,EAIF,MAAAgF,EAAQ5L,EAAKgJ,gBAAgB0C,GAC7BG,EAAS,IAAI7J,EAAM4J,EAAO5B,KAAKG,aAAaC,UAAUrI,GACtD+J,EAAQ9L,EAAKgJ,gBAAgB2C,GAE5B,OADQ,IAAI3J,EAAM8J,EAAO9B,KAAKG,aAAaC,UAAUrI,GAC5C+J,EAAO7B,kBAAkBvD,EAASI,gBAAkB+E,EAASD,EAAO3B,kBAAkBvD,EAASI,eAAc,GAE/H,CAEA,oBAAMuB,CAAerI,EAAYgL,EAAuCe,EAAiCC,EAAmBC,GAC3H,IAAIC,EAAoBlM,EACxB,MAAMmM,EAAatG,KAAKQ,IAAIC,GAAGC,UAAUwF,EAAQC,GAAW,IAG5D,GAAiB,GAAbA,EACH,IAAA,MAAYI,EAAU3B,KAAcO,EAAWqB,MAAMJ,GACpDC,EAAcA,EAAYpB,QAAQsB,EAAU3B,EAAW0B,GAKzD,IAAIG,QAAiBzG,KAAKoB,WAAWiF,GAC/B,MAAAK,EAAaR,EAAQC,GAAW,GAEtC,GAAIM,EAASE,UAAUD,IAAgBP,GAAaD,EAAQU,OAAS,EAC7D,OAAAP,EAIF,MAAAQ,EAAU7G,KAAKQ,IAAIC,GAAGC,UAAUwF,EAAQC,EAAY,GAAG,IACvDW,EAAUZ,EAAQC,EAAY,GAAG,GACnC,IAAAY,EAAoBL,EAAWM,SAASF,GAExCJ,EAAWnC,UAAUwC,IAAsB,IAC1BA,EAAAL,GAGrB,IAAA,IAASO,EAAM9B,EAAWyB,OAAS,EAAGK,GAAOb,IACxCK,EAASE,UAAUI,GAD+BE,IAAO,CAK7D,MAAOV,EAAU3B,GAAaO,EAAW8B,GACzCZ,EAAcA,EAAYpB,QAAQsB,EAAU3B,EAAWiC,GAC5CJ,QAAMzG,KAAKoB,WAAWiF,EAClC,CAGA,IAAIa,EAAUD,EAAM,EAMb,OAJFR,EAASE,UAAUD,KACbQ,EAAAd,SAGEpG,KAAKwC,eAAe6D,EAAalB,EAAYe,EAASC,EAAY,EAAGe,EACnF,CAEA,uBAAAC,CAAwBC,EAAsBC,EAAoBC,EAAuB1F,EAAgBF,GACxG,MACM6F,EAAeF,EAAa,GAAKD,EAAe,GAD7BI,KAAKC,IAAI,EAAGD,KAAKE,IAAIJ,EAAgB,EAAGE,KAAKG,OAAO/F,EAASyF,EAAa,GAAKD,GAAgB,MAEjH,OAAAI,KAAKI,IAAIL,EAAe7F,EAChC,CAEA,cAAAa,CAAepI,EAAY0N,EAA0CnG,EAAmBE,EAAeK,GACtG,MAAM6F,EAAe3L,EAAM0H,UAAU7D,KAAK7N,OAAO2R,kBAAkBC,YAC7DsD,EAAaS,EAAaC,QAAQ/M,EAAKO,sBACvC+L,EAAgBO,EAAcjB,OAC9BoB,EAAcpG,EAAOmG,QAAQ/M,EAAKO,sBAGlC0M,EAAmB,CAAC,EAAE,EAAE,EAAE,GAAGC,QAAO,CAACC,EAAEC,IAAKpI,KAAKmH,wBAAwBgB,EAAGd,EAAYC,EAAeU,EAAatG,GAAW1B,KAAKmH,wBAAwBiB,EAAGf,EAAYC,EAAeU,EAAatG,GAAayG,EAAEC,IAGtNC,EAAeP,EAAanB,UAAU1E,GAC5C,IAAIoE,EAAoBlM,EAExB,IAAA,IAASmO,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,IAAIC,EAAQ,MAERD,EAAIL,EACCM,EAAA,MACEF,IACFE,EAAA,OAGTlC,EAAcA,EAAYpB,QAAQ4C,EAAcS,GAAG,GAAIT,EAAcS,GAAG,GAAItI,KAAKQ,IAAIC,GAAGC,UAAU6H,GACnG,CAEO,OAAAlC,CACR,CAEA,2BAAAvD,CAA4BpB,GACrB,MAAA8G,EAAarM,EAAM0H,UAAU7D,KAAK7N,OAAO2R,kBAAkBC,YAAYgE,QAAQ/M,EAAKO,sBAC1F,OAAQmG,EAAY,KAAU8G,EAAa,KAASA,EAAa,GAAK9G,EAAY,EACnF"}