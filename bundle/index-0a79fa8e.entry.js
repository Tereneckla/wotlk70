var e=Object.defineProperty,t=(t,a,s)=>(((t,a,s)=>{a in t?e(t,a,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[a]=s})(t,"symbol"!=typeof a?a+"":a,s),s);import{T as a}from"./index-0505cc07.chunk.js";import{S as s,aR as r,bB as i,b1 as n,g as l,u as o,C as c,bW as d,T as p,y as m,z as h,fe as u,aY as g,s as f,L as y,$ as S,as as I,al as b,c7 as P,ff as D,fg as k,A as E,ew as C,ev as R,fh as w,fi as v,dV as U,fj as T,eX as O,eR as A,eu as H,fk as F,f8 as W,ex as x,e$ as B,a as M,b6 as L,fl as N,aF as $,fm as G,I as j,aq as q,ak as V,fn as J,Y as z,fo as K,b5 as _,fp as X,ct as Q,fq as Y,cr as Z,cB as ee,a0 as te,bX as ae,fr as se,az as re,x as ie,bD as ne,bE as le,a8 as oe,ar as ce,e1 as de,e2 as pe,bn as me}from"./detailed_results-7b150079.chunk.js";import{a5 as he,a6 as ue,P as ge,a7 as fe,a8 as ye,a9 as Se,v as Ie,aa as be,C as Pe,ab as De,ac as ke,x as Ee,ad as Ce,ae as Re,af as we,ag as ve,ah as Ue,S as Te,ai as Oe}from"./individual_sim_ui-7ca50b32.chunk.js";import{B as Ae,D as He,P as Fe,a as We,b as xe,O as Be,c as Me}from"./sim-8e38f240.chunk.js";import{F as Le,D as Ne,O as $e,a as Ge,b as je,P as qe}from"./sim-c7cc1169.chunk.js";import{F as Ve,D as Je,S as ze,a as Ke,b as _e,P as Xe,c as Qe}from"./sim-a17199bc.chunk.js";import{R as Ye,D as Ze,C as et,a as tt,b as at,P as st,c as rt}from"./sim-98df7f32.chunk.js";import{E as it,D as nt,S as lt,a as ot,b as ct,P as dt,c as pt,d as mt,e as ht}from"./sim-8c464cc0.chunk.js";import{E as ut,D as gt,S as ft,a as yt,b as St,P as It,c as bt,d as Pt,e as Dt}from"./sim-c459e0ed.chunk.js";import{R as kt,D as Et,a as Ct,b as Rt,c as wt,P as vt,d as Ut}from"./sim-e2b94d29.chunk.js";import{H as Tt,D as Ot,B as At,a as Ht,b as Ft,M as Wt,c as xt,d as Bt,e as Mt,f as Lt,g as Nt,S as $t,h as Gt,i as jt,j as qt,k as Vt}from"./sim-80eeb09d.chunk.js";import{M as Jt,D as zt,A as Kt,a as _t,b as Xt,O as Qt,c as Yt,d as Zt,e as ea,f as ta,g as aa,F as sa,h as ra,i as ia,j as na,k as la,l as oa,m as ca,n as da,o as pa,p as ma,q as ha,r as ua,s as ga}from"./sim-5475a404.chunk.js";import{R as fa,D as ya,A as Sa,a as Ia,b as ba,P as Pa,c as Da,d as ka,C as Ea,e as Ca,f as Ra,g as wa}from"./sim-a7c86d81.chunk.js";import{H as va,D as Ua,S as Ta,a as Oa,b as Aa,P as Ha,c as Fa}from"./sim-2e65306d.chunk.js";import{P as Wa,D as xa,G as Ba,a as Ma,b as La,c as Na,d as $a}from"./sim-e4121807.chunk.js";import{R as Ga,D as ja,A as qa,a as Va,b as Ja,P as za,c as Ka,d as _a,e as Xa,f as Qa}from"./sim-c111fa99.chunk.js";import{H as Ya,D as Za,a as es,b as ts,c as as,d as ss,e as rs,f as is,g as ns,h as ls,i as os}from"./sim-32555a41.chunk.js";import{S as cs,D as ds,a as ps,b as ms,c as hs,P as us,d as gs,e as fs}from"./sim-72744bc3.chunk.js";import{S as ys,D as Ss,a as Is,b as bs,c as Ps,P as Ds}from"./sim-6ae10635.chunk.js";import{W as ks,A as Es,a as Cs,D as Rs,b as ws,P as vs,c as Us,d as Ts,e as Os,f as As,F as Hs,g as Fs,h as Ws,i as xs,j as Bs}from"./sim-0bac6dd1.chunk.js";import{P as Ms,D as Ls,S as Ns,a as $s,b as Gs,c as js,d as qs}from"./sim-881b62c8.chunk.js";import{W as Vs,A as Js,a as zs,b as Ks,D as _s,P as Xs,c as Qs,d as Ys,e as Zs,O as er,f as tr,g as ar,h as sr,i as rr,j as ir,k as nr,l as lr,m as or,n as cr,o as dr,p as pr,q as mr}from"./sim-2aebb230.chunk.js";import{T as hr}from"./sim-ffe75fb1.chunk.js";import{D as ur}from"./sim-5e5e136b.chunk.js";import"./totem_inputs-27ceb772.chunk.js";const gr={[s.SpecTankDeathknight]:(e,t)=>new hr(e,t),[s.SpecDeathknight]:(e,t)=>new ur(e,t),[s.SpecBalanceDruid]:(e,t)=>new Ae(e,t),[s.SpecFeralDruid]:(e,t)=>new Le(e,t),[s.SpecFeralTankDruid]:(e,t)=>new Ve(e,t),[s.SpecRestorationDruid]:(e,t)=>new Ye(e,t),[s.SpecElementalShaman]:(e,t)=>new it(e,t),[s.SpecEnhancementShaman]:(e,t)=>new ut(e,t),[s.SpecRestorationShaman]:(e,t)=>new kt(e,t),[s.SpecHunter]:(e,t)=>new Tt(e,t),[s.SpecMage]:(e,t)=>new Jt(e,t),[s.SpecRogue]:(e,t)=>new fa(e,t),[s.SpecHolyPaladin]:(e,t)=>new va(e,t),[s.SpecProtectionPaladin]:(e,t)=>new Wa(e,t),[s.SpecRetributionPaladin]:(e,t)=>new Ga(e,t),[s.SpecHealingPriest]:(e,t)=>new Ya(e,t),[s.SpecShadowPriest]:(e,t)=>new cs(e,t),[s.SpecSmitePriest]:(e,t)=>new ys(e,t),[s.SpecWarrior]:(e,t)=>new ks(e,t),[s.SpecProtectionWarrior]:(e,t)=>new Ms(e,t),[s.SpecWarlock]:(e,t)=>new Vs(e,t)},fr=[{spec:s.SpecBalanceDruid,rotation:He,talents:Fe.data,specOptions:We,consumes:xe,otherDefaults:Be,defaultName:"Balance",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceNightElf,[r.Horde]:i.RaceTauren},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Me.gear},[r.Horde]:{1:Me.gear}},tooltip:n[s.SpecBalanceDruid],iconUrl:l(o.ClassDruid,0)},{spec:s.SpecFeralDruid,rotation:Ne,talents:$e.data,specOptions:Ge,consumes:je,defaultName:"Cat",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceNightElf,[r.Horde]:i.RaceTauren},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:qe.gear},[r.Horde]:{1:qe.gear}},tooltip:n[s.SpecFeralDruid],iconUrl:l(o.ClassDruid,3)},{spec:s.SpecFeralTankDruid,rotation:Je,talents:ze.data,specOptions:Ke,consumes:_e,defaultName:"Bear",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceNightElf,[r.Horde]:i.RaceTauren},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Xe.gear,2:Qe.gear},[r.Horde]:{1:Xe.gear,2:Qe.gear}},tooltip:n[s.SpecFeralTankDruid],iconUrl:l(o.ClassDruid,1)},{spec:s.SpecRestorationDruid,rotation:Ze,talents:et.data,specOptions:tt,consumes:at,defaultName:"Restoration",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceNightElf,[r.Horde]:i.RaceTauren},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:st.gear,2:rt.gear},[r.Horde]:{1:st.gear,2:rt.gear}},tooltip:n[s.SpecRestorationDruid],iconUrl:l(o.ClassDruid,2)},{spec:s.SpecHunter,rotation:Ot,talents:At.data,specOptions:Ht,consumes:Ft,defaultName:"Beast Mastery",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceNightElf,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Wt.gear,2:xt.gear,3:Bt.gear,4:Mt.gear},[r.Horde]:{1:Wt.gear,2:xt.gear,3:Bt.gear,4:Mt.gear}},tooltip:"Beast Mastery Hunter",iconUrl:l(o.ClassHunter,0)},{spec:s.SpecHunter,rotation:Ot,talents:Lt.data,specOptions:Nt,consumes:Ft,defaultName:"Marksmanship",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceNightElf,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Wt.gear,2:xt.gear,3:Bt.gear,4:Mt.gear},[r.Horde]:{1:Wt.gear,2:xt.gear,3:Bt.gear,4:Mt.gear}},tooltip:"Marksmanship Hunter",iconUrl:l(o.ClassHunter,1)},{spec:s.SpecHunter,rotation:Ot,talents:$t.data,specOptions:Nt,consumes:Ft,defaultName:"Survival",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceNightElf,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Gt.gear,2:jt.gear,3:qt.gear,4:Vt.gear},[r.Horde]:{1:Gt.gear,2:jt.gear,3:qt.gear,4:Vt.gear}},tooltip:"Survival Hunter",iconUrl:l(o.ClassHunter,2)},{spec:s.SpecMage,rotation:zt,talents:Kt.data,specOptions:_t,consumes:Xt,otherDefaults:Qt,defaultName:"Arcane",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceGnome,[r.Horde]:i.RaceTroll},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Yt.gear,2:Zt.gear,3:ea.gear},[r.Horde]:{1:Yt.gear,2:Zt.gear,3:ta.gear}},tooltip:"Arcane Mage",iconUrl:l(o.ClassMage,0)},{spec:s.SpecMage,rotation:aa,talents:sa.data,specOptions:ra,consumes:ia,otherDefaults:Qt,defaultName:"TTW Fire",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceGnome,[r.Horde]:i.RaceTroll},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:na.gear,2:la.gear,3:oa.gear},[r.Horde]:{1:na.gear,2:la.gear,3:ca.gear}},tooltip:"TTW Fire Mage",iconUrl:l(o.ClassMage,1)},{spec:s.SpecMage,rotation:da,talents:pa.data,specOptions:ma,consumes:ia,otherDefaults:Qt,defaultName:"FFB Fire",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceGnome,[r.Horde]:i.RaceTroll},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:na.gear,2:ha.gear,3:ua.gear},[r.Horde]:{1:na.gear,2:ha.gear,3:ga.gear}},tooltip:"FFB Fire Mage",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/ability_mage_frostfirebolt.jpg"},{spec:s.SpecRogue,rotation:ya,talents:Sa.data,specOptions:Ia,consumes:ba,defaultName:"Assassination",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Pa.gear,2:Da.gear,3:ka.gear},[r.Horde]:{1:Pa.gear,2:Da.gear,3:ka.gear}},tooltip:"Assassination Rogue",iconUrl:l(o.ClassRogue,0)},{spec:s.SpecRogue,rotation:ya,talents:Ea.data,specOptions:Ia,consumes:ba,defaultName:"Combat",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Ca.gear,2:Ra.gear,3:wa.gear},[r.Horde]:{1:Ca.gear,2:Ra.gear,3:wa.gear}},tooltip:"Combat Rogue",iconUrl:l(o.ClassRogue,1)},{spec:s.SpecElementalShaman,rotation:nt,talents:lt.data,specOptions:ot,consumes:ct,defaultName:"Elemental",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceDraenei,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:dt.gear,2:pt.gear,3:mt.gear},[r.Horde]:{1:dt.gear,2:pt.gear,3:ht.gear}},tooltip:n[s.SpecElementalShaman],iconUrl:l(o.ClassShaman,0)},{spec:s.SpecEnhancementShaman,rotation:gt,talents:ft.data,specOptions:yt,consumes:St,defaultName:"Enhancement",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceDraenei,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:It.gear,2:bt.gear,3:Pt.gear},[r.Horde]:{1:It.gear,2:bt.gear,3:Dt.gear}},tooltip:n[s.SpecEnhancementShaman],iconUrl:l(o.ClassShaman,1)},{spec:s.SpecRestorationShaman,rotation:Et,talents:Ct.data,specOptions:Rt,consumes:wt,defaultName:"Restoration",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceDraenei,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:vt.gear,2:Ut.gear},[r.Horde]:{1:vt.gear,2:Ut.gear}},tooltip:n[s.SpecRestorationShaman],iconUrl:l(o.ClassShaman,2)},{spec:s.SpecHealingPriest,rotation:Za,talents:es.data,specOptions:ts,consumes:as,defaultName:"Discipline",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceDwarf,[r.Horde]:i.RaceUndead},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:ss.gear,2:rs.gear},[r.Horde]:{1:ss.gear,2:rs.gear}},tooltip:"Discipline Priest",iconUrl:l(o.ClassPriest,0)},{spec:s.SpecHealingPriest,rotation:is,talents:ns.data,specOptions:ts,consumes:as,defaultName:"Holy",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceDwarf,[r.Horde]:i.RaceUndead},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:ls.gear,2:os.gear},[r.Horde]:{1:ls.gear,2:os.gear}},tooltip:"Holy Priest",iconUrl:l(o.ClassPriest,1)},{spec:s.SpecShadowPriest,rotation:ds,talents:ps.data,specOptions:ms,consumes:hs,defaultName:"Shadow",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceDwarf,[r.Horde]:i.RaceUndead},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:us.gear,2:gs.gear,3:fs.gear},[r.Horde]:{1:us.gear,2:gs.gear,3:fs.gear}},tooltip:n[s.SpecShadowPriest],iconUrl:l(o.ClassPriest,2)},{spec:s.SpecSmitePriest,rotation:Ss,talents:Is.data,specOptions:bs,consumes:Ps,defaultName:"Smite",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceDwarf,[r.Horde]:i.RaceUndead},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Ds.gear,2:gs.gear},[r.Horde]:{1:Ds.gear,2:gs.gear}},tooltip:n[s.SpecSmitePriest],iconUrl:l(o.ClassPriest,3)},{spec:s.SpecWarrior,rotation:Es,talents:Cs.data,specOptions:Rs,consumes:ws,defaultName:"Arms",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:vs.gear,2:Us.gear,3:Ts.gear},[r.Horde]:{1:vs.gear,2:Us.gear,3:Os.gear}},tooltip:"Arms Warrior",iconUrl:l(o.ClassWarrior,0)},{spec:s.SpecWarrior,rotation:As,talents:Hs.data,specOptions:Rs,consumes:ws,defaultName:"Fury",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Fs.gear,2:Ws.gear,3:xs.gear},[r.Horde]:{1:Fs.gear,2:Ws.gear,3:Bs.gear}},tooltip:"Fury Warrior",iconUrl:l(o.ClassWarrior,1)},{spec:s.SpecProtectionWarrior,rotation:Ls,talents:Ns.data,specOptions:$s,consumes:Gs,defaultName:"Protection",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:js.gear,2:qs.gear},[r.Horde]:{1:js.gear,2:qs.gear}},tooltip:"Protection Warrior",iconUrl:l(o.ClassWarrior,2)},{spec:s.SpecHolyPaladin,rotation:Ua,talents:Ta.data,specOptions:Oa,consumes:Aa,defaultName:"Holy",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceBloodElf},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Ha.gear,2:Fa.gear},[r.Horde]:{1:Ha.gear,2:Fa.gear}},tooltip:"Holy Paladin",iconUrl:l(o.ClassPaladin,0)},{spec:s.SpecProtectionPaladin,rotation:xa,talents:Ba.data,specOptions:Ma,consumes:La,defaultName:"Protection",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceBloodElf},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Na.gear,2:$a.gear},[r.Horde]:{1:Na.gear,2:$a.gear}},tooltip:"Protection Paladin",iconUrl:l(o.ClassPaladin,1)},{spec:s.SpecRetributionPaladin,rotation:ja,talents:qa.data,specOptions:Va,consumes:Ja,defaultName:"Retribution",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceBloodElf},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:za.gear,2:Ka.gear,3:_a.gear,4:Xa.gear,5:Qa.gear},[r.Horde]:{1:za.gear,2:Ka.gear,3:_a.gear,4:Xa.gear,5:Qa.gear}},tooltip:"Retribution Paladin",iconUrl:l(o.ClassPaladin,2)},{spec:s.SpecWarlock,rotation:Js,talents:zs.data,specOptions:Ks,consumes:_s,defaultName:"Affliction",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:Xs.gear,2:Qs.gear,3:Ys.gear},[r.Horde]:{1:Xs.gear,2:Qs.gear,3:Zs.gear}},otherDefaults:er,tooltip:"Affliction Warlock",iconUrl:l(o.ClassWarlock,0)},{spec:s.SpecWarlock,rotation:tr,talents:ar.data,specOptions:sr,consumes:_s,defaultName:"Demonology",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:rr.gear,2:ir.gear,3:nr.gear},[r.Horde]:{1:rr.gear,2:ir.gear,3:lr.gear}},otherDefaults:er,tooltip:"Demonology Warlock",iconUrl:l(o.ClassWarlock,1)},{spec:s.SpecWarlock,rotation:or,talents:cr.data,specOptions:dr,consumes:_s,defaultName:"Destruction",defaultFactionRaces:{[r.Unknown]:i.RaceUnknown,[r.Alliance]:i.RaceHuman,[r.Horde]:i.RaceOrc},defaultGear:{[r.Unknown]:{},[r.Alliance]:{1:rr.gear,2:ir.gear,3:pr.gear},[r.Horde]:{1:rr.gear,2:ir.gear,3:mr.gear}},otherDefaults:er,tooltip:"Destruction Warlock",iconUrl:l(o.ClassWarlock,2)}],yr=[...new Set(fr.map((e=>e.spec)))],Sr=-1;class Ir extends c{constructor(e,a){super(e,"raid-picker-root"),t(this,"raidSimUI"),t(this,"raid"),t(this,"partyPickers"),t(this,"newPlayerPicker"),t(this,"currentDragPlayer",null),t(this,"currentDragPlayerFromIndex",Sr),t(this,"currentDragType",1),t(this,"currentDragParty",null),this.raidSimUI=a,this.raid=a.sim.raid;const s=document.createElement("div");s.classList.add("raid-controls"),this.rootElem.appendChild(s),this.newPlayerPicker=new kr(this.rootElem,this),new he(s,this.raidSimUI.sim.raid,{label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5},{name:"40",value:8}],changedEvent:e=>e.numActivePartiesChangeEmitter,getValue:e=>e.getNumActiveParties(),setValue:(e,t,a)=>{t.setNumActiveParties(e,a)}}),new he(s,this.newPlayerPicker,{label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:r.Alliance},{name:"Horde",value:r.Horde}],changedEvent:e=>this.raid.sim.factionChangeEmitter,getValue:e=>this.raid.sim.getFaction(),setValue:(e,t,a)=>{this.raid.sim.setFaction(e,a)}});const i=Math.min(...fr.map((e=>Math.max(...Object.keys(e.defaultGear[r.Alliance]).map((e=>parseInt(e)))))));new he(s,this.newPlayerPicker,{label:"Default Gear",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[...Array(i).keys()].map((e=>{const t=e+1;return{name:"Phase "+t,value:t}})),changedEvent:e=>this.raid.sim.phaseChangeEmitter,getValue:e=>this.raid.sim.getPhase(),setValue:(e,t,a)=>{this.raid.sim.setPhase(e,a)}});const n=document.createElement("div");n.classList.add("parties-container"),this.rootElem.appendChild(n),this.partyPickers=this.raid.getParties().map(((e,t)=>new br(n,e,t,this)));const l=()=>{this.partyPickers.forEach((e=>{e.index<this.raidSimUI.sim.raid.getNumActiveParties()?e.rootElem.classList.add("active"):e.rootElem.classList.remove("active")}))};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(l),l(),this.rootElem.ondragend=e=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(e){return this.partyPickers[Math.floor(e/ue)].playerPickers[e%ue]}getPlayerPickers(){return[...new Array(25).keys()].map((e=>this.getPlayerPicker(e)))}setDragPlayer(e,t,a){if(this.clearDragPlayer(),this.currentDragPlayer=e,this.currentDragPlayerFromIndex=t,this.currentDragType=a,t!=Sr){this.getPlayerPicker(t).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(this.currentDragPlayerFromIndex!=Sr){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=Sr,this.currentDragType=1}setDragParty(e){this.currentDragParty=e,e.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class br extends c{constructor(e,a,s,r){super(e,"party-picker-root"),t(this,"party"),t(this,"index"),t(this,"raidPicker"),t(this,"playerPickers"),this.party=a,this.index=s,this.raidPicker=r,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<label class="party-label form-label">Group ${s+1}</label>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const i=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(ue).keys()].map((e=>new Pr(i,this,e)));const n=this.rootElem.getElementsByClassName("party-results-dps")[0],l=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,s=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==a&&0==s)return n.textContent="",void(l.textContent="");n.textContent=`${a.toFixed(1)} DPS`,t?d(l,s,a,1):l.textContent=""})),this.rootElem.ondragstart=e=>{e.target==this.rootElem&&(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let o=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(o++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(o--,o<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>{e.preventDefault()},this.rootElem.ondrop=e=>{if(!this.raidPicker.currentDragParty)return;e.preventDefault(),o=0,this.rootElem.classList.remove("dragto");const t=p.nextEventID();p.freezeAllAndDo((()=>{const e=this.raidPicker.currentDragParty;for(let a=0;a<ue;a++){const s=e.playerPickers[a],r=this.playerPickers[a],i=s.player,n=r.player;s.setPlayer(t,n,3),r.setPlayer(t,i,3)}})),this.raidPicker.clearDragParty()}}}class Pr extends c{constructor(e,a,s){super(e,"player-picker-root"),t(this,"index"),t(this,"raidIndex"),t(this,"player"),t(this,"partyPicker"),t(this,"raidPicker"),t(this,"labelElem"),t(this,"iconElem"),t(this,"nameElem"),t(this,"resultsElem"),t(this,"dpsResultElem"),t(this,"referenceDeltaElem"),this.index=s,this.raidIndex=a.index*ue+s,this.player=null,this.partyPicker=a,this.raidPicker=a.raidPicker,this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on((e=>{const t=this.partyPicker.party.getPlayer(this.index);t!=this.player&&this.setPlayer(e,t,0)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,s=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=`${a.toFixed(1)} DPS`,t&&d(this.referenceDeltaElem,s,a,1))}));let r=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(r++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(r--,r<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>e.preventDefault(),this.rootElem.ondrop=e=>{if(this.raidPicker.currentDragParty)return;var t=e.dataTransfer.getData("text/plain");e.preventDefault(),r=0,this.rootElem.classList.remove("dragto");const a=p.nextEventID();p.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==t.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const e=this.raidPicker.currentDragType;if(this.raidPicker.currentDragPlayerFromIndex!=Sr){const t=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==e?t.setPlayer(a,this.player,e):2==e&&t.setPlayer(a,null,e)}else if(null==this.raidPicker.currentDragPlayer){const e=atob(t),r=new Uint8Array(e.length);for(let t=0;t<r.length;t++)r[t]=e.charCodeAt(t);const i=m.fromBinary(r);var s=new ge(h(i),this.raidPicker.raidSimUI.sim);s.fromProto(a,i),this.raidPicker.currentDragPlayer=s}4==e?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),e):this.setPlayer(a,this.raidPicker.currentDragPlayer,e),this.raidPicker.clearDragPlayer()}))},this.update()}setPlayer(e,t,a){t!=this.player&&(p.freezeAllAndDo((()=>{this.player=t,t?(this.partyPicker.party.setPlayer(e,this.index,t),1==a&&function(e,t,a){if(I(t.spec)){const s=a.getTanks(),r=s.findIndex((e=>null==a.getPlayerFromUnitReference(e)));-1==r?s.length<3&&a.setTanks(e,s.concat([t.makeUnitReference()])):(s[r]=t.makeUnitReference(),a.setTanks(e,s))}if(t.spec==s.SpecBalanceDruid){const a=t.getSpecOptions();a.innervateTarget=b(t.getRaidIndex()),t.setSpecOptions(e,a)}else if(t.spec==s.SpecSmitePriest){const a=t.getSpecOptions();a.powerInfusionTarget=b(t.getRaidIndex()),t.setSpecOptions(e,a)}else if(t.spec==s.SpecMage){const a=t.getSpecOptions();a.focusMagicTarget=b(t.getRaidIndex()),t.setSpecOptions(e,a)}}(e,t,this.raidPicker.raid)):(this.partyPicker.party.setPlayer(e,this.index,t),this.partyPicker.party.compChangeEmitter.emit(e))})),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const e=u(this.player.getClass());this.rootElem.className=`player-picker-root player bg-${e}-dampened`,this.rootElem.innerHTML=`\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t<img class="player-icon" src="${this.player.getSpecIcon()}" draggable="true" />\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass="player-name text-${e}"\n\t\t\t\t\t\t\ttype="text"\n\t\t\t\t\t\t\tvalue="${this.player.getName()}"\n\t\t\t\t\t\t\tspellcheck="false"\n\t\t\t\t\t\t\tmaxlength="15"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class="player-results hide">\n\t\t\t\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="player-options">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-edit"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Edit"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-edit fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-copy link-warning"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Drag to Copy"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-copy fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-delete link-danger"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Delete"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-times fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`,this.labelElem=this.rootElem.querySelector(".player-label"),this.iconElem=this.rootElem.querySelector(".player-icon"),this.nameElem=this.rootElem.querySelector(".player-name"),this.resultsElem=this.rootElem.querySelector(".player-results"),this.dpsResultElem=this.rootElem.querySelector(".player-results-dps"),this.referenceDeltaElem=this.rootElem.querySelector(".player-results-reference-delta"),this.bindPlayerEvents()}}bindPlayerEvents(){this.nameElem?.addEventListener("input",(e=>{this.player?.setName(p.nextEventID(),this.nameElem?.value||"")})),this.nameElem?.addEventListener("mousedown",(e=>{this.partyPicker.rootElem.setAttribute("draggable","false")})),this.nameElem?.addEventListener("mouseup",(e=>{this.partyPicker.rootElem.setAttribute("draggable","true")}));const e="Unnamed";this.nameElem?.addEventListener("focusout",(t=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value=e,this.player?.setName(p.nextEventID(),e))}));const t=(e,t)=>{if(null!=this.player){if(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.player){var a=this.player.toProto(!0);e.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...m.toBinary(a))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,t)}else e.preventDefault()},s=this.rootElem.querySelector(".player-edit"),r=this.rootElem.querySelector(".player-copy"),i=this.rootElem.querySelector(".player-delete");a.getOrCreateInstance(s),a.getOrCreateInstance(r);const n=a.getOrCreateInstance(i);this.iconElem.ondragstart=e=>{e.dataTransfer.setDragImage(this.rootElem,20,20),t(e,3)},s.onclick=e=>{new Dr(this.player)},r.ondragstart=e=>{e.dataTransfer.setDragImage(this.rootElem,20,20),t(e,4)},i.onclick=e=>{n.hide(),this.setPlayer(p.nextEventID(),null,0)}}}class Dr extends fe{constructor(e){super(document.body,"player-editor-modal",{closeButton:{fixed:!0},header:!1}),this.rootElem.id="playerEditorModal",this.body.insertAdjacentHTML("beforeend",'\n\t\t\t<div class="player-editor within-raid-sim"></div>\n\t\t');const t=this.rootElem.getElementsByClassName("player-editor")[0];gr[e.spec](t,e)}}class kr extends c{constructor(e,s){super(e,"new-player-picker-root"),t(this,"raidPicker"),this.raidPicker=s,g(o).forEach((e=>{if(e==o.ClassUnknown)return;const t=fr.filter((t=>f[t.spec]==e));if(0==t.length)return;const s=document.createElement("div");s.classList.add("class-presets-container",`bg-${u(e)}-dampened`),this.rootElem.appendChild(s),t.forEach((e=>{const t=document.createElement("fragment");t.innerHTML=`\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="${e.tooltip}"\n\t\t\t\t\t\tdata-bs-html="true"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class="preset-picker-icon player-icon" src="${e.iconUrl}"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;const r=t.children[0];s.appendChild(r),a.getOrCreateInstance(r),r.ondragstart=t=>{const a=p.nextEventID();p.freezeAllAndDo((()=>{const s=new Image;s.src=e.iconUrl,t.dataTransfer.setDragImage(s,30,30),t.dataTransfer.setData("text/plain",""),t.dataTransfer.dropEffect="copy";const r=new ge(e.spec,this.raidPicker.raid.sim);r.applySharedDefaults(a),r.setRace(a,e.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),r.setRotation(a,e.rotation),r.setTalentsString(a,e.talents.talentsString),r.setGlyphs(a,e.talents.glyphs||y.create()),r.setSpecOptions(a,e.specOptions),r.setConsumes(a,e.consumes),r.setName(a,e.defaultName),r.setProfession1(a,e.otherDefaults?.profession1||S.Engineering),r.setProfession2(a,e.otherDefaults?.profession2||S.Jewelcrafting),r.setDistanceFromTarget(a,e.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{r.setGear(a,this.raidPicker.raid.sim.db.lookupEquipmentSpec(e.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]))})),this.raidPicker.setDragPlayer(r,Sr,1)}))}}))}))}}class Er extends c{constructor(e,a){super(e,"raid-stats"),t(this,"categories");let s=[];Wr.sections.forEach((e=>{const t=document.createElement("div");t.classList.add("raid-stats-section"),this.rootElem.appendChild(t),t.innerHTML=`\n\t\t\t\t<div class="raid-stats-section-header">\n\t\t\t\t\t<label class="raid-stats-section-label form-label">${e.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class="raid-stats-section-content"></div>\n\t\t\t`;const r=t.getElementsByClassName("raid-stats-section-content")[0];e.categories.forEach((e=>{s.push(new Cr(r,a,e))}))})),this.categories=s,a.changeEmitter.on((e=>this.categories.forEach((e=>e.update()))))}}class Cr extends c{constructor(e,s,r){if(super(e,"raid-stats-category-root"),t(this,"raidSimUI"),t(this,"options"),t(this,"effects"),t(this,"counterElem"),t(this,"tooltipElem"),this.raidSimUI=s,this.options=r,this.rootElem.innerHTML=`\n\t\t\t<a href="javascript:void(0)" role="button" class="raid-stats-category">\n\t\t\t\t<span class="raid-stats-category-counter"></span>\n\t\t\t\t<span class="raid-stats-category-label">${r.label}</span>\n\t\t\t</a>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-category-counter"),this.tooltipElem=document.createElement("div"),this.tooltipElem.innerHTML=`\n\t\t\t<label class="raid-stats-category-label">${r.label}</label>\n\t\t`,this.effects=r.effects.map((e=>new Rr(this.tooltipElem,s,e))),1!=r.effects.length||r.effects[0].playerData?.class){const e=this.rootElem.querySelector(".raid-stats-category");a.getOrCreateInstance(e,{customClass:"raid-stats-category-tooltip",html:!0,placement:"right",title:this.tooltipElem})}}update(){this.effects.forEach((e=>e.update()));const e=M(this.effects.map((e=>e.count)));this.counterElem.textContent=String(e);const t=this.rootElem.querySelector(".raid-stats-category");0==e?t?.classList.remove("active"):t?.classList.add("active")}}class Rr extends c{constructor(e,a,s){if(super(e,"raid-stats-effect"),t(this,"raidSimUI"),t(this,"options"),t(this,"counterElem"),t(this,"curPlayers"),t(this,"count"),this.raidSimUI=a,this.options=s,this.curPlayers=[],this.count=0,this.rootElem.innerHTML=`\n\t\t\t<span class="raid-stats-effect-counter"></span>\n\t\t\t<img class="raid-stats-effect-icon"></img>\n\t\t\t<span class="raid-stats-effect-label">${s.label}</span>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-effect-counter"),this.options.playerData?.class){const e=this.rootElem.querySelector(".raid-stats-effect-label"),t=L(this.options.playerData.class);e.classList.add(t)}const r=this.rootElem.querySelector(".raid-stats-effect-icon");s.actionId?s.actionId.fill().then((e=>r.src=e.iconUrl)):r.remove()}update(){this.options.playerData&&(this.curPlayers=this.raidSimUI.getActivePlayers().filter((e=>this.options.playerData.condition(e))));const e=this.options.raidData&&this.options.raidData(this.raidSimUI.sim.raid);this.count=this.curPlayers.length+(e?1:0),this.counterElem.textContent=String(this.count),0==this.count?this.rootElem.classList.remove("active"):this.rootElem.classList.add("active")}}function wr(e,t){return t?!e:e}function vr(e,t){return{class:e,condition:a=>a.isClass(e)&&(!t||t(a))}}function Ur(e,t,a,s){return{class:e,condition:r=>r.isClass(e)&&wr(Boolean(r.getTalents()[t]),a)&&(!s||s(r))}}function Tr(e,t,a){return Ur(e,t,!1,a)}function Or(e,t,a){return Ur(e,t,!0,a)}function Ar(e,t,a,s){return{class:f[e],condition:r=>r.isSpec(e)&&wr(Boolean(r.getTalents()[t]),a)&&(!s||s(r))}}function Hr(e,t,a){return Ar(e,t,!1,a)}function Fr(e){return t=>Boolean(t.getBuffs()[e])}const Wr={sections:[{label:"Roles",categories:[{label:"Tanks",effects:[{label:"Tanks",playerData:{condition:e=>I(e.spec)}}]},{label:"Healers",effects:[{label:"Healers",playerData:{condition:e=>P(e.spec)}}]},{label:"Melee",effects:[{label:"Melee",playerData:{condition:e=>D(e.spec)}}]},{label:"Ranged",effects:[{label:"Ranged",playerData:{condition:e=>k(e.spec)}}]}]},{label:"Buffs",categories:[{label:"Bloodlust",effects:[{label:"Bloodlust",actionId:E.fromSpellId(2825),playerData:vr(o.ClassShaman,(e=>e.getSpecOptions().bloodlust))}]},{label:"Stats",effects:[{label:"Improved Gift of the Wild",actionId:E.fromSpellId(17051),playerData:Tr(o.ClassDruid,"improvedMarkOfTheWild")},{label:"Gift of the Wild",actionId:E.fromSpellId(48470),playerData:Or(o.ClassDruid,"improvedMarkOfTheWild")},{label:"Drums of the Wild",actionId:E.fromItemId(49634),raidData:Fr("drumsOfTheWild")}]},{label:"Stats %",effects:[{label:"Blessing of Kings",actionId:E.fromSpellId(25898),playerData:vr(o.ClassPaladin)},{label:"Drums of Forgotten Kings",actionId:E.fromItemId(49633),raidData:Fr("drumsOfForgottenKings")},{label:"Blessing of Sanctuary",actionId:E.fromSpellId(25899),playerData:vr(o.ClassPaladin)}]},{label:"Armor",effects:[{label:"Improved Devotion Aura",actionId:E.fromSpellId(20140),playerData:Tr(o.ClassPaladin,"improvedDevotionAura",(e=>e.getSpecOptions().aura==A.DevotionAura))},{label:"Devotion Aura",actionId:E.fromSpellId(48942),playerData:Or(o.ClassPaladin,"improvedDevotionAura",(e=>e.getSpecOptions().aura==A.DevotionAura))},{label:"Improved Stoneskin Totem",actionId:E.fromSpellId(16293),playerData:Tr(o.ClassShaman,"guardianTotems",(e=>e.getSpecOptions().totems?.earth==H.StoneskinTotem))},{label:"Stoneskin Totem",actionId:E.fromSpellId(58753),playerData:Or(o.ClassShaman,"guardianTotems",(e=>e.getSpecOptions().totems?.earth==H.StoneskinTotem))},{label:"Scroll of Protection",actionId:E.fromItemId(43468),raidData:Fr("scrollOfProtection")}]},{label:"Stamina",effects:[{label:"Improved Power Word Fortitude",actionId:E.fromSpellId(14767),playerData:Tr(o.ClassPriest,"improvedPowerWordFortitude")},{label:"Power Word Fortitude",actionId:E.fromSpellId(48161),playerData:Or(o.ClassPriest,"improvedPowerWordFortitude")},{label:"Scroll of Stamina",actionId:E.fromItemId(37094),raidData:Fr("scrollOfStamina")}]},{label:"Str + Agi",effects:[{label:"Improved Strength of Earth Totem",actionId:E.fromSpellId(52456),playerData:Tr(o.ClassShaman,"enhancingTotems",(e=>e.getSpecOptions().totems?.earth==H.StrengthOfEarthTotem))},{label:"Strength of Earth Totem",actionId:E.fromSpellId(58643),playerData:Or(o.ClassShaman,"enhancingTotems",(e=>e.getSpecOptions().totems?.earth==H.StrengthOfEarthTotem))},{label:"Horn of Winter",actionId:E.fromSpellId(57623),playerData:vr(o.ClassDeathknight)},{label:"Scroll of Strength",actionId:E.fromItemId(43466),raidData:Fr("scrollOfStrength")},{label:"Scroll of Agility",actionId:E.fromItemId(43464),raidData:Fr("scrollOfAgility")}]},{label:"Intellect",effects:[{label:"Arcane Brilliance",actionId:E.fromSpellId(43002),playerData:vr(o.ClassMage)},{label:"Improved Fel Intelligence",actionId:E.fromSpellId(54038),playerData:Tr(o.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==F.Felhunter))},{label:"Fel Intelligence",actionId:E.fromSpellId(57567),playerData:Or(o.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==F.Felhunter))},{label:"Scroll of Intellect",actionId:E.fromItemId(37092),raidData:Fr("scrollOfIntellect")}]},{label:"Spirit",effects:[{label:"Divine Spirit",actionId:E.fromSpellId(48073),playerData:vr(o.ClassPriest)},{label:"Improved Fel Intelligence",actionId:E.fromSpellId(54038),playerData:Tr(o.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==F.Felhunter))},{label:"Fel Intelligence",actionId:E.fromSpellId(57567),playerData:Or(o.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==F.Felhunter))},{label:"Scroll of Spirit",actionId:E.fromItemId(37098),raidData:Fr("scrollOfSpirit")}]},{label:"Atk Pwr",effects:[{label:"Improved Blessing of Might",actionId:E.fromSpellId(20045),playerData:vr(o.ClassPaladin)},{label:"Blessing of Might",actionId:E.fromSpellId(48934),playerData:vr(o.ClassPaladin)},{label:"Improved Battle Shout",actionId:E.fromSpellId(12861),playerData:Tr(o.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==W.WarriorShoutBattle))},{label:"Battle Shout",actionId:E.fromSpellId(47436),playerData:Or(o.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==W.WarriorShoutBattle))}]},{label:"Atk Pwr %",effects:[{label:"Abomination's Might",actionId:E.fromSpellId(53138),playerData:Tr(o.ClassDeathknight,"abominationsMight")},{label:"Unleashed Rage",actionId:E.fromSpellId(30809),playerData:Tr(o.ClassShaman,"unleashedRage")},{label:"Trueshot Aura",actionId:E.fromSpellId(19506),playerData:Tr(o.ClassHunter,"trueshotAura")}]},{label:"Damage %",effects:[{label:"Sanctified Retribution",actionId:E.fromSpellId(31869),playerData:Tr(o.ClassPaladin,"sanctifiedRetribution")},{label:"Arcane Empowerment",actionId:E.fromSpellId(31583),playerData:Tr(o.ClassMage,"arcaneEmpowerment")},{label:"Ferocious Inspiration",actionId:E.fromSpellId(34460),playerData:Tr(o.ClassHunter,"ferociousInspiration")}]},{label:"Mit %",effects:[{label:"Renewed Hope",actionId:E.fromSpellId(57472),playerData:Tr(o.ClassPriest,"renewedHope")},{label:"Blessing Of Sanctuary",actionId:E.fromSpellId(25899),playerData:vr(o.ClassPaladin)},{label:"Vigilance",actionId:E.fromSpellId(50720),playerData:Tr(o.ClassWarrior,"vigilance")}]},{label:"Haste %",effects:[{label:"Swift Retribution",actionId:E.fromSpellId(53648),playerData:Tr(o.ClassPaladin,"swiftRetribution")},{label:"Improved Moonkin Form",actionId:E.fromSpellId(48396),playerData:Tr(o.ClassDruid,"improvedMoonkinForm")}]},{label:"MP5",effects:[{label:"Improved Blessing of Wisdom",actionId:E.fromSpellId(20245),playerData:Tr(o.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Blessing of Wisdom",actionId:E.fromSpellId(48938),playerData:Or(o.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Improved Mana Spring Totem",actionId:E.fromSpellId(16206),playerData:Tr(o.ClassShaman,"restorativeTotems",(e=>e.getSpecOptions().totems?.water==x.ManaSpringTotem))},{label:"Mana Spring Totem",actionId:E.fromSpellId(58774),playerData:Or(o.ClassShaman,"restorativeTotems",(e=>e.getSpecOptions().totems?.water==x.ManaSpringTotem))}]},{label:"Melee Crit",effects:[{label:"Leader of the Pack",actionId:E.fromSpellId(17007),playerData:Tr(o.ClassDruid,"leaderOfThePack")},{label:"Rampage",actionId:E.fromSpellId(29801),playerData:Tr(o.ClassWarrior,"rampage")}]},{label:"Melee Haste",effects:[{label:"Improved Icy Talons",actionId:E.fromSpellId(55610),playerData:Tr(o.ClassDeathknight,"improvedIcyTalons")},{label:"Improved Windfury Totem",actionId:E.fromSpellId(29193),playerData:Tr(o.ClassShaman,"improvedWindfuryTotem",(e=>e.getSpecOptions().totems?.air==R.WindfuryTotem))},{label:"Windfury Totem",actionId:E.fromSpellId(65990),playerData:Or(o.ClassShaman,"improvedWindfuryTotem",(e=>e.getSpecOptions().totems?.air==R.WindfuryTotem))}]},{label:"Spell Power",effects:[{label:"Demonic Pact",actionId:E.fromSpellId(47240),playerData:Tr(o.ClassWarlock,"demonicPact")},{label:"Totem of Wrath",actionId:E.fromSpellId(57722),playerData:Tr(o.ClassShaman,"totemOfWrath",(e=>e.getSpecOptions().totems?.fire==C.TotemOfWrath))},{label:"Flametongue Totem",actionId:E.fromSpellId(58656),playerData:vr(o.ClassShaman,(e=>e.getSpecOptions().totems?.fire==C.FlametongueTotem))}]},{label:"Spell Crit",effects:[{label:"Moonkin Form",actionId:E.fromSpellId(24907),playerData:Hr(s.SpecBalanceDruid,"moonkinForm")},{label:"Elemental Oath",actionId:E.fromSpellId(51470),playerData:Tr(o.ClassShaman,"elementalOath")}]},{label:"Spell Haste",effects:[{label:"Wrath of Air Totem",actionId:E.fromSpellId(3738),playerData:vr(o.ClassShaman,(e=>e.getSpecOptions().totems?.air==R.WrathOfAirTotem))}]},{label:"Health",effects:[{label:"Improved Commanding Shout",actionId:E.fromSpellId(12861),playerData:Tr(o.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==W.WarriorShoutCommanding))},{label:"Commanding Shout",actionId:E.fromSpellId(47440),playerData:Or(o.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==W.WarriorShoutCommanding))},{label:"Improved Imp",actionId:E.fromSpellId(18696),playerData:Tr(o.ClassWarlock,"improvedImp",(e=>e.getSpecOptions().summon==F.Imp))},{label:"Blood Pact",actionId:E.fromSpellId(47982),playerData:Or(o.ClassWarlock,"improvedImp",(e=>e.getSpecOptions().summon==F.Imp))}]},{label:"Replenishment",effects:[{label:"Vampiric Touch",actionId:E.fromSpellId(48160),playerData:Hr(s.SpecShadowPriest,"vampiricTouch")},{label:"Judgements of the Wise",actionId:E.fromSpellId(31878),playerData:Hr(s.SpecRetributionPaladin,"judgementsOfTheWise")},{label:"Hunting Party",actionId:E.fromSpellId(53292),playerData:Hr(s.SpecHunter,"huntingParty")},{label:"Improved Soul Leech",actionId:E.fromSpellId(54118),playerData:Hr(s.SpecWarlock,"improvedSoulLeech")},{label:"Enduring Winter",actionId:E.fromSpellId(44561),playerData:Hr(s.SpecMage,"enduringWinter")}]}]},{label:"External Buffs",categories:[{label:"Innervate",effects:[{label:"Innervate",actionId:E.fromSpellId(29166),playerData:vr(o.ClassDruid)}]},{label:"Power Infusion",effects:[{label:"Power Infusion",actionId:E.fromSpellId(10060),playerData:Tr(o.ClassPriest,"powerInfusion")}]},{label:"Focus Magic",effects:[{label:"Focus Magic",actionId:E.fromSpellId(54648),playerData:Tr(o.ClassMage,"focusMagic")}]},{label:"Tricks of the Trade",effects:[{label:"Tricks of the Trade",actionId:E.fromSpellId(57933),playerData:vr(o.ClassRogue)}]},{label:"Unholy Frenzy",effects:[{label:"Unholy Frenzy",actionId:E.fromSpellId(49016),playerData:Tr(o.ClassDeathknight,"hysteria")}]},{label:"Pain Suppression",effects:[{label:"Pain Suppression",actionId:E.fromSpellId(33206),playerData:Tr(o.ClassPriest,"painSuppression")}]},{label:"Divine Guardian",effects:[{label:"Divine Guardian",actionId:E.fromSpellId(53530),playerData:Tr(o.ClassPaladin,"divineGuardian")}]}]},{label:"DPS Debuffs",categories:[{label:"Major ArP",effects:[{label:"Sunder Armor",actionId:E.fromSpellId(47467),playerData:vr(o.ClassWarrior,(e=>e.isSpec(s.SpecProtectionWarrior)||e.getRotation().sunderArmor==w.SunderArmorMaintain))},{label:"Expose Armor",actionId:E.fromSpellId(8647),playerData:vr(o.ClassRogue,(e=>e.getRotation().exposeArmorFrequency==v.Maintain))},{label:"Acid Spit",actionId:E.fromSpellId(55754),playerData:vr(o.ClassHunter,(e=>e.getSpecOptions().petType==U.Worm))}]},{label:"Minor ArP",effects:[{label:"Faerie Fire",actionId:E.fromSpellId(770),playerData:vr(o.ClassDruid,(e=>e.spec==s.SpecFeralTankDruid||e.spec!=s.SpecRestorationDruid&&e.getRotation().maintainFaerieFire))},{label:"Curse of Weakness",actionId:E.fromSpellId(50511),playerData:vr(o.ClassWarlock,(e=>e.getRotation().curse==T.Weakness))},{label:"Sting",actionId:E.fromSpellId(56631),playerData:vr(o.ClassHunter,(e=>e.getSpecOptions().petType==U.Wasp))},{label:"Spore Cloud",actionId:E.fromSpellId(53598),playerData:vr(o.ClassHunter,(e=>e.getSpecOptions().petType==U.Bat))}]},{label:"Phys Vuln",effects:[{label:"Blood Frenzy",actionId:E.fromSpellId(29859),playerData:Tr(o.ClassWarrior,"bloodFrenzy")},{label:"Savage Combat",actionId:E.fromSpellId(58413),playerData:Tr(o.ClassRogue,"savageCombat")}]},{label:"Bleed",effects:[{label:"Mangle",actionId:E.fromSpellId(16862),playerData:vr(o.ClassDruid,(e=>[s.SpecFeralDruid,s.SpecFeralTankDruid].includes(e.spec)))},{label:"Trauma",actionId:E.fromSpellId(46855),playerData:Tr(o.ClassWarrior,"trauma")},{label:"Stampede",actionId:E.fromSpellId(57393),playerData:vr(o.ClassHunter,(e=>e.getSpecOptions().petType==U.Rhino))}]},{label:"Crit",effects:[{label:"Totem of Wrath",actionId:E.fromSpellId(30706),playerData:Tr(o.ClassShaman,"totemOfWrath",(e=>e.getSpecOptions().totems?.fire==C.TotemOfWrath))},{label:"Heart of the Crusader",actionId:E.fromSpellId(20337),playerData:Tr(o.ClassPaladin,"heartOfTheCrusader",(e=>[s.SpecRetributionPaladin,s.SpecProtectionPaladin].includes(e.spec)))},{label:"Master Poisoner",actionId:E.fromSpellId(58410),playerData:Tr(o.ClassRogue,"masterPoisoner")}]},{label:"Spell Crit",effects:[{label:"Improved Shadow Bolt",actionId:E.fromSpellId(17803),playerData:Tr(o.ClassWarlock,"improvedShadowBolt")},{label:"Improved Scorch",actionId:E.fromSpellId(12873),playerData:Tr(o.ClassMage,"improvedScorch",(e=>{const t=e.getRotation();return t.type==B.Fire&&t.maintainImprovedScorch}))},{label:"Winter's Chill",actionId:E.fromSpellId(28593),playerData:Tr(o.ClassMage,"wintersChill",(e=>e.getRotation().type==B.Frost))}]},{label:"Spell Hit",effects:[{label:"Misery",actionId:E.fromSpellId(33198),playerData:Hr(s.SpecShadowPriest,"misery")},{label:"Improved Faerie Fire",actionId:E.fromSpellId(33602),playerData:Hr(s.SpecBalanceDruid,"improvedFaerieFire")}]},{label:"Spell Dmg",effects:[{label:"Ebon Plaguebringer",actionId:E.fromSpellId(51161),playerData:Tr(o.ClassDeathknight,"ebonPlaguebringer")},{label:"Earth and Moon",actionId:E.fromSpellId(48511),playerData:Hr(s.SpecBalanceDruid,"earthAndMoon")},{label:"Curse of Elements",actionId:E.fromSpellId(47865),playerData:vr(o.ClassWarlock,(e=>e.getRotation().curse==T.Elements))}]}]},{label:"Mitigation Debuffs",categories:[{label:"Atk Pwr",effects:[{label:"Vindication",actionId:E.fromSpellId(26016),playerData:Tr(o.ClassPaladin,"vindication",(e=>[s.SpecRetributionPaladin,s.SpecProtectionPaladin].includes(e.spec)))},{label:"Improved Demoralizing Shout",actionId:E.fromSpellId(12879),playerData:Tr(o.ClassWarrior,"improvedDemoralizingShout",(e=>e.spec==s.SpecWarrior&&e.getRotation().maintainDemoShout||e.spec==s.SpecProtectionWarrior&&0!=e.getRotation().demoShoutChoice))},{label:"Demoralizing Shout",actionId:E.fromSpellId(47437),playerData:Or(o.ClassWarrior,"improvedDemoralizingShout",(e=>e.spec==s.SpecWarrior&&e.getRotation().maintainDemoShout||e.spec==s.SpecProtectionWarrior&&0!=e.getRotation().demoShoutChoice))},{label:"Improved Demoralizing Roar",actionId:E.fromSpellId(16862),playerData:Hr(s.SpecFeralTankDruid,"feralAggression",(e=>e.getRotation().maintainDemoralizingRoar))},{label:"Demoralizing Roar",actionId:E.fromSpellId(48560),playerData:(xr=s.SpecFeralTankDruid,Br="feralAggression",Mr=e=>e.getRotation().maintainDemoralizingRoar,Ar(xr,Br,!0,Mr))},{label:"Improved Curse of Weakness",actionId:E.fromSpellId(18180),playerData:Tr(o.ClassWarlock,"improvedCurseOfWeakness",(e=>e.getRotation().curse==T.Weakness))},{label:"Curse of Weakness",actionId:E.fromSpellId(50511),playerData:Tr(o.ClassWarlock,"improvedCurseOfWeakness",(e=>e.getRotation().curse==T.Weakness))},{label:"Demoralizing Screech",actionId:E.fromSpellId(55487),playerData:vr(o.ClassHunter,(e=>e.getSpecOptions().petType==U.CarrionBird))}]},{label:"Atk Speed",effects:[{label:"Improved Thunder Clap",actionId:E.fromSpellId(12666),playerData:Tr(o.ClassWarrior,"improvedThunderClap",(e=>e.spec==s.SpecWarrior&&e.getRotation().maintainThunderClap||e.spec==s.SpecProtectionWarrior&&0!=e.getRotation().thunderClapChoice))},{label:"Thunder Clap",actionId:E.fromSpellId(47502),playerData:Or(o.ClassWarrior,"improvedThunderClap",(e=>e.spec==s.SpecWarrior&&e.getRotation().maintainThunderClap||e.spec==s.SpecProtectionWarrior&&0!=e.getRotation().thunderClapChoice))},{label:"Improved Frost Fever",actionId:E.fromSpellId(51456),playerData:Tr(o.ClassDeathknight,"improvedIcyTouch")},{label:"Frost Fever",actionId:E.fromSpellId(51456),playerData:Or(o.ClassDeathknight,"improvedIcyTouch")},{label:"Judgements of the Just",actionId:E.fromSpellId(53696),playerData:Tr(o.ClassPaladin,"judgementsOfTheJust")},{label:"Infected Wounds",actionId:E.fromSpellId(48485),playerData:Tr(o.ClassDruid,"infectedWounds",(e=>[s.SpecFeralDruid,s.SpecFeralTankDruid].includes(e.spec)))}]},{label:"Miss",effects:[{label:"Insect Swarm",actionId:E.fromSpellId(65855),playerData:Hr(s.SpecBalanceDruid,"insectSwarm")},{label:"Scorpid Sting",actionId:E.fromSpellId(3043),playerData:vr(o.ClassHunter,(e=>e.getRotation().sting==O.ScorpidSting))}]}]}]};var xr,Br,Mr;class Lr extends ye{constructor(e,a){super(e,a,{identifier:"raid-tab",title:"Raid"}),t(this,"simUI"),t(this,"leftPanel"),t(this,"rightPanel"),this.simUI=a,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new Ir(this.leftPanel,this.simUI),new Er(this.leftPanel,this.simUI);const e=new Se(this.rightPanel,this.simUI,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:e=>N.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker.getAssignments(),faction:this.simUI.sim.getFaction(),phase:this.simUI.sim.getPhase()}),setData:(e,t,a)=>{p.freezeAllAndDo((()=>{this.simUI.sim.raid.fromProto(e,a.raid||$.create()),this.simUI.blessingsPicker.setAssignments(e,a.blessings||G.create()),a.faction&&this.simUI.sim.setFaction(e,a.faction),a.phase&&this.simUI.sim.setPhase(e,a.phase)}))},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(e,t)=>N.equals(e,t),toJson:e=>N.toJson(e),fromJson:e=>N.fromJson(e)});this.simUI.sim.waitForInit().then((()=>{e.loadUserData()}))}}class Nr extends j{constructor(e,a,s,r){super(e,"raid-target-picker-root",s,r),t(this,"config"),t(this,"raid"),t(this,"curPlayer"),t(this,"curUnitReference"),t(this,"currentOptions"),t(this,"buttonElem"),t(this,"dropdownElem"),this.rootElem.classList.add("dropdown"),this.config=r,this.raid=a,this.curPlayer=this.raid.getPlayerFromUnitReference(r.getValue(s)),this.curUnitReference=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<a\n\t\t\t\tclass="raid-target-picker-button"\n\t\t\t\thref="javascript:void(0)"\n\t\t\t\trole="button"\n\t\t\t\tdata-bs-toggle="dropdown"\n\t\t\t></a>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",(e=>e.preventDefault())),this.currentOptions=[],this.updateOptions(p.nextEventID()),r.compChangeEmitter.on((e=>this.updateOptions(e))),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter((e=>null!=e)).map((e=>({player:e,isDropdown:!0})))]}updateOptions(e){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((e=>this.dropdownElem.appendChild(this.makeOption(e))));const t=this.curUnitReference;this.curUnitReference=this.getInputValue(),q.equals(t,this.curUnitReference)?this.setInputValue(this.curUnitReference):this.inputChanged(e)}makeOption(e){const t=Nr.makeOptionElem(e);return t.addEventListener("click",(t=>{t.preventDefault(),this.curPlayer=e.player,this.curUnitReference=this.getInputValue(),this.inputChanged(p.nextEventID())})),t}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeUnitReference():V()}setInputValue(e){this.curUnitReference=q.clone(e),this.curPlayer=this.raid.getPlayerFromUnitReference(this.curUnitReference);const t=this.currentOptions.find((e=>e.player==this.curPlayer));t&&(this.buttonElem.innerHTML=Nr.makeOptionElem({player:t.player}).outerHTML)}static makeOptionElem(e){const t=e.player?u(e.player.getClass()):"";let a=document.createElement("fragment");return a.innerHTML=`\n\t\t\t<div class="player ${t?`bg-${t}-dampened`:""}">\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t${e.player?`<img class="player-icon" src="${e.player.getSpecIcon()}" draggable="false"/>`:""}\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<span class="player-name ${t?`text-${t}`:""}">\n\t\t\t\t\t\t\t${e.player?e.player.getName():"Unassigned"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,e.isDropdown&&(a.innerHTML=`\n\t\t\t\t<a class="dropdown-option" href="javascript:void(0) role="button">${a.innerHTML}</a>\n\t\t\t`),a.children[0]}}class $r extends c{constructor(e,a){super(e,"assignments-picker-root"),t(this,"raidSimUI"),t(this,"changeEmitter",new p),t(this,"innervatesPicker"),t(this,"powerInfusionsPicker"),t(this,"focusMagicsPicker"),this.raidSimUI=a,this.innervatesPicker=new jr(this.rootElem,a),this.powerInfusionsPicker=new qr(this.rootElem,a),this.focusMagicsPicker=new Vr(this.rootElem,a)}}class Gr extends c{constructor(e,a){super(e,"assigned-buff-picker-root"),t(this,"raidSimUI"),t(this,"changeEmitter",new p),t(this,"playersContainer"),t(this,"targetPickers"),this.raidSimUI=a,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on((e=>this.update())),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const e=this.getSourcePlayers();0==e.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=e.map(((e,t)=>{const a=document.createElement("div");a.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(a);let s=document.createElement("div");s.classList.add("raid-target-picker-root"),s.appendChild(Nr.makeOptionElem({player:e,isDropdown:!1})),a.appendChild(s);const r=document.createElement("i");r.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),a.appendChild(r);const i=new Nr(a,this.raidSimUI.sim.raid,e,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:e=>e.specOptionsChangeEmitter,getValue:e=>this.getPlayerValue(e),setValue:(e,t,a)=>this.setPlayerValue(e,t,a)}),n={player:e,targetPicker:i,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromUnitReference(i.getInputValue())};return i.changeEmitter.on((e=>{n.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromUnitReference(i.getInputValue())})),n}))}}class jr extends Gr{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(o.ClassDruid)))}getPlayerValue(e){return e.getSpecOptions().innervateTarget||V()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.innervateTarget=a,t.setSpecOptions(e,s)}}class qr extends Gr{getTitle(){return"Power Infusion"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(o.ClassPriest)&&e.getTalents().powerInfusion))}getPlayerValue(e){return e.getSpecOptions().powerInfusionTarget||V()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.powerInfusionTarget=a,t.setSpecOptions(e,s)}}class Vr extends Gr{getTitle(){return"Focus Magic"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(o.ClassMage)))}getPlayerValue(e){return e.getSpecOptions().focusMagicTarget||V()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.focusMagicTarget=a,t.setSpecOptions(e,s)}}class Jr extends c{constructor(e,a){super(e,"blessings-picker-root"),t(this,"simUI"),t(this,"changeEmitter",new p),t(this,"pickers",[]),t(this,"assignments"),this.simUI=a,this.assignments=G.clone(J(4));const s=X.filter((e=>yr.includes(e))).filter((e=>!be.includes(e))),r=[...Array(4).keys()];s.map((e=>{const t=document.createElement("div");t.classList.add("blessings-picker-row"),this.rootElem.appendChild(t),t.append(this.buildSpecIcon(e));const a=document.createElement("div");return a.classList.add("blessings-picker-container"),t.appendChild(a),r.forEach((t=>{this.pickers[t]||this.pickers.push([]);const s=new Ie(a,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:z[o.ClassPaladin],value:K.BlessingUnknown},{actionId:E.fromSpellId(25898),value:K.BlessingOfKings},{actionId:E.fromSpellId(27141),value:K.BlessingOfMight},{actionId:E.fromSpellId(27143),value:K.BlessingOfWisdom},{actionId:E.fromSpellId(25899),value:K.BlessingOfSanctuary}],equals:(e,t)=>e==t,zeroValue:K.BlessingUnknown,enableWhen:e=>{const a=Math.min(this.simUI.getClassCount(o.ClassPaladin),4);return t<a},changedEvent:e=>e.changeEmitter,getValue:a=>a.assignments.paladins[t]?.blessings[e]||K.BlessingUnknown,setValue:(a,s,r)=>{s.assignments.paladins[t].blessings[e]!=r&&(s.assignments.paladins[t].blessings[e]=r,this.changeEmitter.emit(a))}});this.pickers[t].push(s)})),t})),this.updatePickers(),this.simUI.compChangeEmitter.on((e=>this.updatePickers()))}updatePickers(){for(let e=0;e<4;e++)this.pickers[e].forEach((e=>e.update()))}buildSpecIcon(e){let t=document.createElement("fragment");t.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${_[e]}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const s=t.querySelector(".blessings-spec-icon");return a.getOrCreateInstance(s,{title:n[e]}),t.children[0]}getAssignments(){return G.clone(this.assignments)}setAssignments(e,t){this.assignments=G.clone(t),this.changeEmitter.emit(e)}}class zr extends c{constructor(e,a){super(e,"tanks-picker-root"),t(this,"raidSimUI"),this.raidSimUI=a;const s=this.raidSimUI.sim.raid;for(let t=0;t<4;t++){const e=document.createElement("div");e.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(e);const a=document.createElement("label");a.textContent=0==t?"Main Tank":`Tank ${t+1}`,a.classList.add("tank-picker-label","form-label"),e.appendChild(a),new Nr(e,s,s,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:s.compChangeEmitter,changedEvent:e=>e.tanksChangeEmitter,getValue:e=>e.getTanks()[t]||V(),setValue:(e,a,s)=>{const r=a.getTanks();for(let i=0;i<t;i++)r[i]||r.push(V());r[t]=s,a.setTanks(e,r)}})}}}class Kr extends ye{constructor(e,a){super(e,a,{identifier:"raid-settings-tab",title:"Settings"}),t(this,"simUI"),t(this,"leftPanel"),t(this,"rightPanel"),t(this,"column1",this.buildColumn(1,"raid-settings-col")),t(this,"column2",this.buildColumn(2,"raid-settings-col")),t(this,"column3",this.buildColumn(3,"raid-settings-col")),this.simUI=a,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildOtherSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const e=new Pe(this.column1,"encounter-settings",{header:{title:"Encounter"}});new De(e.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const e=new Pe(this.column1,"consumes-settings",{header:{title:"Consumables"}});let t=document.createElement("div");t.classList.add("consumes-container"),e.bodyElement.appendChild(t),this.makeBooleanRaidIconBuffInput(t,E.fromItemId(37094),"scrollOfStamina"),this.makeBooleanRaidIconBuffInput(t,E.fromItemId(43466),"scrollOfStrength"),this.makeBooleanRaidIconBuffInput(t,E.fromItemId(43464),"scrollOfAgility"),this.makeBooleanRaidIconBuffInput(t,E.fromItemId(37092),"scrollOfIntellect"),this.makeBooleanRaidIconBuffInput(t,E.fromItemId(37098),"scrollOfSpirit"),this.makeBooleanRaidIconBuffInput(t,E.fromItemId(43468),"scrollOfProtection"),this.makeBooleanRaidIconBuffInput(t,E.fromItemId(49633),"drumsOfForgottenKings"),this.makeBooleanRaidIconBuffInput(t,E.fromItemId(49634),"drumsOfTheWild")}buildOtherSettings(){}buildTankSettings(){const e=new Pe(this.column2,"tanks-settings",{header:{title:"Tanks"}});new zr(e.bodyElement,this.simUI)}buildAssignmentSettings(){const e=new Pe(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new $r(e.bodyElement,this.simUI)}buildBlessingsPicker(){const e=new Pe(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:ke}});this.simUI.blessingsPicker=new Jr(e.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on((e=>this.simUI.changeEmitter.emit(e)))}buildSavedDataPickers(){const e=new Se(this.rightPanel,this.simUI,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:e=>Q.create({encounter:e.toProto()}),setData:(e,t,a)=>t.fromProto(e,a.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(e,t)=>Q.equals(e,t),toJson:e=>Q.toJson(e),fromJson:e=>Q.fromJson(e)});this.simUI.sim.waitForInit().then((()=>{e.loadUserData()}))}makeBooleanRaidIconBuffInput(e,t,a){const s=this.simUI.sim.raid;return new Ee(e,s,{id:t,states:2,changedEvent:e=>e.buffsChangeEmitter,getValue:e=>e.getBuffs()[a],setValue:(e,t,s)=>{const r=t.getBuffs();r[a]=s,t.setBuffs(e,r)}})}}class _r extends Ce{constructor(e,a){super(e,a,"JSON Import",!0),t(this,"simUI"),this.simUI=a,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}onImport(e){const t=Y.fromJsonString(e,{ignoreUnknownFields:!0});this.simUI.fromProto(p.nextEventID(),t),this.close()}}class Xr extends Re{constructor(e,a){super(e,a,"JSON Export",!0),t(this,"simUI"),this.simUI=a,this.init()}getData(){return JSON.stringify(Y.toJson(this.simUI.toProto()),null,2)}}class Qr extends Ce{constructor(e,a){super(e,a,"WCL Import",!1),t(this,"queryCounter",0),t(this,"simUI"),t(this,"token",""),this.simUI=a,this.textElem.classList.add("small-textarea"),this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t"}async getWCLBearerToken(){if(""==this.token){const e=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),t=await e.json();this.token=t.access_token}return this.token}async queryWCL(e){const t={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${e}`;this.queryCounter++;const s=await fetch(encodeURI(a),{method:"GET",headers:t}),r=await s.json();if(r?.errors?.length){const t=r.errors.map((e=>e.message)).join("\n");throw new Error(`GraphQL error: ${t}\n\nQuery: ${e}`)}return console.debug(`WCL query: ${e}\n\nResult: ${JSON.stringify(r)}`),r}async parseURL(e){const t=e.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!t)throw new Error(`Invalid WCL URL ${e}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const a={reportID:t[1],fightID:""};if(t[2]&&t[3]&&"last"!=t[3])a.fightID=t[3];else{const e=`{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: "${a.reportID}") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`,s=(await this.queryWCL(e)).data.reportData.report.fights;"last"==t[3]?a.fightID=String(s[s.length-1].id):a.fightID=String(s[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(a)}`),a}async getRateLimit(){return(await this.queryWCL("{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }")).data.rateLimitData}async onImport(e){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(e)}catch(t){console.error(t),alert("Failed import from WCL: "+t)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(e){if(!e.length)throw new Error("No import link provided!");const t=await this.parseURL(e);await this.getRateLimit();const a=`{\n\t\t\treportData {\n\t\t\t\treport(code: "${t.reportID}") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${t.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${t.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${t.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[ei,ti].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${t.fightID}], dataType:Casts, filterExpression: "${[ai].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${t.fightID}], dataType:Healing, filterExpression: "${[si,ri].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${t.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`,s=(await this.queryWCL(a)).data.reportData.report,r=s.playerDetails.data.entries;p.freezeAllAndDo((()=>{const e=p.nextEventID(),t=r.map((t=>new Yr(t,this.simUI,e)));this.inferRace(e,s,t),this.inferProfessions(e,s,t),this.inferAssignments(e,s,t),this.inferPartyComposition(e,s,t);const a=t.filter((e=>e.player.getClass()==o.ClassPaladin)).length,i=Y.create({encounter:this.getEncounterProto(s),raid:this.getRaidProto(t),blessings:J(a)});this.simUI.clearRaid(e),this.simUI.fromProto(e,i)})),this.close()}inferRace(e,t,a){a.forEach((t=>t.player.setRace(e,i.RaceUnknown)));let s=t.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||r.Horde;t.combatantInfoEvents.data.forEach((t=>{t.auras.filter((e=>28878==e.ability)).forEach((t=>{const n=a.find((e=>e.id==t.source));n&&n.player.getRace()!=i.RaceDraenei&&(console.log(`Inferring player ${n.name} has race ${Z[i.RaceDraenei]} from Heroic Presence aura event`),n.player.setRace(e,i.RaceDraenei),s=r.Alliance)}))}));const n=ee(t.reportCastEvents.data,(e=>String(e.abilityGameID)));ei.forEach((t=>{(n[t.id]||[]).forEach((r=>{const i=a.find((e=>e.id==r.sourceID));i&&(console.log(`Inferring player ${i.name} has race ${Z[t.race]} from ${t.name} event`),i.player.setRace(e,t.race),s=te[t.race])}))})),a.forEach((t=>{t.player.getRace()==i.RaceUnknown&&t.player.setRace(e,t.preset.defaultFactionRaces[s])}))}inferProfessions(e,t,a){const s=ee(t.reportCastEvents.data,(e=>String(e.abilityGameID)));ti.forEach((e=>{(s[e.id]||[]).forEach((t=>{const s=a.find((e=>e.id==t.sourceID));s&&!s.inferredProfessions.includes(e.profession)&&(console.log(`Inferring player ${s.name} has profession ${ae[e.profession]} from ${e.name} event`),s.inferredProfessions.push(e.profession))}))})),a.forEach((t=>{let a=se(t.inferredProfessions.concat(t.player.getGear().getProfessionRequirements()));0==a.length?a=[S.Engineering,S.Jewelcrafting]:1==a.length&&(a[0]!=S.Engineering?a.push(S.Engineering):a.push(S.Jewelcrafting)),t.player.setProfessions(e,a)}))}inferAssignments(e,t,a){const s=ee(t.fightCastEvents.data,(e=>String(e.abilityGameID)));ai.forEach((t=>{(s[t.id]||[]).forEach((s=>{const r=a.find((e=>e.id==s.sourceID)),i=a.find((e=>e.id==s.targetID));if(r&&i&&r.player.getClass()==t.class){const a=t.applyFunc(r.player,i.toUnitReference());r.player.setSpecOptions(e,a),console.log(`Inferring player ${r.name} is targeting ${i.name} with ${t.name} from cast event`)}}))}))}inferPartyComposition(e,t,a){const s=(e,t,a)=>{(e.addPlayerInParty(t)||t.addPlayerInParty(e))&&console.log(`Inferring players ${e.name} and ${t.name} in same party from ${a} event`)},r=ee(t.fightHealEvents.data,(e=>String(e.abilityGameID)));si.forEach((e=>{(r[e.id]||[]).forEach((t=>{const r=a.find((e=>e.id==t.sourceID)),i=a.find((e=>e.id==t.targetID));r&&i&&s(r,i,e.name)}))})),ri.forEach((e=>{const t=r[e.id]||[],i=ee(t,(e=>String(e.timestamp)+String(e.sourceID)));for(const[r,n]of Object.entries(i)){const t=n.map((e=>a.find((t=>t.id==e.targetID))));for(let a=0;a<t.length;a++)for(let r=0;r<t.length;r++)a!=r&&t[a]&&t[r]&&s(t[a],t[r],e.name)}})),t.combatantInfoEvents.data.forEach((e=>{const t=a.find((t=>t.id==e.sourceID));e.auras.filter((e=>28878==e.ability)).forEach((e=>{const r=a.find((t=>t.id==e.source));r&&t&&s(r,t,"Heroic Presence")}))}));let i=a.filter((e=>e.playersInParty.length>0)),n=0;for(;i.length>0;){let e=[i[0]].concat(i[0].playersInParty),t=0;for(;e.length!=t;)t=e.length,e=se(e.map((e=>[e].concat(e.playersInParty))).flat());const a=n;n++,e.forEach(((e,t)=>{e.raidIndex=5*a+t})),i=i.filter((t=>!e.includes(t)))}const l=[...Array(40).keys()];a.filter((e=>-1==e.raidIndex)).forEach((e=>{const t=l.find((e=>!a.some((t=>t.raidIndex==e))))??-1;if(-1==t)throw new Error("Invalid next idx");e.raidIndex=t}))}getEncounterProto(e){const t=e.fights[0],a=re.create({duration:(t.endTime-t.startTime)/1e3,targets:[]});let s=this.simUI.sim.db.getAllPresetEncounters().find((e=>e.path.includes(t.name)));return s&&s.targets.length&&s.targets.map((e=>e.target)).filter((e=>void 0!==e)).forEach((e=>a.targets.push(e))),0===a.targets.length&&a.targets.push(we.defaultTargetProto()),a}getRaidProto(e){const t=$.create({parties:[...new Array(ve).keys()].map((e=>ie.create({players:[...new Array(5).keys()].map((e=>m.create()))})))});return e.forEach((e=>{const a=e.raidIndex%5,s=(e.raidIndex-a)/5,r=e.player.toProto();t.parties[s].players[a]=r,I(h(r))&&t.tanks.push(e.toUnitReference())})),t}}class Yr{constructor(e,a,s){t(this,"data"),t(this,"id"),t(this,"name"),t(this,"type"),t(this,"raidIndex",-1),t(this,"simUI"),t(this,"fullType"),t(this,"spec"),t(this,"player"),t(this,"preset"),t(this,"inferredProfessions",[]),t(this,"playersInParty",[]),this.simUI=a,this.data=e,this.name=e.name,this.id=e.id,this.type=e.type;const r=e.icon.split("-")[1];this.fullType=this.type+r,console.log(`WCL spec: ${this.fullType}`);const i=Zr[this.fullType]??null;if(null==i)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=i,this.player=new ge(this.spec,a.sim),this.preset=Yr.getMatchingPreset(i,e.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:e.talents}).toString());this.player.applySharedDefaults(s),this.player.setTalentsString(s,this.preset.talents.talentsString),this.player.setGlyphs(s,this.preset.talents.glyphs),this.player.setConsumes(s,this.preset.consumes),this.player.setRotation(s,this.preset.rotation),this.player.setSpecOptions(s,this.preset.specOptions),this.player.setProfessions(s,[S.Engineering,S.Jewelcrafting]),this.player.setName(s,e.name),this.player.setGear(s,a.sim.db.lookupEquipmentSpec(ne.create({items:e.gear.map((e=>le.create({id:e.id,enchant:e.permanentEnchant,gems:e.gems?e.gems.map((e=>e.id)):[]})))})))}static getMatchingPreset(e,t){const a=fr.filter((t=>t.spec==e));let s=0;if(a&&a.length>1){let e=999;a.forEach(((a,r)=>{const i=oe(a.talents.talentsString),n=i.reduce(((e,a,s)=>e+Math.abs(t[s]?.guid-i[s])),0);n<e&&(s=r,e=n)}))}return a[s]}toUnitReference(){return q.create({type:ce.Player,index:this.raidIndex})}addPlayerInParty(e){return e!=this&&!this.playersInParty.includes(e)&&(this.playersInParty.push(e),!0)}}const Zr={DeathKnightBlood:s.SpecTankDeathknight,DeathKnightLichborne:s.SpecTankDeathknight,DeathKnightRuneblade:s.SpecDeathknight,DeathKnightBloodDPS:s.SpecDeathknight,DeathKnightFrost:s.SpecDeathknight,DeathKnightUnholy:s.SpecDeathknight,DruidBalance:s.SpecBalanceDruid,DruidFeral:s.SpecFeralDruid,DruidWarden:s.SpecFeralTankDruid,DruidGuardian:s.SpecFeralTankDruid,DruidRestoration:s.SpecRestorationDruid,HunterBeastMastery:s.SpecHunter,HunterSurvival:s.SpecHunter,HunterMarksmanship:s.SpecHunter,MageArcane:s.SpecMage,MageFire:s.SpecMage,MageFrost:s.SpecMage,PaladinHoly:s.SpecHolyPaladin,PaladinJusticar:s.SpecProtectionPaladin,PaladinProtection:s.SpecProtectionPaladin,PaladinRetribution:s.SpecRetributionPaladin,PriestHoly:s.SpecHealingPriest,PriestDiscipline:s.SpecHealingPriest,PriestShadow:s.SpecShadowPriest,PriestSmite:s.SpecSmitePriest,RogueAssassination:s.SpecRogue,RogueCombat:s.SpecRogue,RogueSubtlety:s.SpecRogue,ShamanElemental:s.SpecElementalShaman,ShamanEnhancement:s.SpecEnhancementShaman,ShamanRestoration:s.SpecRestorationShaman,WarlockDestruction:s.SpecWarlock,WarlockAffliction:s.SpecWarlock,WarlockDemonology:s.SpecWarlock,WarriorArms:s.SpecWarrior,WarriorFury:s.SpecWarrior,WarriorChampion:s.SpecWarrior,WarriorWarrior:s.SpecWarrior,WarriorGladiator:s.SpecWarrior,WarriorProtection:s.SpecProtectionWarrior},ei=[{id:25046,name:"Arcane Torrent (Energy)",race:i.RaceBloodElf},{id:28730,name:"Arcane Torrent (Mana)",race:i.RaceBloodElf},{id:50613,name:"Arcane Torrent (Runic Power)",race:i.RaceBloodElf},{id:26297,name:"Berserking",race:i.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:i.RaceOrc},{id:33697,name:"Blood Fury (AP+SP)",race:i.RaceOrc},{id:33702,name:"Blood Fury (SP)",race:i.RaceOrc},{id:20589,name:"Escape Artist",race:i.RaceGnome},{id:20594,name:"Stoneform",race:i.RaceDwarf},{id:20549,name:"War Stomp",race:i.RaceTauren},{id:7744,name:"Will of the Forsaken",race:i.RaceUndead},{id:59752,name:"Will to Survive",race:i.RaceHuman}],ti=[{id:55503,name:"Lifeblood",profession:S.Herbalism},{id:50305,name:"Skinning",profession:S.Skinning}],ai=[{id:29166,name:"Innervate",class:o.ClassDruid,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.innervateTarget=t,a}},{id:10060,name:"Power Infusion",class:o.ClassPriest,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.powerInfusionTarget=t,a}}],si=[{id:52042,name:"Healing Stream Totem"},{id:25329,name:"Holy Nova"},{id:44208,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],ri=[{id:25316,name:"Prayer of Healing"}],ii=[];new class extends Ue{constructor(e,a){super(e,new Te,{cssClass:"raid-sim-ui",cssScheme:"raid",spec:null,launchStatus:Oe,knownIssues:(a.knownIssues||[]).concat(ii)}),t(this,"config"),t(this,"raidSimResultsManager",null),t(this,"raidPicker",null),t(this,"blessingsPicker",null),t(this,"compChangeEmitter",new p),t(this,"changeEmitter",new p),t(this,"referenceChangeEmitter",new p),this.config=a,this.sim.raid.compChangeEmitter.on((e=>this.compChangeEmitter.emit(e))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((e=>e.on((e=>this.changeEmitter.emit(e))))),this.changeEmitter.on((()=>this.recomputeSettingsLayout())),this.sim.setModifyRaidProto((e=>this.modifyRaidProto(e))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab()}loadSettings(){const e=p.nextEventID();p.freezeAllAndDo((()=>{let t=!1;const a=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=a)try{const s=Y.fromJsonString(a);this.fromProto(e,s),t=!0}catch(s){console.warn("Failed to parse saved settings: "+s)}t||this.applyDefaults(e),this.changeEmitter.on((e=>{const t=Y.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),t)}))}))}addSidebarComponents(){this.raidSimResultsManager=de(this),this.raidSimResultsManager.changeEmitter.on((e=>this.referenceChangeEmitter.emit(e)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",(e=>new _r(this.rootElem,this))),this.simHeader.addImportLink("WCL",(e=>new Qr(this.rootElem,this))),this.simHeader.addExportLink("JSON",(e=>new Xr(this.rootElem,this)))}addRaidTab(){new Lr(this.simTabContentsContainer,this)}addSettingsTab(){new Kr(this.simTabContentsContainer,this)}addDetailedResultsTab(){this.addTab("Results","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new pe(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}recomputeSettingsLayout(){window.dispatchEvent(new Event("resize"))}modifyRaidProto(e){const t=this.getClassCount(o.ClassPaladin),a=this.blessingsPicker.getAssignments();yr.forEach((s=>{const r=e.parties.map((e=>e.players.filter((e=>e.class!=o.ClassUnknown&&h(e)==s)))).flat();a.paladins.forEach(((e,a)=>{a>=t||(e.blessings[s]==K.BlessingOfKings?r.forEach((e=>e.buffs.blessingOfKings=!0)):e.blessings[s]==K.BlessingOfMight?r.forEach((e=>e.buffs.blessingOfMight=me.TristateEffectImproved)):e.blessings[s]==K.BlessingOfWisdom?r.forEach((e=>e.buffs.blessingOfWisdom=me.TristateEffectImproved)):e.blessings[s]==K.BlessingOfSanctuary&&r.forEach((e=>e.buffs.blessingOfSanctuary=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(e){return this.getActivePlayers().filter((t=>t.isClass(e))).length}applyDefaults(e){p.freezeAllAndDo((()=>{this.sim.raid.fromProto(e,$.create({numActiveParties:5})),this.sim.setPhase(e,1),this.sim.encounter.applyDefaults(e),this.sim.applyDefaults(e,!0,!0),this.sim.setShowDamageMetrics(e,!0)}))}toProto(){return Y.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const e=this.toProto();e.settings=void 0;const t=Y.toBinary(e),a=pako.deflate(t,{to:"string"}),s=btoa(String.fromCharCode(...a)),r=new URL(window.location.href);return r.hash=s,r.toString()}fromProto(e,t){p.freezeAllAndDo((()=>{t.settings&&this.sim.fromProto(e,t.settings),this.sim.raid.fromProto(e,t.raid||$.create()),this.sim.encounter.fromProto(e,t.encounter||re.create()),this.blessingsPicker.setAssignments(e,t.blessings||G.create())}))}clearRaid(e){this.sim.raid.clear(e)}getStorageKey(e){return"__wotlk_raid__"+e}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index-0a79fa8e.entry.js.map
