{"version":3,"file":"sim-0bac6dd1.chunk.js","sources":["../../../ui/warrior/presets.ts","../../../ui/warrior/inputs.ts","../../../ui/warrior/sim.ts"],"sourcesContent":["import { Consumes, Faction } from '../core/proto/common.js';\r\nimport { EquipmentSpec } from '../core/proto/common.js';\r\nimport { Flask } from '../core/proto/common.js';\r\nimport { Food } from '../core/proto/common.js';\r\nimport { Glyphs } from '../core/proto/common.js';\r\nimport { Potions } from '../core/proto/common.js';\r\nimport { Spec } from '../core/proto/common.js';\r\nimport { SavedRotation, SavedTalents } from '../core/proto/ui.js';\r\nimport { APLRotation } from '../core/proto/apl.js';\r\nimport { Player } from '../core/player.js';\r\n\r\nimport {\r\n\tWarriorShout,\r\n\tWarriorTalents as WarriorTalents,\r\n\tWarrior,\r\n\tWarrior_Rotation as WarriorRotation,\r\n\tWarrior_Rotation_SunderArmor as SunderArmor,\r\n\tWarrior_Options as WarriorOptions,\r\n\tWarriorMajorGlyph,\r\n\tWarriorMinorGlyph,\r\n\tWarrior_Rotation_StanceOption as StanceOption,\r\n\tProtectionWarrior_Rotation_SpellOption as SpellOption,\r\n\tWarrior_Rotation_MainGcd as MainGcd,\r\n} from '../core/proto/warrior.js';\r\n\r\nimport * as Gems from '../core/proto_utils/gems.js';\r\nimport * as Tooltips from '../core/constants/tooltips.js';\r\n\r\n// Preset options for this spec.\r\n// Eventually we will import these values for the raid sim too, so its good to\r\n// keep them in a separate file.\r\n\r\n// Default talents. Uses the wowhead calculator format, make the talents on\r\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\r\nexport const ArmsTalents = {\r\n\tname: 'Arms',\r\n\tdata: SavedTalents.create({\r\n\t\ttalentsString: '3022032023335100102012213231251-305-2033',\r\n\t\tglyphs: Glyphs.create({\r\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfRending,\r\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfMortalStrike,\r\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\r\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfThunderClap,\r\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfCommand,\r\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfShatteringThrow,\r\n\t\t}),\r\n\t}),\r\n};\r\n\r\nexport const FuryTalents = {\r\n\tname: 'Fury',\r\n\tdata: SavedTalents.create({\r\n\t\ttalentsString: '32002301233-305053000520310053120500351',\r\n\t\tglyphs: Glyphs.create({\r\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfWhirlwind,\r\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfHeroicStrike,\r\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\r\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfCommand,\r\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfShatteringThrow,\r\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfCharge,\r\n\t\t}),\r\n\t}),\r\n};\r\n\r\nexport const DefaultRotation = WarriorRotation.create({\r\n\tuseRend: true,\r\n\tuseCleave: false,\r\n\tuseOverpower: false,\r\n\texecutePhaseOverpower: false,\r\n\r\n\tmainGcd: MainGcd.Bloodthirst,\r\n\r\n\tsunderArmor: SunderArmor.SunderArmorMaintain,\r\n\r\n\thsRageThreshold: 12,\r\n\trendHealthThresholdAbove: 20,\r\n\trendRageThresholdBelow: 100,\r\n\tslamRageThreshold: 25,\r\n\trendCdThreshold: 0,\r\n\tuseHsDuringExecute: true,\r\n\tuseBtDuringExecute: true,\r\n\tuseWwDuringExecute: true,\r\n\tuseSlamOverExecute: true,\r\n\tstanceOption: StanceOption.DefaultStance,\r\n});\r\n\r\nexport const ArmsRotation = WarriorRotation.create({\r\n\tuseRend: true,\r\n\tuseMs: true,\r\n\tuseCleave: false,\r\n\tsunderArmor: SunderArmor.SunderArmorMaintain,\r\n\tmsRageThreshold: 30,\r\n\tslamRageThreshold: 25,\r\n\thsRageThreshold: 50,\r\n\trendCdThreshold: 0,\r\n\trendHealthThresholdAbove: 100,\r\n\tuseHsDuringExecute: true,\r\n\tspamExecute: true,\r\n\tstanceOption: StanceOption.DefaultStance,\r\n});\r\n\r\nexport const ROTATION_FURY = {\r\n\tname: 'Fury',\r\n\trotation: SavedRotation.create({\r\n\t\tspecRotationOptionsJson: WarriorRotation.toJsonString(WarriorRotation.create({\r\n\t\t})),\r\n\t\trotation: APLRotation.fromJsonString(`{\r\n\t\t\t\"type\": \"TypeAPL\",\r\n\t\t\t\"prepullActions\": [\r\n\t\t\t\t{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":47436}}},\"doAtValue\":{\"const\":{\"val\":\"-10s\"}}},\r\n\t\t\t\t{\"action\":{\"castSpell\":{\"spellId\":{\"otherId\":\"OtherActionPotion\"}}},\"doAtValue\":{\"const\":{\"val\":\"-1s\"}}}\r\n\t\t\t],\r\n\t\t\t\"priorityList\": [\r\n\t\t\t\t{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":2458}}}},\r\n\t\t\t\t{\"action\":{\"condition\":{\"auraShouldRefresh\":{\"sourceUnit\":{\"type\":\"Self\"},\"auraId\":{\"spellId\":47436},\"maxOverlap\":{\"const\":{\"val\":\"2s\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":47436}}}},\r\n\t\t\t\t{\"action\":{\"condition\":{\"auraShouldRefresh\":{\"auraId\":{\"spellId\":47467},\"maxOverlap\":{\"const\":{\"val\":\"2s\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":47467}}}},\r\n\t\t\t\t{\"hide\":true,\"action\":{\"condition\":{\"and\":{\"vals\":[{\"auraShouldRefresh\":{\"auraId\":{\"spellId\":47502},\"maxOverlap\":{\"const\":{\"val\":\"2s\"}}}},{\"gcdIsReady\":{}},{\"cmp\":{\"op\":\"OpGe\",\"lhs\":{\"currentRage\":{}},\"rhs\":{\"const\":{\"val\":\"20\"}}}},{\"spellIsReady\":{\"spellId\":{\"spellId\":47502}}}]}},\"sequence\":{\"name\":\"TC\",\"actions\":[{\"castSpell\":{\"spellId\":{\"spellId\":2457}}},{\"castSpell\":{\"spellId\":{\"spellId\":47502}}}]}}},\r\n\t\t\t\t{\"hide\":true,\"action\":{\"resetSequence\":{\"sequenceName\":\"TC\"}}},\r\n\t\t\t\t{\"hide\":true,\"action\":{\"condition\":{\"auraShouldRefresh\":{\"auraId\":{\"spellId\":47437},\"maxOverlap\":{\"const\":{\"val\":\"2s\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":25203}}}},\r\n\t\t\t\t{\"action\":{\"autocastOtherCooldowns\":{}}},\r\n\t\t\t\t{\"action\":{\"condition\":{\"auraIsActive\":{\"auraId\":{\"spellId\":46916}}},\"castSpell\":{\"spellId\":{\"spellId\":47475}}}},\r\n\t\t\t\t{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":23881}}}},\r\n\t\t\t\t{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":1680}}}},\r\n\t\t\t\t{\"action\":{\"condition\":{\"and\":{\"vals\":[{\"not\":{\"val\":{\"isExecutePhase\":{\"threshold\":\"E20\"}}}},{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":47465}}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":47465}}}},\r\n\t\t\t\t{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":47471}}}},\r\n\t\t\t\t{\"action\":{\"condition\":{\"cmp\":{\"op\":\"OpGe\",\"lhs\":{\"currentRage\":{}},\"rhs\":{\"const\":{\"val\":\"30\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":47450,\"tag\":1}}}}\r\n\t\t\t]\r\n\t\t}`),\r\n\t}),\r\n};\r\n\r\nexport const DefaultOptions = WarriorOptions.create({\r\n\tstartingRage: 0,\r\n\tuseRecklessness: true,\r\n\tuseShatteringThrow: true,\r\n\tshout: WarriorShout.WarriorShoutCommanding,\r\n});\r\n\r\nexport const DefaultConsumes = Consumes.create({\r\n\tflask: Flask.FlaskOfEndlessRage,\r\n\tfood: Food.FoodSpicedWormBurger,\r\n\tdefaultPotion: Potions.IndestructiblePotion,\r\n\tprepopPotion: Potions.PotionOfSpeed,\r\n});\r\n\r\nexport const P1_PRERAID_FURY_PRESET = {\r\n\tname: 'P1 Pre-Raid Fury Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() != 0,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t{\"id\":41386,\"enchant\":3817,\"gems\":[41398,42702]},\r\n\t\t{\"id\":42645,\"gems\":[40003]},\r\n\t\t{\"id\":44195,\"enchant\":3808},\r\n\t\t{\"id\":37647,\"enchant\":3605},\r\n\t\t{\"id\":39606,\"enchant\":3832,\"gems\":[40003,40003]},\r\n\t\t{\"id\":44203,\"enchant\":3845,\"gems\":[0]},\r\n\t\t{\"id\":39609,\"enchant\":3604,\"gems\":[40037,0]},\r\n\t\t{\"id\":40694,\"gems\":[42149,42149]},\r\n\t\t{\"id\":44205,\"enchant\":3823},\r\n\t\t{\"id\":44306,\"enchant\":3606,\"gems\":[40037,40037]},\r\n\t\t{\"id\":42642,\"gems\":[42149]},\r\n\t\t{\"id\":37642},\r\n\t\t{\"id\":42987},\r\n\t\t{\"id\":40684},\r\n\t\t{\"id\":37852,\"enchant\":3789},\r\n\t\t{\"id\":37852,\"enchant\":3789},\r\n\t\t{\"id\":37191}\r\n\t]}`),\r\n};\r\n\r\nexport const P1_FURY_PRESET = {\r\n\tname: 'P1 Fury Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() != 0,\r\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\r\n\t\t{\"id\":44006,\"enchant\":3817,\"gems\":[41285,42702]},\r\n\t\t{\"id\":44664,\"gems\":[39996]},\r\n\t\t{\"id\":40530,\"enchant\":3808,\"gems\":[40037]},\r\n\t\t{\"id\":40403,\"enchant\":3605},\r\n\t\t{\"id\":40539,\"enchant\":3832,\"gems\":[42142]},\r\n\t\t{\"id\":39765,\"enchant\":3845,\"gems\":[39996,0]},\r\n\t\t{\"id\":40541,\"enchant\":3604,\"gems\":[0]},\r\n\t\t{\"id\":40205,\"gems\":[42142]},\r\n\t\t{\"id\":40529,\"enchant\":3823,\"gems\":[39996,40022]},\r\n\t\t{\"id\":40591,\"enchant\":3606},\r\n\t\t{\"id\":43993,\"gems\":[42142]},\r\n\t\t{\"id\":40717},\r\n\t\t{\"id\":42987},\r\n\t\t{\"id\":40256},\r\n\t\t{\"id\":40384,\"enchant\":3789},\r\n\t\t{\"id\":40384,\"enchant\":3789},\r\n\t\t{\"id\":40385}\r\n\t]}`),\r\n};\r\n\r\nexport const P2_FURY_PRESET = {\r\n\tname: 'P2 Fury Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() != 0,\r\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\r\n\t\t{\"id\":46151,\"enchant\":3817,\"gems\":[41398,39996]},\r\n\t\t{\"id\":45517,\"gems\":[39996]},\r\n\t\t{\"id\":46149,\"enchant\":3808,\"gems\":[39996]},\r\n\t\t{\"id\":46032,\"enchant\":3605,\"gems\":[39996,40037]},\r\n\t\t{\"id\":46146,\"enchant\":3832,\"gems\":[39996,42702]},\r\n\t\t{\"id\":45611,\"enchant\":3845,\"gems\":[40037,0]},\r\n\t\t{\"id\":46148,\"enchant\":3604,\"gems\":[40058]},\r\n\t\t{\"id\":46095,\"gems\":[42154,42142,42142]},\r\n\t\t{\"id\":45536,\"enchant\":3823,\"gems\":[39996,39996,39996]},\r\n\t\t{\"id\":40591,\"enchant\":3606},\r\n\t\t{\"id\":45608,\"gems\":[39996]},\r\n\t\t{\"id\":45534,\"gems\":[39996]},\r\n\t\t{\"id\":42987},\r\n\t\t{\"id\":45931},\r\n\t\t{\"id\":45516,\"enchant\":3789,\"gems\":[39996,39996]},\r\n\t\t{\"id\":45516,\"enchant\":3789,\"gems\":[39996,39996]},\r\n\t\t{\"id\":45296,\"gems\":[39996]}\r\n\t]}`),\r\n};\r\n\r\nexport const P3_FURY_PRESET_ALLIANCE = {\r\n\tname: 'P3 Fury Preset [A]',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() != 0 && player.getFaction() == Faction.Alliance,\r\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\r\n\t\t{\"id\":48383,\"enchant\":3817,\"gems\":[41398,49110]},\r\n\t\t{\"id\":47060,\"gems\":[40117]},\r\n\t\t{\"id\":48381,\"enchant\":3808,\"gems\":[40111]},\r\n\t\t{\"id\":47545,\"enchant\":3831,\"gems\":[40111]},\r\n\t\t{\"id\":48385,\"enchant\":3832,\"gems\":[40117,40117]},\r\n\t\t{\"id\":47074,\"enchant\":3845,\"gems\":[40143,0]},\r\n\t\t{\"id\":47240,\"enchant\":3604,\"gems\":[40111,40111,0]},\r\n\t\t{\"id\":47002,\"gems\":[40143,40143,40111]},\r\n\t\t{\"id\":48382,\"enchant\":3823,\"gems\":[40142,40117]},\r\n\t\t{\"id\":47154,\"enchant\":3606,\"gems\":[40142,40117]},\r\n\t\t{\"id\":46966,\"gems\":[40143]},\r\n\t\t{\"id\":47075,\"gems\":[40111]},\r\n\t\t{\"id\":45931},\r\n\t\t{\"id\":47131},\r\n\t\t{\"id\":47078,\"enchant\":3789,\"gems\":[42142,40111]},\r\n\t\t{\"id\":47078,\"enchant\":3789,\"gems\":[42142,42142]},\r\n\t\t{\"id\":46995,\"gems\":[40111]}\r\n\t]}`)\r\n}\r\n\r\nexport const P3_FURY_PRESET_HORDE = {\r\n\tname: 'P3 Fury Preset [H]',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() != 0 && player.getFaction() == Faction.Horde,\r\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\r\n\t\t{\"id\":48398,\"enchant\":3817,\"gems\":[41398,49110]},\r\n\t\t{\"id\":47433,\"gems\":[40111]},\r\n\t\t{\"id\":48400,\"enchant\":3808,\"gems\":[40117]},\r\n\t\t{\"id\":47546,\"enchant\":3831,\"gems\":[40111]},\r\n\t\t{\"id\":48396,\"enchant\":3832,\"gems\":[40111,40111]},\r\n\t\t{\"id\":47414,\"enchant\":3845,\"gems\":[40142,0]},\r\n\t\t{\"id\":47240,\"enchant\":3604,\"gems\":[40111,40111,0]},\r\n\t\t{\"id\":47429,\"gems\":[40142,40142,42142]},\r\n\t\t{\"id\":48399,\"enchant\":3823,\"gems\":[40142,40111]},\r\n\t\t{\"id\":47445,\"enchant\":3606,\"gems\":[40142,45862]},\r\n\t\t{\"id\":47413,\"gems\":[40142]},\r\n\t\t{\"id\":47443,\"gems\":[40111]},\r\n\t\t{\"id\":45931},\r\n\t\t{\"id\":47464},\r\n\t\t{\"id\":47446,\"enchant\":3789,\"gems\":[40117,40117]},\r\n\t\t{\"id\":47446,\"enchant\":3789,\"gems\":[42142,42142]},\r\n\t\t{\"id\":47428,\"gems\":[40117]}\r\n\t]}`)\r\n}\r\n\r\nexport const P1_PRERAID_ARMS_PRESET = {\r\n\tname: 'P1 Pre-Raid Arms Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0,\r\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\r\n\t\t{\"id\":41386,\"enchant\":3817,\"gems\":[41285,42702]},\r\n\t\t{\"id\":42645,\"gems\":[40002]},\r\n\t\t{\"id\":44195,\"enchant\":3808},\r\n\t\t{\"id\":37647,\"enchant\":3605},\r\n\t\t{\"id\":39606,\"enchant\":3832,\"gems\":[40002,40002]},\r\n\t\t{\"id\":41355,\"enchant\":3845,\"gems\":[0]},\r\n\t\t{\"id\":39609,\"enchant\":3604,\"gems\":[40037,0]},\r\n\t\t{\"id\":40694,\"gems\":[42149,42149]},\r\n\t\t{\"id\":37193,\"enchant\":3823,\"gems\":[40002,40037]},\r\n\t\t{\"id\":44306,\"enchant\":3606,\"gems\":[40086,40002]},\r\n\t\t{\"id\":42642,\"gems\":[42149]},\r\n\t\t{\"id\":37642},\r\n\t\t{\"id\":42987},\r\n\t\t{\"id\":40684},\r\n\t\t{\"id\":37852,\"enchant\":3789},\r\n\t\t{},\r\n\t\t{\"id\":37191}\r\n\t]}`),\r\n};\r\n\r\nexport const P1_ARMS_PRESET = {\r\n\tname: 'P1 Arms Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t{\"id\":40528,\"enchant\":3817,\"gems\":[41398,42153]},\r\n\t\t{\"id\":44664,\"gems\":[39996]},\r\n\t\t{\"id\":40530,\"enchant\":3808,\"gems\":[40038]},\r\n\t\t{\"id\":40403,\"enchant\":3605},\r\n\t\t{\"id\":40539,\"enchant\":3832,\"gems\":[42153]},\r\n\t\t{\"id\":40330,\"enchant\":3845,\"gems\":[40002,0]},\r\n\t\t{\"id\":40541,\"enchant\":3604,\"gems\":[0]},\r\n\t\t{\"id\":40205,\"gems\":[42153]},\r\n\t\t{\"id\":40318,\"enchant\":3823,\"gems\":[49110,40038]},\r\n\t\t{\"id\":40591,\"enchant\":3606},\r\n\t\t{\"id\":43993,\"gems\":[40002]},\r\n\t\t{\"id\":40474},\r\n\t\t{\"id\":42987},\r\n\t\t{\"id\":40256},\r\n\t\t{\"id\":40384,\"enchant\":3789},\r\n\t\t{},\r\n\t\t{\"id\":40385}\r\n\t]}`),\r\n};\r\n\r\nexport const P2_ARMS_PRESET = {\r\n\tname: 'P2 Arms Preset',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t  {\"id\":46151,\"enchant\":3817,\"gems\":[41398,42142]},\r\n\t\t  {\"id\":45459,\"gems\":[40002]},\r\n\t\t  {\"id\":46149,\"enchant\":3808,\"gems\":[42153]},\r\n\t\t  {\"id\":46032,\"enchant\":3605,\"gems\":[39996,40037]},\r\n\t\t  {\"id\":46146,\"enchant\":3832,\"gems\":[42153,39996]},\r\n\t\t  {\"id\":45663,\"enchant\":3845,\"gems\":[39996,0]},\r\n\t\t  {\"id\":46148,\"enchant\":3604,\"gems\":[40037,0]},\r\n\t\t  {\"id\":45241,\"gems\":[49110,40037,39996]},\r\n\t\t  {\"id\":45536,\"enchant\":3823,\"gems\":[39996,39996,39996]},\r\n\t\t  {\"id\":45599,\"enchant\":3606,\"gems\":[40002,40002]},\r\n\t\t  {\"id\":45608,\"gems\":[39996]},\r\n\t\t  {\"id\":46322,\"gems\":[39996]},\r\n\t\t  {\"id\":46038},\r\n\t\t  {\"id\":45931},\r\n\t\t  {\"id\":45533,\"enchant\":3789,\"gems\":[39996,39996]},\r\n\t\t  {},\r\n\t\t  {\"id\":45296,\"gems\":[39996]}\r\n\t]}`),\r\n};\r\n\r\nexport const P3_ARMS_2P_PRESET_ALLIANCE = {\r\n\tname: 'P3 Arms 2p Preset [A]',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0 && player.getFaction() == Faction.Alliance,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t{\"id\":49478,\"enchant\":3817,\"gems\":[41398,40117]},\r\n\t\t{\"id\":47915,\"gems\":[40117]},\r\n\t\t{\"id\":48381,\"enchant\":3808,\"gems\":[42142]},\r\n\t\t{\"id\":47545,\"enchant\":3605,\"gems\":[40117]},\r\n\t\t{\"id\":48385,\"enchant\":3832,\"gems\":[42142,42142]},\r\n\t\t{\"id\":47074,\"enchant\":3845,\"gems\":[40143,0]},\r\n\t\t{\"id\":47240,\"enchant\":3604,\"gems\":[49110,40117,0]},\r\n\t\t{\"id\":47153,\"gems\":[40143,40117,40117]},\r\n\t\t{\"id\":47191,\"enchant\":3823,\"gems\":[40117,40117,40117]},\r\n\t\t{\"id\":47077,\"enchant\":3606,\"gems\":[40143,40117]},\r\n\t\t{\"id\":47934,\"gems\":[40142]},\r\n\t\t{\"id\":45608,\"gems\":[40117]},\r\n\t\t{\"id\":47131},\r\n\t\t{\"id\":46038},\r\n\t\t{\"id\":47078,\"enchant\":3789,\"gems\":[40117,40117]},\r\n\t\t{},\r\n\t\t{\"id\":45296,\"gems\":[40117]}\r\n\t]}`),\r\n};\r\n\r\nexport const P3_ARMS_4P_PRESET_ALLIANCE = {\r\n\tname: 'P3 Arms 4p Preset [A]',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0 && player.getFaction() == Faction.Alliance,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t{\"id\":48383,\"enchant\":3817,\"gems\":[41398,40117]},\r\n\t\t{\"id\":47915,\"gems\":[40117]},\r\n\t\t{\"id\":48381,\"enchant\":3808,\"gems\":[42153]},\r\n\t\t{\"id\":47545,\"enchant\":3605,\"gems\":[40117]},\r\n\t\t{\"id\":48385,\"enchant\":3832,\"gems\":[42153,42153]},\r\n\t\t{\"id\":47074,\"enchant\":3845,\"gems\":[40117,0]},\r\n\t\t{\"id\":47240,\"enchant\":3604,\"gems\":[49110,40117,0]},\r\n\t\t{\"id\":47153,\"gems\":[40117,40117,40117]},\r\n\t\t{\"id\":48382,\"enchant\":3823,\"gems\":[40142,40117]},\r\n\t\t{\"id\":47077,\"enchant\":3606,\"gems\":[40117,40117]},\r\n\t\t{\"id\":47934,\"gems\":[40117]},\r\n\t\t{\"id\":45608,\"gems\":[40117]},\r\n\t\t{\"id\":46038},\r\n\t\t{\"id\":47131},\r\n\t\t{\"id\":47078,\"enchant\":3789,\"gems\":[40117,40117]},\r\n\t\t{},\r\n\t\t{\"id\":46995,\"gems\":[40117]}\r\n\t]}`),\r\n};\r\n\r\nexport const P3_ARMS_2P_PRESET_HORDE = {\r\n\tname: 'P3 Arms 2p Preset [H]',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0 && player.getFaction() == Faction.Horde,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t{\"id\":49478,\"enchant\":3817,\"gems\":[41398,40111]},\r\n\t\t{\"id\":45459,\"gems\":[40111]},\r\n\t\t{\"id\":48400,\"enchant\":3808,\"gems\":[42153]},\r\n\t\t{\"id\":47546,\"enchant\":3605,\"gems\":[40111]},\r\n\t\t{\"id\":48396,\"enchant\":3832,\"gems\":[42153,42153]},\r\n\t\t{\"id\":47442,\"enchant\":3845,\"gems\":[40143,0]},\r\n\t\t{\"id\":47492,\"enchant\":3604,\"gems\":[49110,40117,0]},\r\n\t\t{\"id\":47472,\"gems\":[40143,40117,40117]},\r\n\t\t{\"id\":47480,\"enchant\":3823,\"gems\":[40117,40117,40117]},\r\n\t\t{\"id\":47445,\"enchant\":3606,\"gems\":[40143,40117]},\r\n\t\t{\"id\":48007,\"gems\":[40143]},\r\n\t\t{\"id\":45608,\"gems\":[40117]},\r\n\t\t{\"id\":47464},\r\n\t\t{\"id\":46038},\r\n\t\t{\"id\":47446,\"enchant\":3789,\"gems\":[40111,40111]},\r\n\t\t{},\r\n\t\t{\"id\":47428,\"gems\":[40111]}\r\n\t]}`),\r\n};\r\n\r\nexport const P3_ARMS_4P_PRESET_HORDE = {\r\n\tname: 'P3 Arms 4p Preset [H]',\r\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\r\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0 && player.getFaction() == Faction.Horde,\r\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\r\n\t\t{\"id\":48398,\"enchant\":3817,\"gems\":[41398,40117]},\r\n\t\t{\"id\":47988,\"gems\":[40117]},\r\n\t\t{\"id\":48400,\"enchant\":3808,\"gems\":[42153]},\r\n\t\t{\"id\":47546,\"enchant\":3605,\"gems\":[40117]},\r\n\t\t{\"id\":48396,\"enchant\":3832,\"gems\":[42153,42153]},\r\n\t\t{\"id\":47442,\"enchant\":3845,\"gems\":[40117,0]},\r\n\t\t{\"id\":47492,\"enchant\":3604,\"gems\":[49110,40117,0]},\r\n\t\t{\"id\":47472,\"gems\":[40117,40117,40117]},\r\n\t\t{\"id\":48399,\"enchant\":3823,\"gems\":[40142,40117]},\r\n\t\t{\"id\":47445,\"enchant\":3606,\"gems\":[40117,40117]},\r\n\t\t{\"id\":48007,\"gems\":[40117]},\r\n\t\t{\"id\":45608,\"gems\":[40117]},\r\n\t\t{\"id\":46038},\r\n\t\t{\"id\":47464},\r\n\t\t{\"id\":47446,\"enchant\":3789,\"gems\":[40117,40117]},\r\n\t\t{},\r\n\t\t{\"id\":47428,\"gems\":[40117]}\r\n\t]}`),\r\n};\r\n","import { Spec } from '../core/proto/common.js';\r\nimport { ActionId } from '../core/proto_utils/action_id.js';\r\nimport { Player } from '../core/player.js';\r\nimport { EventID, TypedEvent } from '../core/typed_event.js';\r\n\r\nimport {\r\n\tWarriorShout,\r\n\tWarriorTalents as WarriorTalents,\r\n\tWarrior,\r\n\tWarrior_Rotation as WarriorRotation,\r\n\tWarrior_Rotation_SunderArmor as SunderArmor,\r\n\tWarrior_Options as WarriorOptions,\r\n\tWarrior_Rotation_StanceOption as StanceOption,\r\n\tWarrior_Rotation_SpellOption as SpellOption,\r\n\tWarrior_Rotation_MainGcd as MainGcd,\r\n} from '../core/proto/warrior.js';\r\n\r\nimport * as InputHelpers from '../core/components/input_helpers.js';\r\nimport * as Presets from './presets.js';\r\nimport { CustomRotationPicker } from 'ui/core/components/individual_sim_ui/custom_rotation_picker.js';\r\n\r\n// Configuration for spec-specific UI elements on the settings tab.\r\n// These don't need to be in a separate file but it keeps things cleaner.\r\n\r\nexport const Recklessness = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\r\n\tfieldName: 'useRecklessness',\r\n\tid: ActionId.fromSpellId(1719),\r\n});\r\n\r\n// export const ShatteringThrow = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\r\n// \tfieldName: 'useShatteringThrow',\r\n// \tid: ActionId.fromSpellId(64382),\r\n// });\r\n\r\nexport const StartingRage = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecWarrior>({\r\n\tfieldName: 'startingRage',\r\n\tlabel: 'Starting Rage',\r\n\tlabelTooltip: 'Initial rage at the start of each iteration.',\r\n});\r\n\r\nexport const StanceSnapshot = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecWarrior>({\r\n\tfieldName: 'stanceSnapshot',\r\n\tlabel: 'Stance Snapshot',\r\n\tlabelTooltip: 'Ability that is cast at the same time as stance swap will benefit from the bonus of the stance before the swap.',\r\n});\r\n\r\nexport const Munch = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecWarrior>({\r\n\tfieldName: 'munch',\r\n\tlabel: 'Munching',\r\n\tlabelTooltip: 'Apply \"munching\" to Deep Wounds',\r\n});\r\n\r\nexport const ShoutPicker = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarrior, WarriorShout>({\r\n\tfieldName: 'shout',\r\n\tvalues: [\r\n\t\t{ color: 'c79c6e', value: WarriorShout.WarriorShoutNone },\r\n\t\t{ actionId: ActionId.fromSpellId(2048), value: WarriorShout.WarriorShoutBattle },\r\n\t\t{ actionId: ActionId.fromSpellId(469), value: WarriorShout.WarriorShoutCommanding },\r\n\t],\r\n});\r\n\r\nexport const WarriorRotationConfig = {\r\n\tinputs: [\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'useMs',\r\n\t\t\tlabel: 'Use Mortal Strike',\r\n\t\t\tlabelTooltip: 'Use Mortal Strike when rage threshold is met.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0 && !player.getRotation().customRotationOption,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'useCleave',\r\n\t\t\tlabel: 'Use Cleave',\r\n\t\t\tlabelTooltip: 'Use Cleave instead of Heroic Strike.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => !player.getRotation().customRotationOption,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'useRend',\r\n\t\t\tlabel: 'Use Rend',\r\n\t\t\tlabelTooltip: 'Use Rend when rage threshold is met and the debuff duration is less than refresh time.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => !player.getRotation().customRotationOption,\r\n\t\t}),\r\n\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'useOverpower',\r\n\t\t\tlabel: 'Use Overpower',\r\n\t\t\tlabelTooltip: 'Use Overpower whenever it is available on an open GCD.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1 && !player.getRotation().customRotationOption,\r\n\t\t}),\r\n\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, MainGcd>({\r\n\t\t\tfieldName: 'mainGcd',\r\n\t\t\tlabel: 'Main GCD',\r\n\t\t\tlabelTooltip: 'Main GCD ability that will be prioritized above other abilities.',\r\n\t\t\tvalues: [\r\n\t\t\t\t{ name: 'Slam', value: MainGcd.Slam },\r\n\t\t\t\t{ name: 'Bloodthirst', value: MainGcd.Bloodthirst },\r\n\t\t\t\t{ name: 'Whirlwind', value: MainGcd.Whirlwind },\r\n\t\t\t],\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1 && !player.getRotation().customRotationOption,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'msRageThreshold',\r\n\t\t\tlabel: 'Mortal Strike rage threshold',\r\n\t\t\tlabelTooltip: 'Mortal Strike when rage is above:',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useMs || player.getRotation().customRotationOption) && player.getTalentTree() == 0,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'slamRageThreshold',\r\n\t\t\tlabel: 'Slam rage threshold',\r\n\t\t\tlabelTooltip: 'Slam when rage is above:',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useMs || player.getRotation().customRotationOption) && player.getTalentTree() == 0,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'bloodsurgeDurationThreshold',\r\n\t\t\tlabel: 'Exp Slam: Bloodsurge duration threshold (s)',\r\n\t\t\tlabelTooltip: 'Cast Exp Slam when Bloodsurge duration is below (seconds):',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().customRotationOption && player.getTalentTree() == 1,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'hsRageThreshold',\r\n\t\t\tlabel: 'HS rage threshold',\r\n\t\t\tlabelTooltip: 'Heroic Strike when rage is above:',\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'rendHealthThresholdAbove',\r\n\t\t\tlabel: 'Rend health threshold (%)',\r\n\t\t\tlabelTooltip: 'Rend will only be used when boss health is above this value in %.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useRend == true || player.getRotation().customRotationOption),\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'rendRageThresholdBelow',\r\n\t\t\tlabel: 'Rend rage threshold below',\r\n\t\t\tlabelTooltip: 'Rend will only be used when rage is smaller than this value.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useRend == true || player.getRotation().customRotationOption) && player.getTalentTree() == 1,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'rendCdThreshold',\r\n\t\t\tlabel: 'Rend Refresh Time (s)',\r\n\t\t\tlabelTooltip: 'Refresh Rend when the remaining duration is less than this amount of time (seconds).',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().useRend == true || player.getRotation().customRotationOption,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'useHsDuringExecute',\r\n\t\t\tlabel: 'HS during Execute Phase',\r\n\t\t\tlabelTooltip: 'Use Heroic Strike during Execute Phase.',\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'useBtDuringExecute',\r\n\t\t\tlabel: 'BT during Execute Phase',\r\n\t\t\tlabelTooltip: 'Use Bloodthirst during Execute Phase.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'useWwDuringExecute',\r\n\t\t\tlabel: 'WW during Execute Phase',\r\n\t\t\tlabelTooltip: 'Use Whirlwind during Execute Phase.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'useSlamOverExecute',\r\n\t\t\tlabel: 'Slam during Execute Phase',\r\n\t\t\tlabelTooltip: 'Use Slam Over Execute when Bloodsurge Procs in Execute Phase.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'executePhaseOverpower',\r\n\t\t\tlabel: 'Overpower in Execute Phase',\r\n\t\t\tlabelTooltip: 'Use Overpower instead of Execute whenever it is available.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useOverpower == true || player.getRotation().customRotationOption) && player.getTalentTree() == 1,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'spamExecute',\r\n\t\t\tlabel: 'Spam Execute',\r\n\t\t\tlabelTooltip: 'Use Execute whenever possible during Execute Phase.',\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0,\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, SunderArmor>({\r\n\t\t\tfieldName: 'sunderArmor',\r\n\t\t\tlabel: 'Sunder Armor',\r\n\t\t\tvalues: [\r\n\t\t\t\t{ name: 'Never', value: SunderArmor.SunderArmorNone },\r\n\t\t\t\t{ name: 'Help Stack', value: SunderArmor.SunderArmorHelpStack },\r\n\t\t\t\t{ name: 'Maintain Debuff', value: SunderArmor.SunderArmorMaintain },\r\n\t\t\t],\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, StanceOption>({\r\n\t\t\tfieldName: 'stanceOption',\r\n\t\t\tlabel: 'Stance Option',\r\n\t\t\tlabelTooltip: 'Stance to stay on. The default for Fury (Bloodthirst) is Berserker Stance and Battle Stance for everything else.',\r\n\t\t\tvalues: [\r\n\t\t\t\t{ name: 'Default', value: StanceOption.DefaultStance },\r\n\t\t\t\t{ name: 'Battle Stance', value: StanceOption.BattleStance },\r\n\t\t\t\t{ name: 'Berserker Stance', value: StanceOption.BerserkerStance },\r\n\t\t\t],\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'maintainDemoShout',\r\n\t\t\tlabel: 'Maintain Demo Shout',\r\n\t\t\tlabelTooltip: 'Keep Demo Shout active on the primary target.',\r\n\t\t}),\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'maintainThunderClap',\r\n\t\t\tlabel: 'Maintain Thunder Clap',\r\n\t\t\tlabelTooltip: 'Keep Thunder Clap active on the primary target.',\r\n\t\t}),\r\n\r\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\r\n\t\t\tfieldName: 'customRotationOption',\r\n\t\t\tlabel: 'Custom Rotation (Advanced)',\r\n\t\t\tlabelTooltip: 'Create your own rotation action priority list.',\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.sim.getShowExperimental(),\r\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\r\n\t\t}),\r\n\r\n\t\tInputHelpers.makeCustomRotationInput<Spec.SpecWarrior, SpellOption>({\r\n\t\t\tfieldName: 'customRotation',\r\n\t\t\tnumColumns: 3,\r\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().customRotationOption && player.sim.getShowExperimental(),\r\n\t\t\tvalues: [\r\n\t\t\t\t{ actionId: ActionId.fromSpellId(23881), value: SpellOption.BloodthirstCustom },\r\n\t\t\t\t{ actionId: ActionId.fromSpellId(1680), value: SpellOption.WhirlwindCustom },\r\n\t\t\t\t{ actionId: ActionId.fromSpellId(47475), value: SpellOption.SlamCustom },\r\n\t\t\t\t{ actionId: ActionId.fromSpellId(47475), value: SpellOption.SlamExpiring, text: \"Exp\", showWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1, },\r\n\t\t\t\t{ actionId: ActionId.fromSpellId(47486), value: SpellOption.MortalStrike },\r\n\t\t\t\t{ actionId: ActionId.fromSpellId(47465), value: SpellOption.Rend },\r\n\t\t\t\t{ actionId: ActionId.fromSpellId(7384), value: SpellOption.Overpower },\r\n\t\t\t\t{ actionId: ActionId.fromSpellId(47471), value: SpellOption.Execute },\r\n\t\t\t\t{ actionId: ActionId.fromSpellId(47502), value: SpellOption.ThunderClap },\r\n\t\t\t],\r\n\t\t}),\r\n\t],\r\n};\r\n","import { RaidBuffs } from '../core/proto/common.js';\r\nimport { PartyBuffs } from '../core/proto/common.js';\r\nimport { IndividualBuffs } from '../core/proto/common.js';\r\nimport { Debuffs } from '../core/proto/common.js';\r\nimport { Spec } from '../core/proto/common.js';\r\nimport { Stat, PseudoStat } from '../core/proto/common.js';\r\nimport { TristateEffect } from '../core/proto/common.js'\r\nimport { Stats } from '../core/proto_utils/stats.js';\r\nimport { Player } from '../core/player.js';\r\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\r\nimport { EventID, TypedEvent } from '../core/typed_event.js';\r\nimport { Gear } from '../core/proto_utils/gear.js';\r\nimport { ItemSlot } from '../core/proto/common.js';\r\nimport { GemColor } from '../core/proto/common.js';\r\nimport { Profession } from '../core/proto/common.js';\r\n\r\nimport { Warrior, Warrior_Rotation as WarriorRotation, WarriorTalents as WarriorTalents, Warrior_Options as WarriorOptions } from '../core/proto/warrior.js';\r\n\r\nimport * as IconInputs from '../core/components/icon_inputs.js';\r\nimport * as OtherInputs from '../core/components/other_inputs.js';\r\nimport * as Mechanics from '../core/constants/mechanics.js';\r\nimport * as Tooltips from '../core/constants/tooltips.js';\r\n\r\nimport * as WarriorInputs from './inputs.js';\r\nimport * as Presets from './presets.js';\r\n\r\nexport class WarriorSimUI extends IndividualSimUI<Spec.SpecWarrior> {\r\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarrior>) {\r\n\t\tsuper(parentElem, player, {\r\n\t\t\tcssClass: 'warrior-sim-ui',\r\n\t\t\tcssScheme: 'warrior',\r\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\r\n\t\t\tknownIssues: [\r\n\t\t\t],\r\n\r\n\t\t\t// All stats for which EP should be calculated.\r\n\t\t\tepStats: [\r\n\t\t\t\tStat.StatStrength,\r\n\t\t\t\tStat.StatAgility,\r\n\t\t\t\tStat.StatAttackPower,\r\n\t\t\t\tStat.StatExpertise,\r\n\t\t\t\tStat.StatMeleeHit,\r\n\t\t\t\tStat.StatMeleeCrit,\r\n\t\t\t\tStat.StatMeleeHaste,\r\n\t\t\t\tStat.StatArmorPenetration,\r\n\t\t\t\tStat.StatArmor,\r\n\t\t\t],\r\n\t\t\tepPseudoStats: [\r\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\r\n\t\t\t\tPseudoStat.PseudoStatOffHandDps,\r\n\t\t\t],\r\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\r\n\t\t\tepReferenceStat: Stat.StatAttackPower,\r\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\r\n\t\t\tdisplayStats: [\r\n\t\t\t\tStat.StatHealth,\r\n\t\t\t\tStat.StatStamina,\r\n\t\t\t\tStat.StatStrength,\r\n\t\t\t\tStat.StatAgility,\r\n\t\t\t\tStat.StatAttackPower,\r\n\t\t\t\tStat.StatExpertise,\r\n\t\t\t\tStat.StatMeleeHit,\r\n\t\t\t\tStat.StatMeleeCrit,\r\n\t\t\t\tStat.StatSpellCrit,\r\n\t\t\t\tStat.StatMeleeHaste,\r\n\t\t\t\tStat.StatArmorPenetration,\r\n\t\t\t\tStat.StatArmor,\r\n\t\t\t],\r\n\t\t\tmodifyDisplayStats: (player: Player<Spec.SpecWarrior>) => {\r\n\t\t\t\tlet stats = new Stats();\r\n\t\t\t\tif (!player.getInFrontOfTarget()) {\r\n\t\t\t\t\t// When behind target, dodge is the only outcome affected by Expertise.\r\n\t\t\t\t\tstats = stats.addStat(Stat.StatExpertise, player.getTalents().weaponMastery * 4 * Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION);\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttalents: stats,\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\tdefaults: {\r\n\t\t\t\t// Default equipped gear.\r\n\t\t\t\tgear: Presets.P3_FURY_PRESET_ALLIANCE.gear,\r\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\r\n\t\t\t\tepWeights: Stats.fromMap({\r\n\t\t\t\t\t[Stat.StatStrength]: 2.72,\r\n\t\t\t\t\t[Stat.StatAgility]: 1.82,\r\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\r\n\t\t\t\t\t[Stat.StatExpertise]: 2.55,\r\n\t\t\t\t\t[Stat.StatMeleeHit]: 0.79,\r\n\t\t\t\t\t[Stat.StatMeleeCrit]: 2.12,\r\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.72,\r\n\t\t\t\t\t[Stat.StatArmorPenetration]: 2.17,\r\n\t\t\t\t\t[Stat.StatArmor]: 0.03,\r\n\t\t\t\t}, {\r\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 6.29,\r\n\t\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 3.58,\r\n\t\t\t\t}),\r\n\t\t\t\t// Default consumes settings.\r\n\t\t\t\tconsumes: Presets.DefaultConsumes,\r\n\t\t\t\t// Default rotation settings.\r\n\t\t\t\trotation: Presets.DefaultRotation,\r\n\t\t\t\t// Default talents.\r\n\t\t\t\ttalents: Presets.FuryTalents.data,\r\n\t\t\t\t// Default spec-specific settings.\r\n\t\t\t\tspecOptions: Presets.DefaultOptions,\r\n\t\t\t\t// Default raid/party buffs settings.\r\n\t\t\t\traidBuffs: RaidBuffs.create({\r\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\tswiftRetribution: true,\r\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\ticyTalons: true,\r\n\t\t\t\t\tabominationsMight: true,\r\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectRegular,\r\n\t\t\t\t\tsanctifiedRetribution: true,\r\n\t\t\t\t\tbloodlust: true,\r\n\t\t\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t}),\r\n\t\t\t\tpartyBuffs: PartyBuffs.create({\r\n\t\t\t\t\theroicPresence: false,\r\n\t\t\t\t}),\r\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\r\n\t\t\t\t\tblessingOfKings: true,\r\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t}),\r\n\t\t\t\tdebuffs: Debuffs.create({\r\n\t\t\t\t\tbloodFrenzy: true,\r\n\t\t\t\t\theartOfTheCrusader: true,\r\n\t\t\t\t\tmangle: true,\r\n\t\t\t\t\tsunderArmor: true,\r\n\t\t\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\r\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\r\n\t\t\t\t}),\r\n\t\t\t},\r\n\r\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\r\n\t\t\tplayerIconInputs: [\r\n\t\t\t\tWarriorInputs.ShoutPicker,\r\n\t\t\t\tWarriorInputs.Recklessness,\r\n\t\t\t\t// WarriorInputs.ShatteringThrow,\r\n\t\t\t],\r\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\r\n\t\t\trotationInputs: WarriorInputs.WarriorRotationConfig,\r\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\r\n\t\t\tincludeBuffDebuffInputs: [\r\n\t\t\t],\r\n\t\t\texcludeBuffDebuffInputs: [\r\n\t\t\t],\r\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\r\n\t\t\totherInputs: {\r\n\t\t\t\tinputs: [\r\n\t\t\t\t\tWarriorInputs.StartingRage,\r\n\t\t\t\t\tWarriorInputs.StanceSnapshot,\r\n\t\t\t\t\tWarriorInputs.Munch,\r\n\t\t\t\t\tOtherInputs.TankAssignment,\r\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tencounterPicker: {\r\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\r\n\t\t\t\tshowExecuteProportion: true,\r\n\t\t\t},\r\n\r\n\t\t\tpresets: {\r\n\t\t\t\t// Preset talents that the user can quickly select.\r\n\t\t\t\ttalents: [\r\n\t\t\t\t\tPresets.ArmsTalents,\r\n\t\t\t\t\tPresets.FuryTalents,\r\n\t\t\t\t],\r\n\t\t\t\t// Preset rotations that the user can quickly select.\r\n\t\t\t\trotations: [\r\n\t\t\t\t\tPresets.ROTATION_FURY,\r\n\t\t\t\t],\r\n\t\t\t\t// Preset gear configurations that the user can quickly select.\r\n\t\t\t\tgear: [\r\n\t\t\t\t\tPresets.P1_PRERAID_FURY_PRESET,\r\n\t\t\t\t\tPresets.P1_FURY_PRESET,\r\n\t\t\t\t\tPresets.P2_FURY_PRESET,\r\n\t\t\t\t\tPresets.P3_FURY_PRESET_ALLIANCE,\r\n\t\t\t\t\tPresets.P3_FURY_PRESET_HORDE,\r\n\t\t\t\t\tPresets.P1_PRERAID_ARMS_PRESET,\r\n\t\t\t\t\tPresets.P1_ARMS_PRESET,\r\n\t\t\t\t\tPresets.P2_ARMS_PRESET,\r\n\t\t\t\t\tPresets.P3_ARMS_2P_PRESET_ALLIANCE,\r\n\t\t\t\t\tPresets.P3_ARMS_4P_PRESET_ALLIANCE,\r\n\t\t\t\t\tPresets.P3_ARMS_2P_PRESET_HORDE,\r\n\t\t\t\t\tPresets.P3_ARMS_4P_PRESET_HORDE,\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t});\r\n\t\t//this.addOptimizeGemsAction();\r\n\t}\r\n\taddOptimizeGemsAction() {\r\n\t\tthis.addAction('Suggest Gems', 'optimize-gems-action', async () => {\r\n\t\t\tthis.optimizeGems();\r\n\t\t});\r\n\t}\r\n\r\n\tasync optimizeGems() {\r\n\t\t// First, clear all existing gems\r\n\t\tlet optimizedGear = this.player.getGear().withoutGems();\r\n\r\n\t\t// Next, socket the meta\r\n\t\toptimizedGear = optimizedGear.withMetaGem(this.sim.db.lookupGem(41398));\r\n\r\n\t\t// Next, socket a Nightmare Tear in the best blue socket bonus\r\n\t\tconst epWeights = this.player.getEpWeights();\r\n\t\tconst tearSlot = this.findTearSlot(optimizedGear, epWeights);\r\n\t\toptimizedGear = this.socketTear(optimizedGear, tearSlot);\r\n\t\tawait this.updateGear(optimizedGear);\r\n\r\n\t\t// Next, identify all sockets where red gems will be placed\r\n\t\tconst redSockets = this.findSocketsByColor(optimizedGear, epWeights, GemColor.GemColorRed, tearSlot);\r\n\r\n\t\t// Rank order red gems to use with their associated stat caps\r\n\t\tconst redGemCaps = new Array<[number, Stats]>();\r\n\t\tredGemCaps.push([40117, this.calcArpCap(optimizedGear)]);\r\n\t\tconst expCap = new Stats().withStat(Stat.StatExpertise, 6.5 * Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION * 4 + 4);\r\n\t\tredGemCaps.push([40118, expCap]);\r\n\t\tconst critCap = this.calcCritCap(optimizedGear);\r\n\t\tredGemCaps.push([40111, new Stats()]);\r\n\r\n\t\t// If JC, then socket 34 ArP gems in first three red sockets before proceeding\r\n\t\tlet startIdx = 0;\r\n\r\n\t\tif (this.player.hasProfession(Profession.Jewelcrafting)) {\r\n\t\t\toptimizedGear = this.optimizeJcGems(optimizedGear, redSockets);\r\n\t\t\tstartIdx = 3;\r\n\t\t}\r\n\r\n\t\t// Do multiple passes to fill in red gems up their caps\r\n\t\toptimizedGear = await this.fillGemsToCaps(optimizedGear, redSockets, redGemCaps, 0, startIdx);\r\n\r\n\t\t// Now repeat the process for yellow gems\r\n\t\tconst yellowSockets = this.findSocketsByColor(optimizedGear, epWeights, GemColor.GemColorYellow, tearSlot);\r\n\t\tconst yellowGemCaps = new Array<[number, Stats]>();\r\n\t\tconst hitCap = new Stats().withStat(Stat.StatMeleeHit, 8. * Mechanics.MELEE_HIT_RATING_PER_HIT_CHANCE + 4);\r\n\t\tyellowGemCaps.push([40125, hitCap]);\r\n\t\tyellowGemCaps.push([40162, hitCap.add(expCap)]);\r\n\t\tyellowGemCaps.push([40143, hitCap]);\r\n\t\tyellowGemCaps.push([40142, critCap]);\r\n\t\tawait this.fillGemsToCaps(optimizedGear, yellowSockets, yellowGemCaps, 0, 0);\r\n\t}\r\n\r\n\tcalcArpCap(gear: Gear): Stats {\r\n\t\tlet arpCap = 1404;\r\n\r\n\t\tif (gear.hasTrinket(45931)) {\r\n\t\t\tarpCap = 659;\r\n\t\t} else if (gear.hasTrinket(40256)) {\r\n\t\t\tarpCap = 798;\r\n\t\t}\r\n\r\n\t\treturn new Stats().withStat(Stat.StatArmorPenetration, arpCap);\r\n\t}\r\n\r\n\tcalcArpTarget(gear: Gear): number {\r\n\t\tif (gear.hasTrinket(45931)) {\r\n\t\t\treturn 648;\r\n\t\t}\r\n\r\n\t\tif (gear.hasTrinket(40256)) {\r\n\t\t\treturn 787;\r\n\t\t}\r\n\r\n\t\treturn 1399;\r\n\t}\r\n\r\n\tcalcCritCap(gear: Gear): Stats {\r\n\t\tconst baseCritCapPercentage = 77.8; // includes 3% Crit debuff\r\n\t\tlet agiProcs = 0;\r\n\r\n\t\tif (gear.hasRelic(47668)) {\r\n\t\t\tagiProcs += 200;\r\n\t\t}\r\n\r\n\t\tif (gear.hasRelic(50456)) {\r\n\t\t\tagiProcs += 44*5;\r\n\t\t}\r\n\r\n\t\tif (gear.hasTrinket(47131) || gear.hasTrinket(47464)) {\r\n\t\t\tagiProcs += 510;\r\n\t\t}\r\n\r\n\t\tif (gear.hasTrinket(47115) || gear.hasTrinket(47303)) {\r\n\t\t\tagiProcs += 450;\r\n\t\t}\r\n\r\n\t\tif (gear.hasTrinket(44253) || gear.hasTrinket(42987)) {\r\n\t\t\tagiProcs += 300;\r\n\t\t}\r\n\r\n\t\treturn new Stats().withStat(Stat.StatMeleeCrit, (baseCritCapPercentage - agiProcs*1.1*1.06*1.02/83.33) * 45.91);\r\n\t}\r\n\r\n\tasync updateGear(gear: Gear): Promise<Stats> {\r\n\t\tthis.player.setGear(TypedEvent.nextEventID(), gear);\r\n\t\tawait this.sim.updateCharacterStats(TypedEvent.nextEventID());\r\n\t\treturn Stats.fromProto(this.player.getCurrentStats().finalStats);\r\n\t}\r\n\r\n\tfindTearSlot(gear: Gear, epWeights: Stats): ItemSlot | null {\r\n\t\tlet tearSlot: ItemSlot | null = null;\r\n\t\tlet maxBlueSocketBonusEP: number = 1e-8;\r\n\r\n\t\tfor (var slot of gear.getItemSlots()) {\r\n\t\t\tconst item = gear.getEquippedItem(slot);\r\n\r\n\t\t\tif (!item) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (item!.numSocketsOfColor(GemColor.GemColorBlue) != 1) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst socketBonusEP = new Stats(item.item.socketBonus).computeEP(epWeights);\r\n\r\n\t\t\tif (socketBonusEP > maxBlueSocketBonusEP) {\r\n\t\t\t\ttearSlot = slot;\r\n\t\t\t\tmaxBlueSocketBonusEP = socketBonusEP;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn tearSlot;\r\n\t}\r\n\r\n\tsocketTear(gear: Gear, tearSlot: ItemSlot | null): Gear {\r\n\t\tif (tearSlot != null) {\r\n\t\t\tconst tearSlotItem = gear.getEquippedItem(tearSlot);\r\n\r\n\t\t\tfor (const [socketIdx, socketColor] of tearSlotItem!.allSocketColors().entries()) {\r\n\t\t\t\tif (socketColor == GemColor.GemColorBlue) {\r\n\t\t\t\t\treturn gear.withEquippedItem(tearSlot, tearSlotItem!.withGem(this.sim.db.lookupGem(49110), socketIdx), true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn gear;\r\n\t}\r\n\r\n\tfindSocketsByColor(gear: Gear, epWeights: Stats, color: GemColor, tearSlot: ItemSlot | null): Array<[ItemSlot, number]> {\r\n\t\tconst socketList = new Array<[ItemSlot, number]>();\r\n\t\tconst isBlacksmithing = this.player.isBlacksmithing();\r\n\r\n\t\tfor (var slot of gear.getItemSlots()) {\r\n\t\t\tconst item = gear.getEquippedItem(slot);\r\n\r\n\t\t\tif (!item) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst ignoreYellowSockets = ((item!.numSocketsOfColor(GemColor.GemColorBlue) > 0) && (slot != tearSlot))\r\n\r\n\t\t\tfor (const [socketIdx, socketColor] of item!.curSocketColors(isBlacksmithing).entries()) {\r\n\t\t\t\tif (item!.hasSocketedGem(socketIdx)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet matchYellowSocket = false;\r\n\r\n\t\t\t\tif ((socketColor == GemColor.GemColorYellow) && !ignoreYellowSockets) {\r\n\t\t\t\t\tmatchYellowSocket = new Stats(item.item.socketBonus).computeEP(epWeights) > 1e-8;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (((color == GemColor.GemColorYellow) && matchYellowSocket) || ((color == GemColor.GemColorRed) && !matchYellowSocket)) {\r\n\t\t\t\t\tsocketList.push([slot, socketIdx]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn socketList;\r\n\t}\r\n\r\n\tasync fillGemsToCaps(gear: Gear, socketList: Array<[ItemSlot, number]>, gemCaps: Array<[number, Stats]>, numPasses: number, firstIdx: number): Promise<Gear> {\r\n\t\tlet updatedGear: Gear = gear;\r\n\t\tconst currentGem = this.sim.db.lookupGem(gemCaps[numPasses][0]);\r\n\r\n\t\t// On the first pass, we simply fill all sockets with the highest priority gem\r\n\t\tif (numPasses == 0) {\r\n\t\t\tfor (const [itemSlot, socketIdx] of socketList.slice(firstIdx)) {\r\n\t\t\t\tupdatedGear = updatedGear.withGem(itemSlot, socketIdx, currentGem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If we are below the relevant stat cap for the gem we just filled on the last pass, then we are finished.\r\n\t\tlet newStats = await this.updateGear(updatedGear);\r\n\t\tconst currentCap = gemCaps[numPasses][1];\r\n\r\n\t\tif (newStats.belowCaps(currentCap) || (numPasses == gemCaps.length - 1)) {\r\n\t\t\treturn updatedGear;\r\n\t\t}\r\n\r\n\t\t// If we exceeded the stat cap, then work backwards through the socket list and replace each gem with the next highest priority option until we are below the cap\r\n\t\tconst nextGem = this.sim.db.lookupGem(gemCaps[numPasses + 1][0]);\r\n\t\tconst nextCap = gemCaps[numPasses + 1][1];\r\n\t\tlet capForReplacement = currentCap;\r\n\r\n\t\tif ((numPasses > 0) && !currentCap.equals(nextCap)) {\r\n\t\t\tcapForReplacement = currentCap.subtract(nextCap);\r\n\t\t}\r\n\r\n\t\tfor (var idx = socketList.length - 1; idx >= firstIdx; idx--) {\r\n\t\t\tif (newStats.belowCaps(capForReplacement)) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst [itemSlot, socketIdx] = socketList[idx];\r\n\t\t\tupdatedGear = updatedGear.withGem(itemSlot, socketIdx, nextGem);\r\n\t\t\tnewStats = await this.updateGear(updatedGear);\r\n\t\t}\r\n\r\n\t\t// Now run a new pass to check whether we've exceeded the next stat cap\r\n\t\tlet nextIdx = idx + 1;\r\n\r\n\t\tif (!newStats.belowCaps(currentCap)) {\r\n\t\t\tnextIdx = firstIdx;\r\n\t\t}\r\n\r\n\t\treturn await this.fillGemsToCaps(updatedGear, socketList, gemCaps, numPasses + 1, nextIdx);\r\n\t}\r\n\r\n\tcalcDistanceToArpTarget(numJcArpGems: number, passiveArp: number, numRedSockets: number, arpCap: number, arpTarget: number): number {\r\n\t\tconst numNormalArpGems = Math.max(0, Math.min(numRedSockets - 3, Math.floor((arpCap - passiveArp - 34 * numJcArpGems) / 20)));\r\n\t\tconst projectedArp = passiveArp + 34 * numJcArpGems + 20 * numNormalArpGems;\r\n\t\treturn Math.abs(projectedArp - arpTarget);\r\n\t}\r\n\r\n\toptimizeJcGems(gear: Gear, redSocketList: Array<[ItemSlot, number]>): Gear {\r\n\t\tconst passiveStats = Stats.fromProto(this.player.getCurrentStats().finalStats);\r\n\t\tconst passiveArp = passiveStats.getStat(Stat.StatArmorPenetration);\r\n\t\tconst numRedSockets = redSocketList.length;\r\n\t\tconst arpCap = this.calcArpCap(gear).getStat(Stat.StatArmorPenetration);\r\n\t\tconst arpTarget = this.calcArpTarget(gear);\r\n\r\n\t\t// First determine how many of the JC gems should be 34 ArP gems\r\n\t\tlet optimalJcArpGems = 0;\r\n\t\tlet minDistanceToArpTarget = this.calcDistanceToArpTarget(0, passiveArp, numRedSockets, arpCap, arpTarget);\r\n\r\n\t\tfor (let i = 1; i <= 3; i++) {\r\n\t\t\tconst distanceToArpTarget = this.calcDistanceToArpTarget(i, passiveArp, numRedSockets, arpCap, arpTarget);\r\n\r\n\t\t\tif (distanceToArpTarget < minDistanceToArpTarget) {\r\n\t\t\t\toptimalJcArpGems = i;\r\n\t\t\t\tminDistanceToArpTarget = distanceToArpTarget;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Now actually socket the gems\r\n\t\tlet updatedGear: Gear = gear;\r\n\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tlet gemId = 42142; // Str by default\r\n\r\n\t\t\tif (i < optimalJcArpGems) {\r\n\t\t\t\tgemId = 42153;\r\n\t\t\t}\r\n\r\n\t\t\tupdatedGear = updatedGear.withGem(redSocketList[i][0], redSocketList[i][1], this.sim.db.lookupGem(gemId));\r\n\t\t}\r\n\r\n\t\treturn updatedGear;\r\n\t}\r\n}\r\n"],"names":["ArmsTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","WarriorMajorGlyph","GlyphOfRending","major2","GlyphOfMortalStrike","major3","GlyphOfExecution","minor1","WarriorMinorGlyph","GlyphOfThunderClap","minor2","GlyphOfCommand","minor3","GlyphOfShatteringThrow","FuryTalents","GlyphOfWhirlwind","GlyphOfHeroicStrike","GlyphOfCharge","DefaultRotation","WarriorRotation","useRend","useCleave","useOverpower","executePhaseOverpower","mainGcd","MainGcd","Bloodthirst","sunderArmor","SunderArmor","SunderArmorMaintain","hsRageThreshold","rendHealthThresholdAbove","rendRageThresholdBelow","slamRageThreshold","rendCdThreshold","useHsDuringExecute","useBtDuringExecute","useWwDuringExecute","useSlamOverExecute","stanceOption","StanceOption","DefaultStance","ArmsRotation","useMs","msRageThreshold","spamExecute","ROTATION_FURY","rotation","SavedRotation","specRotationOptionsJson","toJsonString","APLRotation","fromJsonString","DefaultOptions","WarriorOptions","startingRage","useRecklessness","useShatteringThrow","shout","WarriorShout","WarriorShoutCommanding","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodSpicedWormBurger","defaultPotion","Potions","IndestructiblePotion","prepopPotion","PotionOfSpeed","P1_PRERAID_FURY_PRESET","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","enableWhen","player","getTalentTree","gear","EquipmentSpec","P1_FURY_PRESET","P2_FURY_PRESET","P3_FURY_PRESET_ALLIANCE","getFaction","Faction","Alliance","P3_FURY_PRESET_HORDE","Horde","P1_PRERAID_ARMS_PRESET","P1_ARMS_PRESET","P2_ARMS_PRESET","P3_ARMS_2P_PRESET_ALLIANCE","P3_ARMS_4P_PRESET_ALLIANCE","P3_ARMS_2P_PRESET_HORDE","P3_ARMS_4P_PRESET_HORDE","Recklessness","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","StartingRage","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","StanceSnapshot","InputHelpers.makeSpecOptionsBooleanInput","Munch","ShoutPicker","InputHelpers.makeSpecOptionsEnumIconInput","values","color","value","WarriorShoutNone","actionId","WarriorShoutBattle","WarriorRotationConfig","inputs","InputHelpers.makeRotationBooleanInput","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","showWhen","getRotation","customRotationOption","InputHelpers.makeRotationEnumInput","Slam","Whirlwind","InputHelpers.makeRotationNumberInput","SunderArmorNone","SunderArmorHelpStack","BattleStance","BerserkerStance","sim","getShowExperimental","InputHelpers.makeCustomRotationInput","numColumns","SpellOption","BloodthirstCustom","WhirlwindCustom","SlamCustom","SlamExpiring","text","MortalStrike","Rend","Overpower","Execute","ThunderClap","WarriorSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatArmor","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","StatSpellCrit","modifyDisplayStats","stats","Stats","getInFrontOfTarget","addStat","getTalents","weaponMastery","Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION","talents","defaults","Presets.P3_FURY_PRESET_ALLIANCE","epWeights","fromMap","consumes","Presets.DefaultConsumes","Presets.DefaultRotation","Presets.FuryTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","swiftRetribution","strengthOfEarthTotem","icyTalons","abominationsMight","leaderOfThePack","TristateEffectRegular","sanctifiedRetribution","bloodlust","devotionAura","stoneskinTotem","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","bloodFrenzy","heartOfTheCrusader","mangle","curseOfWeakness","faerieFire","playerIconInputs","WarriorInputs.ShoutPicker","WarriorInputs.Recklessness","rotationInputs","WarriorInputs.WarriorRotationConfig","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","WarriorInputs.StartingRage","WarriorInputs.StanceSnapshot","WarriorInputs.Munch","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.ArmsTalents","rotations","Presets.ROTATION_FURY","Presets.P1_PRERAID_FURY_PRESET","Presets.P1_FURY_PRESET","Presets.P2_FURY_PRESET","Presets.P3_FURY_PRESET_HORDE","Presets.P1_PRERAID_ARMS_PRESET","Presets.P1_ARMS_PRESET","Presets.P2_ARMS_PRESET","Presets.P3_ARMS_2P_PRESET_ALLIANCE","Presets.P3_ARMS_4P_PRESET_ALLIANCE","Presets.P3_ARMS_2P_PRESET_HORDE","Presets.P3_ARMS_4P_PRESET_HORDE","addOptimizeGemsAction","this","addAction","async","optimizeGems","optimizedGear","getGear","withoutGems","withMetaGem","db","lookupGem","getEpWeights","tearSlot","findTearSlot","socketTear","updateGear","redSockets","findSocketsByColor","GemColor","GemColorRed","redGemCaps","Array","push","calcArpCap","expCap","withStat","critCap","calcCritCap","startIdx","hasProfession","Profession","Jewelcrafting","optimizeJcGems","fillGemsToCaps","yellowSockets","GemColorYellow","yellowGemCaps","hitCap","Mechanics.MELEE_HIT_RATING_PER_HIT_CHANCE","add","arpCap","hasTrinket","calcArpTarget","agiProcs","hasRelic","setGear","nextEventID","updateCharacterStats","fromProto","getCurrentStats","finalStats","maxBlueSocketBonusEP","slot","getItemSlots","item","getEquippedItem","numSocketsOfColor","GemColorBlue","socketBonusEP","socketBonus","computeEP","tearSlotItem","socketIdx","socketColor","allSocketColors","entries","withEquippedItem","withGem","socketList","isBlacksmithing","ignoreYellowSockets","curSocketColors","hasSocketedGem","matchYellowSocket","gemCaps","numPasses","firstIdx","updatedGear","currentGem","itemSlot","slice","newStats","currentCap","belowCaps","length","nextGem","nextCap","capForReplacement","equals","subtract","idx","nextIdx","calcDistanceToArpTarget","numJcArpGems","passiveArp","numRedSockets","arpTarget","projectedArp","Math","max","min","floor","abs","redSocketList","getStat","optimalJcArpGems","minDistanceToArpTarget","i","distanceToArpTarget","gemId"],"mappings":"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"}